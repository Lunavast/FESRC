@乱数成長＆力−守備＝ダメージ式戦闘計算

*プロローグ:
//システム全体やステージ毎の初期化をする
Call FEシステム初期化
Call FEステージ毎の初期化
Exit


FEシステム初期化:
//システム全体の初期化を行う。初回のみ
Global （力−守備＝ダメージ）式戦闘処理初期化
If （力−守備＝ダメージ）式戦闘処理初期化 != 1 Then
    //名称変更
    RenameTerm "サイズ" "ランク"
    
    //オプション設定
    Option ダメージ表示無効
    Option 武器準備アニメ非表示
    Option 戦闘中画面初期化無効
    Option 魔力使用
    Option 予測ダメージ非表示
    Option 等身大基準
    Option ＥＮ０時行動可
    Option 改造不可
    Option アビリティ経験値無効
    
    //広域変数を宣言
    Global ステージＢＧＭ
    Global キャンプマップ
    Global キャンプオブジェ
    Global キャンプＢＧＭ
    Global ウィンドウ画像
    Set ウィンドウ画像 "Event\165_1.jpg"
    Global ＣＣウィンドウ画像
    Set ＣＣウィンドウ画像 "Event\class_change.jpg"
    Global 通貨単位
    Set 通貨単位 "Ｇ"
    Global ショップＢＧＭ
    Global ショップ背景
    Global ショップ利用数
    Set ショップ利用数 0
    Global アイテム破損無効フラグ
    Global 再移動無効フラグ
    Global 武器盗み可フラグ
    Global ドロップアイテム可視化フラグ
	Global ＣＴダメージ３倍フラグ
    Global レベル上限S
    Set レベル上限S 10
    Global レベル上限M
    Set レベル上限M 20
    Global レベル上限L
    Set レベル上限L 20
    Global レベル上限LL
    Set レベル上限LL 30
    Global gＰ−Ｄｅ＝Ｄステータスアイテム装備数
    Set gＰ−Ｄｅ＝Ｄステータスアイテム装備数 0
    
    //アイテムデータを取得するためのユニット・パイロットを用意
    Unit アイテムデータ表示用Ｕ 0
    Pilot アイテムデータ表示用Ｐ 0
    Ride アイテムデータ表示用Ｐ
    Leave アイテムデータ表示用Ｐ
    
    Set （力−守備＝ダメージ）式戦闘処理初期化
EndIf
Return


FEステージ毎の初期化:
//ステージ毎の初期化を行う
//ショップ準備
Set 店番号

Call FEアイテム残り回数持ち越し "読込"
Return


FEアイテム残り回数持ち越し:
//アイテムの残り回数を持ち越す。
Local MODE_SAVE = "保存"
Local MODE_LOAD = "読込"

Local mode = Args(1)
Switch mode
Case MODE_SAVE
    Global 残り保存キャラクター並び
    Set 残り保存キャラクター並び ""
    Global 残り保存インデックス
    Set 残り保存インデックス ""
    
    Local 残り数 = ""
    Local 現在位置 = 1
    ForEach 味方 全て
        Set 残り保存キャラクター並び (残り保存キャラクター並び & 対象パイロット & " ")
        Set 残り保存インデックス (残り保存インデックス & 現在位置 & " ")
        For i = 1 To CountItem(対象ユニットＩＤ)
            If Info(Info(ユニット, 対象ユニットＩＤ, アイテム, i), 装備個所) != "非表示" Then
                Set 残り数 (残り数 & アイテム残り回数取得(対象ユニットＩＤ, i) & " ")
                Incr 現在位置
            EndIf
        Next
    Next
    Global 残り数Arr
    Array 残り数Arr 残り数 " "
Case MODE_LOAD
    Local キャラクター順番 header margin
    ForEach 味方 全て
        Set キャラクター順番 LSearch(残り保存キャラクター並び, 対象パイロット)
        If キャラクター順番 != "" Then
            Set header LIndex(残り保存インデックス, キャラクター順番)
            Set margin 0
            Local i
            For i = 1 To CountItem(対象ユニットＩＤ)
                If Info(Info(ユニット, 対象ユニットＩＤ, アイテム, i), 装備個所) != "非表示" Then
                    Call アイテム残り回数設定 対象ユニットＩＤ i 残り数Arr[(header + margin)]
                    Incr margin
                EndIf
            Next
        EndIf
    Next
    UnSet 残り保存キャラクター並び
    UnSet 残り保存インデックス
    UnSet 残り数Arr
Case Else
    Talk
    サブルーチン「FEアイテム残り回数持ち越し」の引数の値が不正です。
    End
EndSw
Return


*エピローグ:
//ステージ毎の初期化を行う
Call FEステージ終了処理
Exit


FEステージ終了処理:
//ステージ毎の終了処理を行う

//味方以外すべてのユニットの装備を解除
ForEach 全 全て
    If Party(対象パイロット) != "味方" Then
        ClearSkill 対象パイロット 装備中武器名
        ClearSkill 対象パイロット 装備中武器残
        ClearSkill 対象パイロット 装備中武器残表示
    EndIf
Next

//全味方の再移動状態を解除
ForEach 味方
    Call FE再移動 "解除"
Next

//変身解除
Local i
For i = 1 To Count(FE変身パイロット)
    If FE変身パイロット[i] != "" Then
        Call FE変身解除 UnitID(FE変身パイロット[i])
    EndIf
Next
UnSet FE変身ターン残り
UnSet FE変身パイロット

Call FEアイテム残り回数持ち越し "保存"
Return


*攻撃 全 全:
//SRC自体の戦闘処理を全て独自の戦闘処理に置き換える
Call FE戦闘処理置換
Exit


FE戦闘処理置換:
//SRC自体の戦闘処理を全て独自の戦闘処理に置き換える
Cancel
If フェイズ = "味方" Then
    If Call(FE攻撃実行確認) Then
        Call 攻撃イベント実行
        Call FE戦闘開始
    Else
        //キャンセル処理
        If (行動前座標Ｘ取得(対象パイロット) != X(対象パイロット)) Or (行動前座標Ｙ取得(対象パイロット) != Y(対象パイロット)) Then
            Move 行動前座標Ｘ取得(対象パイロット) 行動前座標Ｙ取得(対象パイロット)
            If (InStr(Info(ユニット, 対象ユニットＩＤ, 移動可能地形), "空") != 0) Then
                EN(対象ユニットＩＤ) = EN(対象ユニットＩＤ) + 5
            EndIf
        EndIf
        Action(対象パイロット) = Action(対象パイロット) + 1
        Center 対象パイロット
        Set 再移動キャンセル[対象パイロット]
    EndIf
Else
    Call 攻撃イベント実行
    Call FE戦闘開始
EndIF
Return


*ターン 全 味方:
//ターン開始時のシステム上の処理を記述
//システムによる状態の変化を解除する
ForEach 味方
    Call FEシステム状態変化解除
Next
UnSet 再移動可
Local tmp
ForEach tmp In 再移動キャンセル
	UnSet 再移動キャンセル[tmp]
Next
UnSet 再移動キャンセル
Exit


FEシステム状態変化解除:
//システムによる状態の変化を解除する
Local target = Args(1)  //メインパイロット名または愛称、ユニット名もしくはユニットＩＤ(省略可)
If target != "" Then
    Set target IIf(IsDefined(Args(1), パイロット), PilotID(UnitID(Args(1))), PilotID(Args(1)))
Else
    Set target 対象パイロット
EndIf

If Skill(target, アイテム交換済) Then
    RemoveItem target 移動力−１０
    ClearSkill target "アイテム交換済"
    UnSet アイテム交換不可[target]
    UnSet 装備変更不可[target]
EndIf
If Skill(target, ショップ利用済) Then
    RemoveItem target 移動力−１０
    ClearSkill target ショップ利用済
    ClearSkill target "アイテム使用不可"
    ClearStatus "攻撃不能"
    UnSet アイテム交換不可[target]
    UnSet 盗む不可[target]
    UnSet 踊る不可[target]
    UnSet ショップ利用不可[target]
    Incr ショップ利用数 -1
EndIf
Call FE再移動 target "解除"
Return


*行動終了 全:
//ユニットが行動終了した時のシステム上の処理を記述
If Action(対象パイロット) <= 0 Then
	Call FE再移動
EndIf

If Action(対象パイロット) <= 0 Then
    Call FEシステム状態変化解除
EndIf
Exit


FE再移動:
//ユニットを再移動状態にしたり、解除したりする
Local MODE_CLEAR = "解除"

Local target = Args(1)  //メインパイロット名または愛称、ユニット名もしくはユニットＩＤ(省略可)
Local mode = Args(2)    //再移動を解除する場合は"解除"を指定する
If Args(1) = "" Then
    //引数なしの時
    Set target 対象パイロット
ElseIf Args(1) = MODE_CLEAR Then
    //引数が1つで尚且つ"解除"が渡された時
    Set target 対象パイロット
    Set mode Args(1)
Else
	//引数が２つの時
    Set target IIf(IsDefined(Args(1), パイロット), PilotID(UnitID(Args(1))), PilotID(Args(1)))
EndIf

If mode != MODE_CLEAR Then
    //再移動状態にする
    If (再移動キャンセル[target] != 1) And (キャンプ中 != 1) Then
        If 再移動無効フラグ != 1 Then
            If Skill(target, "状態：再移動") = 0 Then
                If 再移動可[target] = 1 Then
                    If (Abs(行動前座標Ｘ取得(target) - X(target)) + Abs(行動前座標Ｙ取得(target) - Y(target))) = Info(ユニット, UnitID(target), 移動力) Exit
                    Local 移動量 = Call(移動コスト取得, target, X(target), Y(target))
                    If 移動量 != Info(ユニット, UnitID(target), 移動力) Then
                        If Party(target) != "味方" Then
                            If (Info(パイロット, target, 思考モード) != "固定") And (Info(パイロット, target, 思考モード) != "待機") Then
                                Set 思考モードArr[target] Info(パイロット, target, 思考モード)
                                ChangeMode target "逃亡"
                            EndIf
                            Center target
                        Else
                            Item ("移動力−" & Wide(移動量))
                            Set アイテム交換不可[target]
                            Set 装備変更不可[target]
                            Set 盗む不可[target]
                            Set 踊る不可[target]
                            Set ショップ利用不可[target]
                        EndIf
                        SetSkill target "状態：再移動" -1
                        SetSkill target "アイテム使用不可" -1 非表示
                        If Skill(target, "アイテム交換済") != 1 Then
                            SetStatus target 攻撃不能 1
                        EndIf
                        Equip target ("移動力−" & Wide(移動量))
                        Set 再移動移動力−[target] 移動量
                        Action(target) = Action(target) + 1
                        Redraw
                        UnSet 再移動可[target]
                    EndIf
                EndIf
            EndIf
        EndIf
    Else
        //再移動キャンセルは一回限り再移動の処理をキャンセルします。
        UnSet 再移動キャンセル[target]
    EndIf
Else
    //解除
    If Skill(target, "状態：再移動") Then
        ClearSkill target "状態：再移動"
        ClearSkill target "アイテム使用不可"
        ClearStatus target "攻撃不能"
        If Party(target) != "味方" Then
            If IsVarDefined(思考モードArr[target]) Then
                ChangeMode target 思考モードArr[target]
                UnSet 思考モードArr[target]
            EndIf
        Else
            UnSet アイテム交換不可[target]
            UnSet 装備変更不可[target]
            UnSet 盗む不可[target]
            UnSet 踊る不可[target]
            UnSet ショップ利用不可[target]
        EndIf
        RemoveItem target ("移動力−" & Wide(再移動移動力−[target]))
        UnSet 再移動移動力−[target]
    EndIf
EndIf
Return


FERestoreEvent:
//イベントを有効にする
Local label = Args(1)   //有効にするラベル
Set ReplacedLabel Replace(label, "_", " ")

Local type = Replace(LIndex(ReplacedLabel, 1), "*", "")

//重複がなければ有効化
Local i
Switch type
Case "攻撃"
    For i = 1 To Count(攻撃イベント)
        If 攻撃イベント[i] = ReplacedLabel Then
            Break
        EndIf
    Next
    If Count(攻撃イベント) < i Then
        Set 攻撃イベント[i] ReplacedLabel
    EndIf
Case "攻撃後"
    For i = 1 To Count(攻撃後イベント)
        If 攻撃後イベント[i] = ReplacedLabel Then
            Break
        EndIf
    Next
    If Count(攻撃後イベント) < i Then
        Set 攻撃後イベント[i] ReplacedLabel
    EndIf
Case "損傷率"
    For i = 1 To Count(損傷率イベント)
        If 損傷率イベント[i] = ReplacedLabel Then
            Break
        EndIf
    Next
    If Count(損傷率イベント) < i Then
        Set 損傷率イベント[i] ReplacedLabel
    EndIf
Case "破壊"
    For i = 1 To Count(破壊イベント)
        If 破壊イベント[i] = ReplacedLabel Then
            Break
        EndIf
    Next
    If Count(破壊イベント) < i Then
        Set 破壊イベント[i] ReplacedLabel
    EndIf
Case "全滅"
    For i = 1 To Count(全滅イベント)
        If 全滅イベント[i] = ReplacedLabel Then
            Break
        EndIf
    Next
    If Count(全滅イベント) < i Then
        Set 全滅イベント[i] ReplacedLabel
    EndIf
Case Else
    Talk
    サブルーチン「FERestoreEvent」の引数が間違っています
    End
EndSw
Return


FEClearEvent:
//イベントを無効にする
Local label = Args(1)   //無効にするラベル
Set ReplacedLabel Replace(label, "_", " ")

Local type = Replace(LIndex(ReplacedLabel, 1), "*", "")

Local i
Switch type
Case "攻撃"
    For i = 1 To Count(攻撃イベント)
        If 攻撃イベント[i] = ReplacedLabel Then
            Set 攻撃イベント[i] ""
            Break
        EndIf
    Next
Case "攻撃後"
    For i = 1 To Count(攻撃後イベント)
        If 攻撃後イベント[i] = ReplacedLabel Then
            Set 攻撃後イベント[i] ""
            Break
        EndIf
    Next
Case "損傷率"
    For i = 1 To Count(損傷率イベント)
        If 損傷率イベント[i] = ReplacedLabel Then
            Set 損傷率イベント[i] ""
            Break
        EndIf
    Next
Case "破壊"
    For i = 1 To Count(破壊イベント)
        If 破壊イベント[i] = ReplacedLabel Then
            Set 破壊イベント[i] ""
            Break
        EndIf
    Next
Case "全滅"
    For i = 1 To Count(全滅イベント)
        If 全滅イベント[i] = ReplacedLabel Then
            Set 全滅イベント[i] ""
            Break
        EndIf
    Next
Case Else
    Talk
    サブルーチン「FEClearEvent」の引数が間違っています
    End
EndSw
Return


攻撃イベント実行:
//適切なタイミングで攻撃イベントを実行する
Local target = 対象パイロット
Local enemy = 相手パイロット
Local fNormalLabelExecute = 1
Local i
For i = 1 To Count(攻撃イベント)
    If LIndex(攻撃イベント[i], 2) = Pilot(UnitID(target)) Or LIndex(攻撃イベント[i], 2) = Party(UnitID(target)) Or LIndex(攻撃イベント[i], 2) = Info(パイロット, target, 愛称) Or LIndex(攻撃イベント[i], 2) = Unit(target) Or LIndex(攻撃イベント[i], 2) = target Then
        If LIndex(攻撃イベント[i], 3) = Pilot(UnitID(enemy)) Or LIndex(攻撃イベント[i], 3) = Party(UnitID(enemy)) Or LIndex(攻撃イベント[i], 3) = Info(パイロット, enemy, 愛称) Or LIndex(攻撃イベント[i], 3) = Unit(enemy) Or LIndex(攻撃イベント[i], 3) = enemy Then
            If Left(攻撃イベント[i], 1) = "*" Then
                Call Replace(攻撃イベント[i], " ", "_")
            ElseIf fNormalLabelExecute != 0 Then
                Call Replace(攻撃イベント[i], " ", "_")
                Set fNormalLabelExecute 0
            EndIf
        EndIf
    ElseIf LIndex(攻撃イベント[i], 3) = Pilot(UnitID(target)) Or LIndex(攻撃イベント[i], 3) = Party(UnitID(target)) Or LIndex(攻撃イベント[i], 3) = Info(パイロット, target, 愛称) Or LIndex(攻撃イベント[i], 3) = Unit(target) Or LIndex(攻撃イベント[i], 3) = target Then
        If LIndex(攻撃イベント[i], 2) = Pilot(UnitID(enemy)) Or LIndex(攻撃イベント[i], 2) = Party(UnitID(enemy)) Or LIndex(攻撃イベント[i], 2) = Info(パイロット, enemy, 愛称) Or LIndex(攻撃イベント[i], 2) = Unit(enemy) Or LIndex(攻撃イベント[i], 2) = enemy Then
            If Left(攻撃イベント[i], 1) = "*" Then
                Call Replace(攻撃イベント[i], " ", "_")
            ElseIf fNormalLabelExecute != 0 Then
                Call Replace(攻撃イベント[i], " ", "_")
                Set fNormalLabelExecute 0
            EndIf
        EndIf
    EndIf
Next
If IsDefined(target) Then
	Select target
EndIf
If IsDefined(enemy) Then
	SelectTarget enemy
EndIf
Return


攻撃後イベント実行:
//適切なタイミングで攻撃後イベントを実行する
Local target = 対象パイロット
Local enemy = 相手パイロット
If (Status(UnitID(target)) != 破壊) And (破壊キャンセル状態[UnitID(target)] != 1) Then
    If (Status(UnitID(enemy)) != 破壊) And (破壊キャンセル状態[UnitID(enemy)] != 1) Then
        Local fNormalLabelExecute = 1
        Local i
        For i = 1 To Count(攻撃後イベント)
            If LIndex(攻撃後イベント[i], 2) = Pilot(UnitID(target)) Or LIndex(攻撃後イベント[i], 2) = Party(UnitID(target)) Or LIndex(攻撃後イベント[i], 2) = Info(パイロット, target, 愛称) Or LIndex(攻撃後イベント[i], 2) = Unit(target) Or LIndex(攻撃後イベント[i], 2) = target Then
                If LIndex(攻撃後イベント[i], 3) = Pilot(UnitID(enemy)) Or LIndex(攻撃後イベント[i], 3) = Party(UnitID(enemy)) Or LIndex(攻撃後イベント[i], 3) = Info(パイロット, enemy, 愛称) Or LIndex(攻撃後イベント[i], 3) = Unit(enemy) Or LIndex(攻撃後イベント[i], 3) = enemy Then
                    If Left(攻撃後イベント[i], 1) = "*" Then
                        Call Replace(攻撃後イベント[i], " ", "_")
                    ElseIf fNormalLabelExecute != 0 Then
                        Call Replace(攻撃後イベント[i], " ", "_")
                        Set fNormalLabelExecute 0
                    EndIf
                EndIf
            ElseIf LIndex(攻撃後イベント[i], 3) = Pilot(UnitID(target)) Or LIndex(攻撃後イベント[i], 3) = Party(UnitID(target)) Or LIndex(攻撃後イベント[i], 3) = Info(パイロット, target, 愛称) Or LIndex(攻撃後イベント[i], 3) = Unit(target) Or LIndex(攻撃後イベント[i], 3) = target Then
                If LIndex(攻撃後イベント[i], 2) = Pilot(UnitID(enemy)) Or LIndex(攻撃後イベント[i], 2) = Party(UnitID(enemy)) Or LIndex(攻撃後イベント[i], 2) = Info(パイロット, enemy, 愛称) Or LIndex(攻撃後イベント[i], 2) = Unit(enemy) Or LIndex(攻撃後イベント[i], 2) = enemy Then
                    If Left(攻撃後イベント[i], 1) = "*" Then
                        Call Replace(攻撃後イベント[i], " ", "_")
                    ElseIf fNormalLabelExecute != 0 Then
                        Call Replace(攻撃後イベント[i], " ", "_")
                        Set fNormalLabelExecute 0
                    EndIf
                EndIf
            EndIf
        Next
    EndIf
EndIf
If IsDefined(target) Then
	Select target
EndIf
If IsDefined(enemy) Then
	SelectTarget enemy
EndIf
Return


破壊イベント実行:
Local target = 対象パイロット
Local enemy = 相手パイロット
//適切なタイミングで破壊イベントを実行する
If (Status(UnitID(enemy)) = 破壊) Or (破壊キャンセル状態[UnitID(enemy)] = 1) Then
    Local fNormalLabelExecute = 1
    Local i
    For i = 1 To Count(破壊イベント)
        If LIndex(破壊イベント[i], 2) = Pilot(UnitID(enemy)) Or LIndex(破壊イベント[i], 2) = Party(UnitID(enemy)) Or LIndex(破壊イベント[i], 2) = Info(パイロット, enemy, 愛称) Or LIndex(破壊イベント[i], 2) = Unit(enemy) Or LIndex(破壊イベント[i], 2) = enemy Then
			If Not 破壊イベント[i] = "" Then
	            If Left(破壊イベント[i], 1) = "*" Then
	                Call Replace(破壊イベント[i], " ", "_")
	            ElseIf fNormalLabelExecute != 0 Then
	                Call Replace(破壊イベント[i], " ", "_")
	                Set fNormalLabelExecute 0
	            EndIf
			EndIf
        EndIf
    Next
EndIf
If (Status(UnitID(target)) = 破壊) Or (破壊キャンセル状態[UnitID(target)] = 1) Then
    Local fNormalLabelExecute
    Set fNormalLabelExecute 1
    Local i
    For i = 1 To Count(破壊イベント)
        If LIndex(破壊イベント[i], 2) = Pilot(UnitID(target)) Or LIndex(破壊イベント[i], 2) = Party(UnitID(target)) Or LIndex(破壊イベント[i], 2) = Info(パイロット, target, 愛称) Or LIndex(破壊イベント[i], 2) = Unit(target) Or LIndex(破壊イベント[i], 2) = target Then
			If Not 破壊イベント[i] = "" Then
	            If Left(破壊イベント[i], 1) = "*" Then
	                Call Replace(破壊イベント[i], " ", "_")
	            ElseIf fNormalLabelExecute != 0 Then
	                Call Replace(破壊イベント[i], " ", "_")
	                Set fNormalLabelExecute 0
	            EndIf
        	EndIf
		EndIf
    Next
EndIf
If IsDefined(target) Then
	Select target
EndIf
If IsDefined(enemy) Then
	SelectTarget enemy
EndIf
Return


全滅イベント実行:
//適切なタイミングで全滅イベントを実行する
Local target = IIf(フェイズ = 味方 Or フェイズ = ＮＰＣ, 対象パイロット, 相手パイロット)
Local enemy = IIf(フェイズ = 味方 Or フェイズ = ＮＰＣ, 相手パイロット, 対象パイロット)

Local 相手全体数 = IIf(Party(enemy) = 敵, 敵数, 中立数)
Local fNormalLabelExecute
If 相手全体数 <= 0 Then
    Set fNormalLabelExecute
    Local i
    For i = 1 To Count(全滅イベント)
        If LIndex(全滅イベント[i], 2) = Party(enemy) Then
            If Left(全滅イベント[i], 1) = "*" Then
                Call Replace(全滅イベント[i], " ", "_")
            ElseIf fNormalLabelExecute != 0 Then
                Call Replace(全滅イベント[i], " ", "_")
                Set fNormalLabelExecute 0
            EndIf
        EndIf
    Next
EndIf
Local 対象全体数 = IIf(Party(target) = 味方, 味方数, ＮＰＣ数)
If 対象全体数 <= 0 Then
    Set fNormalLabelExecute
    Local i
    For i = 1 To Count(全滅イベント)
        If LIndex(全滅イベント[i], 2) = Party(target) Then
            If Left(全滅イベント[i], 1) = "*" Then
                Call Replace(全滅イベント[i], " ", "_")
            ElseIf fNormalLabelExecute != 0 Then
                Call Replace(全滅イベント[i], " ", "_")
                Set fNormalLabelExecute 0
            EndIf
        EndIf
    Next
EndIf
If IsDefined(target) Then
	Select target
EndIf
If IsDefined(enemy) Then
	SelectTarget enemy
EndIf
Return


損傷率イベント実行:
//適切なタイミングで損傷率イベントを実行する
Local target = 対象パイロット
Local enemy = 相手パイロット
If (Status(UnitID(enemy)) != 破壊) And (破壊キャンセル状態[UnitID(enemy)] != 1) Then
    Local fNormalLabelExecute = 1
    Local i
    For i = 1 To Count(損傷率イベント)
        If LIndex(損傷率イベント[i], 2) = Pilot(UnitID(enemy)) Or LIndex(損傷率イベント[i], 2) = Party(UnitID(enemy)) Or LIndex(損傷率イベント[i], 2) = Info(パイロット, enemy, 愛称) Or LIndex(損傷率イベント[i], 2) = Unit(enemy) Or LIndex(損傷率イベント[i], 2) = enemy Then
            If LIndex(損傷率イベント[i], 3) <= Damage(enemy) Then
                If Left(損傷率イベント[i], 1) = "*" Then
                    Call Replace(損傷率イベント[i], " ", "_")
                ElseIf fNormalLabelExecute != 0 Then
                    Call Replace(損傷率イベント[i], " ", "_")
                    Set fNormalLabelExecute 0
                EndIf
            EndIf
        EndIf
    Next
EndIf
If (Status(UnitID(target)) != 破壊) And (破壊キャンセル状態[UnitID(target)] != 1) Then
    Local fNormalLabelExecute
    Set fNormalLabelExecute 1
    For i = 1 To Count(損傷率イベント)
        If LIndex(損傷率イベント[i], 2) = Pilot(UnitID(target)) Or LIndex(損傷率イベント[i], 2) = Party(UnitID(target)) Or LIndex(損傷率イベント[i], 2) = Info(パイロット, target, 愛称) Or LIndex(損傷率イベント[i], 2) = Unit(target) Or LIndex(損傷率イベント[i], 2) = target Then
            If LIndex(損傷率イベント[i], 3) <= Damage(target) Then
                If Left(損傷率イベント[i], 1) = "*" Then
                    Call Replace(損傷率イベント[i], " ", "_")
                ElseIf fNormalLabelExecute != 0 Then
                    Call Replace(損傷率イベント[i], " ", "_")
                    Set fNormalLabelExecute 0
                EndIf
            EndIf
        EndIf
    Next
EndIf
If IsDefined(target) Then
	Select target
EndIf
If IsDefined(enemy) Then
	SelectTarget enemy
EndIf
Return


回復アイテム:
//回復アイテムを使用します。
Local from    = Args(1) //使用するメインパイロット名または愛称、ユニット名またはユニットＩＤ
Local ability = Args(2) //アビリティ番号
Local 回復量  = Args(3) //回復量
Local target  = Args(4) //回復させるメインパイロット名または愛称、ユニット名またはユニットＩＤ
Local animeName = Args(5) //表示するアニメ。省略可

Set from IIf(IsDefined(Args(1), パイロット), UnitID(from), UnitID(PilotID(Args(1))))
Set target IIf(IsDefined(Args(4), パイロット), UnitID(target), UnitID(PilotID(Args(4))))

If (from != "") And (IsNumeric(ability)) And (IsNumeric(回復量)) And (target != "") Then
    Call ヒーリング 回復量 target animeName

    //アビリティが杖ならば経験値獲得
    If Info(Info(ユニット, from, アビリティ, ability), アイテムクラス) = "杖" Then
        Call Ｐ−Ｄｅ＝Ｄ経験値加算 PilotID(from) Ｐ−Ｄｅ＝Ｄ獲得経験値取得(from, target, "杖", Info(ユニット, from, 特殊能力レベル, (Info(ユニット, from, アビリティ, ability) & "経験値")))
    EndIf

    If (Info(ユニット, from, アビリティ, ability, 最大使用回数) != 0) Then
        If ((Info(ユニット, from, アビリティ, ability, 使用回数) - 1) <= 0) Then
            //アイテム破損
            If アイテム破損無効フラグ = "" Then
                FERemoveItem from Info(ユニット, from, アビリティ, ability) 1
            EndIf
        Else
            SetStock from ability (Info(ユニット, from, アビリティ, ability, 使用回数) - 1)
        EndIf
    EndIf
Else
    Talk
    サブルーチン「回復アイテム」の引数の値が不正です。
    End
EndIf
Cancel
Return


ヒーリング:
//アニメと同時にユニットのHPを回復します。
Local 回復量 = Args(1)  //回復量
Local target = Args(2)  //回復させるメインパイロット名または愛称、ユニット名またはユニットＩＤ
Local animeName = Args(3)//表示するアニメ。省略可

Set target IIf(IsDefined(target, パイロット), UnitID(target), UnitID(PilotID(target)))

If IsNumeric(回復量) And (target != "") Then
    PlayEffect IIf(animeName != "", animeName, "回復魔法") target
    Call 回復演出 target 回復量
    HP(target) = HP(target) + 回復量
Else
    Talk
    サブルーチン「ヒーリング」の引数の値が不正です。
    End
EndIf
Return


FEクラスチェンジ:
クラスチェンジ:
//クラスチェンジを行います。
Local target = Args(1)  //メインパイロット名または愛称、ユニット名またはユニットＩＤ（省略可）
Local after = Args(2)   //クラスチェンジ先のユニット
If Args(2) = "" Then
    //引数が1つの時
    Set target 対象パイロット
    Set after Args(1)
EndIf

Set target IIf(IsDefined(target, ユニット), PilotID(target), PilotID(UnitID(target)))

If (target != "") And (after != "") Then
    //クラスチェンジ前の値を保存
    Set 成長前力 Info(パイロット, target, ステータス力)
    Set 成長前魔力 Info(パイロット, target, ステータス魔力)
    Set 成長前技 Info(パイロット, target, ステータス技)
    Set 成長前速さ Info(パイロット, target, ステータス速さ)
    Set 成長前幸運 Info(パイロット, target, ステータス幸運)
    Set 成長前守備 Info(ユニット, UnitID(target), ステータス守備)
    Set 成長前魔防 Info(ユニット, UnitID(target), ステータス魔防)
    Set 成長前ＨＰ Info(ユニット, UnitID(target), 最大ＨＰ)
    Set 成長前クラス Unit(target)
    Set 成長前グラフィック Info(ユニット, UnitID(target), グラフィック)
    Set 成長前武器クラス Info(ユニット, UnitID(target), 特殊能力データ, 武器クラス)
    Set 成長前レベル Level(target)
	
	Local 元HP = HP(target)
	Local 元EN = EN(target)
    FEUpgrade UnitID(target) after
	HP(target) = 元HP
	EN(target) = 元EN
    //レベルを１に
    LevelUp target ((Level(target) - 1) * -1)
    //経験値を０に
    ExpUp target (Info(パイロット, target, 累積経験値) * -1)

    //ステータス上昇
    //書式フォーマットのレベルに応じて処理切り替え
    Switch FESRCDataFormatLv
    Case 1
        //FESRCv0.1 試験公開版
        If Info(ユニット, UnitID(target), 特殊能力所有, "力上昇") Then
            SetSkill target (ステータス力 & ＵＰ) (Skill(target, (ステータス力 & ＵＰ)) + Info(ユニット, UnitID(target), 特殊能力解説, "力上昇")) 非表示
        EndIf
        If Info(ユニット, UnitID(target), 特殊能力所有, "魔力上昇") Then
            SetSkill target (ステータス魔力 & ＵＰ) (Skill(target, (ステータス魔力 & ＵＰ)) + Info(ユニット, UnitID(target), 特殊能力解説, "魔力上昇")) 非表示
        EndIf
        If Info(ユニット, UnitID(target), 特殊能力所有, "技上昇") Then
            SetSkill target (ステータス技 & ＵＰ) (Skill(target, (ステータス技 & ＵＰ)) + Info(ユニット, UnitID(target), 特殊能力解説, "技上昇")) 非表示
        EndIf
        If Info(ユニット, UnitID(target), 特殊能力所有, "速さ上昇") Then
            SetSkill target (ステータス速さ & ＵＰ) (Skill(target, (ステータス速さ & ＵＰ)) + Info(ユニット, UnitID(target), 特殊能力解説, "速さ上昇")) 非表示
        EndIf
        If Info(ユニット, UnitID(target), 特殊能力所有, "幸運上昇") Then
            SetSkill target (ステータス幸運 & ＵＰ) (Skill(target, (ステータス幸運 & ＵＰ)) + Info(ユニット, UnitID(target), 特殊能力解説, "幸運上昇")) 非表示
        EndIf
        If Info(ユニット, UnitID(target), 特殊能力所有, "魔防上昇") Then
            For i = 1 To Info(ユニット, UnitID(target), 特殊能力解説, "魔防上昇")
                Item 魔防＋１
                Equip UnitID(target) 魔防＋１
            Next
        EndIf
        If Info(ユニット, UnitID(target), 特殊能力所有, "守備上昇") Then
            For i = 1 To Info(ユニット, UnitID(target), 特殊能力解説, "守備上昇")
                Item 守備＋１
                Equip UnitID(target) 守備＋１
            Next
        EndIf
        If Info(ユニット, UnitID(target), 特殊能力所有, "ＨＰ上昇") Then
            For i = 1 To Info(ユニット, UnitID(target), 特殊能力解説, "ＨＰ上昇")
                Item ＨＰ＋１
                Equip UnitID(target) ＨＰ＋１
            Next
        EndIf
    Case Else
        //最新
        SetSkill target 力   (Skill(target, 力  ) + Info(ユニット, UnitID(target), 特殊能力レベル, "力上昇"))
        SetSkill target 魔力 (Skill(target, 魔力) + Info(ユニット, UnitID(target), 特殊能力レベル, "魔力上昇"))
        SetSkill target 技   (Skill(target, 技  ) + Info(ユニット, UnitID(target), 特殊能力レベル, "技上昇"))
        SetSkill target 速さ (Skill(target, 速さ) + Info(ユニット, UnitID(target), 特殊能力レベル, "速さ上昇"))
        SetSkill target 幸運 (Skill(target, 幸運) + Info(ユニット, UnitID(target), 特殊能力レベル, "幸運上昇"))
        SetSkill target 体格 (Skill(target, 体格) + Info(ユニット, UnitID(target), 特殊能力レベル, "体格上昇"))
        For i = 1 To Info(ユニット, UnitID(target), 特殊能力レベル, "魔防上昇")
            Item 魔防＋１
            Equip target 魔防＋１
        Next
        For i = 1 To Info(ユニット, UnitID(target), 特殊能力レベル, "守備上昇")
            Item 守備＋１
            Equip target 守備＋１
        Next
        For i = 1 To Info(ユニット, UnitID(target), 特殊能力レベル, "ＨＰ上昇")
            Item ＨＰ＋１
            Equip target ＨＰ＋１
        Next
    EndSw

    //上昇値を取得
    Set 力上昇値 (Info(パイロット, target, ステータス力) - 成長前力)
    Set 魔力上昇値 (Info(パイロット, target, ステータス魔力) - 成長前魔力)
    Set 技上昇値 (Info(パイロット, target, ステータス技) - 成長前技)
    Set 速さ上昇値 (Info(パイロット, target, ステータス速さ) - 成長前速さ)
    Set 幸運上昇値 (Info(パイロット, target, ステータス幸運) - 成長前幸運)
    Set 守備上昇値 (Info(ユニット, UnitID(target), ステータス守備) - 成長前守備)
    Set 魔防上昇値 (Info(ユニット, UnitID(target), ステータス魔防) - 成長前魔防)
    Set ＨＰ上昇値 (Info(ユニット, UnitID(target), 最大ＨＰ) - 成長前ＨＰ)

    Call クラスチェンジ演出 target
Else
    Talk
    サブルーチン「FEクラスチェンジ」の引数の値が不正です。
    End
EndIf
Call FEクラスチェンジ終了処理
Return


FEクラスチェンジ終了処理:
UnSet 成長前力
UnSet 成長前魔力
UnSet 成長前技
UnSet 成長前速さ
UnSet 成長前幸運
UnSet 成長前守備
UnSet 成長前魔防
UnSet 成長前ＨＰ
UnSet 成長前クラス
UnSet 成長前グラフィック
UnSet 成長前武器クラス
UnSet 成長前レベル
UnSet 力上昇値
UnSet 魔力上昇値
UnSet 技上昇値
UnSet 速さ上昇値
UnSet 幸運上昇値
UnSet 守備上昇値
UnSet 魔防上昇値
UnSet ＨＰ上昇値
Return


クラスチェンジ演出:
//クラスチェンジの演出です。FEクラスチェンジからのみ呼び出されます
Local target = Args(1)  //メインパイロット名または愛称、ユニット名またはユニットＩＤ（省略可）
If target = "" Then
    Set target 対象パイロット
EndIf

Set target IIf(IsDefined(target, ユニット), PilotID(target), PilotID(UnitID(target)))

//ウィンドウ画像
Local WINDOW_BACKGROUND_IMAGE = ウィンドウ画像
Local CLASS_CHANGE_WINDOW_BACKGROUND_IMAGE = ＣＣウィンドウ画像
//ウィンドウ共通設定
Local WINDOW_FRAME_WIDTH = 2
//ウィンドウ設定
Local NAME_WINDOW_DX = 40
Local NAME_WINDOW_DY = 40
Local NAME_WINDOW_DW = 195
Local NAME_WINDOW_DH = 130
Local FACE_WINDOW_DX = 155
Local FACE_WINDOW_DY = 50
Local FACE_WINDOW_DW = 68
Local FACE_WINDOW_DH = 68
Local FACE_WINDOW_FRAME_WIDTH = 2
Local WINDOW_DX = 40
Local WINDOW_DY = 185
Local WINDOW_DW = 195
Local WINDOW_DH = 190
//インフォテキスト設定
Local INFO_FONT_COLOR = #FFFFFF
Local INFO_FONT_FRAME_COLOR = #000000
Local INFO_FONT_SIZE = 10pt
Local INFO_FONT_FRAME_WIDTH = 2
Local INFO_TEXT_NAME = "NAME"
Local INFO_TEXT_LV = "Lv"
Local INFO_TEXT_CLASS = "CLASS"
Local INFO_TEXT_STATUS = "STATUS"
Local INFO_TEXT_WEAPON = "WEAPON"
Local INFO_NAME_X = 46
Local INFO_NAME_Y = 46
Local INFO_LV_X = 46
Local INFO_LV_Y = 80
Local INFO_CLASS_X = 46
Local INFO_CLASS_Y = 114
Local INFO_STATUS_X = 46
Local INFO_STATUS_Y = 191
Local INFO_WEAPON_X = 95
Local INFO_WEAPON_Y = 114

//表示情報
Local NAME_X = 151  //右側の座標
Local NAME_Y = 62
Local CLASS_X = 46
Local CLASS_Y = 130
Local LV_X = 151 //右側の座標
Local LV_Y = 96
Local STATUS_NAME_X = 50
Local STATUS_NAME_Y = 214
Local STATUS_HEIGHT = 40
Local STATUS_WIDTH = 88
Local STATUS_X = 130 //右側の座標
Local STATUS_Y = 214
Local WEAPON_X = 95
Local WEAPON_Y = 130
Local CLASS_LARGE_X = 325
Local CLASS_LARGE_Y = 245
Local SHADOW_X = 357
Local SHADOW_Y = 309
Local SHADOW_R = 48
Local SHADOW_RATIO = 0.5
Local SHADOW_COLOR = #333333

//テキスト情報
Local FONT_SIZE = 12pt
Local FONT_COLOR = #FFFFFF
Local FONT_FRAME_COLOR = #000000
Local FONT_FRAME_WIDTH = 1

//変化前
//ウィンドウ描画
Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE NAME_WINDOW_DX NAME_WINDOW_DY NAME_WINDOW_DW NAME_WINDOW_DH WINDOW_FRAME_WIDTH
Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE FACE_WINDOW_DX FACE_WINDOW_DY FACE_WINDOW_DW FACE_WINDOW_DH FACE_WINDOW_FRAME_WIDTH

//インフォテキスト描画
Call ｋａｔ縁取り文字描画 INFO_NAME_X INFO_NAME_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_NAME
Call ｋａｔ縁取り文字描画 INFO_LV_X INFO_LV_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_LV
Call ｋａｔ縁取り文字描画 INFO_CLASS_X INFO_CLASS_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_CLASS
Call ｋａｔ縁取り文字描画 INFO_WEAPON_X INFO_WEAPON_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_WEAPON

//変化前ユニット情報描画
If Info(パイロット, target, グラフィック) != "-.bmp" Then
    PaintPicture ("Pilot\" & Info(パイロット, target, グラフィック)) (FACE_WINDOW_DX + FACE_WINDOW_FRAME_WIDTH) (FACE_WINDOW_DY + FACE_WINDOW_FRAME_WIDTH) 64 64
EndIf
Font FONT_SIZE ゴシック
Call ｋａｔ縁取り文字描画 (NAME_X - TextWidth(Info(パイロット, target, 愛称))) NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Info(パイロット, target, 愛称) Regular
Font FONT_SIZE ゴシック Regular
Call ｋａｔ縁取り文字描画 (LV_X - TextWidth(Wide(成長前レベル))) LV_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前レベル) Regular
If 成長前グラフィック != "-.bmp" Then
    PaintPicture ("Unit\" & 成長前グラフィック) CLASS_X CLASS_Y 透過 #FFFFFF
    FillStyle 塗りつぶし
    FillColor SHADOW_COLOR
    Oval SHADOW_X SHADOW_Y SHADOW_R SHADOW_RATIO SHADOW_COLOR
    PaintPicture ("Unit\" & 成長前グラフィック) CLASS_LARGE_X CLASS_LARGE_Y 64 64 透過 #FFFFFF
EndIf
If 成長前武器クラス != "" Then
    Call ｋａｔ縁取り文字描画 WEAPON_X WEAPON_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR 成長前武器クラス Regular
EndIf

Font FONT_SIZE ゴシック Regular
Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE WINDOW_DX WINDOW_DY WINDOW_DW WINDOW_DH WINDOW_FRAME_WIDTH
Call ｋａｔ縁取り文字描画 INFO_STATUS_X INFO_STATUS_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_STATUS Bold
//ステータス名描画
Call ｋａｔ縁取り文字描画 STATUS_NAME_X STATUS_NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "力" Bold
Call ｋａｔ縁取り文字描画 STATUS_NAME_X (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "技" Bold
Call ｋａｔ縁取り文字描画 STATUS_NAME_X (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "速さ" Bold
Call ｋａｔ縁取り文字描画 STATUS_NAME_X (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "幸運" Bold
Call ｋａｔ縁取り文字描画 (STATUS_NAME_X + STATUS_WIDTH) STATUS_NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "魔力" Bold
Call ｋａｔ縁取り文字描画 (STATUS_NAME_X + STATUS_WIDTH) (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "守備" Bold
Call ｋａｔ縁取り文字描画 (STATUS_NAME_X + STATUS_WIDTH) (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "魔防" Bold
Call ｋａｔ縁取り文字描画 (STATUS_NAME_X + STATUS_WIDTH) (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "ＨＰ" Bold
//変化前ステータス描画
Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(成長前力))) STATUS_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前力) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(成長前技))) (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前技) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(成長前速さ))) (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前速さ) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(成長前幸運))) (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前幸運) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(成長前魔力))) STATUS_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前魔力) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(成長前守備))) (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前守備) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(成長前魔防))) (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前魔防) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(成長前ＨＰ))) (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前ＨＰ) Regular 通常

StopBGM
FadeIn 40
PlayMIDI class_change.mp3
ｋａｔトースト描画 成長前クラス #FF6600
Wait 30

//変化後
ClearPicture
//ウィンドウ描画
Call ｋａｔウィンドウ描画 CLASS_CHANGE_WINDOW_BACKGROUND_IMAGE NAME_WINDOW_DX NAME_WINDOW_DY NAME_WINDOW_DW NAME_WINDOW_DH WINDOW_FRAME_WIDTH "フィルタ #FF0000 50%"
Call ｋａｔウィンドウ描画 CLASS_CHANGE_WINDOW_BACKGROUND_IMAGE FACE_WINDOW_DX FACE_WINDOW_DY FACE_WINDOW_DW FACE_WINDOW_DH FACE_WINDOW_FRAME_WIDTH "フィルタ #FF0000 50%"

//インフォテキスト描画
Call ｋａｔ縁取り文字描画 INFO_NAME_X INFO_NAME_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_NAME 保持
Call ｋａｔ縁取り文字描画 INFO_LV_X INFO_LV_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_LV 保持
Call ｋａｔ縁取り文字描画 INFO_CLASS_X INFO_CLASS_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_CLASS 保持
Call ｋａｔ縁取り文字描画 INFO_WEAPON_X INFO_WEAPON_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_WEAPON 保持

//変化後ユニット情報描画
If Info(パイロット, target, グラフィック) != "-.bmp" Then
    PaintPicture ("Pilot\" & Info(パイロット, target, グラフィック)) (FACE_WINDOW_DX + FACE_WINDOW_FRAME_WIDTH) (FACE_WINDOW_DY + FACE_WINDOW_FRAME_WIDTH) 64 64
EndIf
Font FONT_SIZE ゴシック
Call ｋａｔ縁取り文字描画 (NAME_X - TextWidth(Info(パイロット, target, 愛称))) NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Info(パイロット, target, 愛称) Regular
Font FONT_SIZE ゴシック Regular
ClearPicture (LV_X - TextWidth(Wide(1000))) LV_Y LV_X (LV_Y + TextHeight(1))
Call ｋａｔ縁取り文字描画 (LV_X - TextWidth(Wide(Info(パイロット, target, レベル)))) LV_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(パイロット, target, レベル)) Regular 保持
If Info(ユニット, Unit(target), グラフィック) != "-.bmp" Then
    PaintPicture ("Unit\" & Info(ユニット, UnitID(target), グラフィック)) CLASS_X CLASS_Y 透過 #FFFFFF
    FillStyle 塗りつぶし
    FillColor SHADOW_COLOR
    Oval SHADOW_X SHADOW_Y SHADOW_R SHADOW_RATIO SHADOW_COLOR
    PaintPicture ("Unit\" & Info(ユニット, UnitID(target), グラフィック)) CLASS_LARGE_X CLASS_LARGE_Y 64 64 透過 #FFFFFF
EndIf
If Info(ユニット, UnitID(target), 特殊能力所有, 武器クラス) Then
    Call ｋａｔ縁取り文字描画 WEAPON_X WEAPON_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Info(ユニット, UnitID(target), 特殊能力データ, 武器クラス) Regular
EndIf

Font FONT_SIZE ゴシック Regular
Call ｋａｔウィンドウ描画 CLASS_CHANGE_WINDOW_BACKGROUND_IMAGE WINDOW_DX WINDOW_DY WINDOW_DW WINDOW_DH WINDOW_FRAME_WIDTH
Call ｋａｔ縁取り文字描画 INFO_STATUS_X INFO_STATUS_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_STATUS Bold 保持
//ステータス名描画
Call ｋａｔ縁取り文字描画 STATUS_NAME_X STATUS_NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "力" Bold 保持
Call ｋａｔ縁取り文字描画 STATUS_NAME_X (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "技" Bold 保持
Call ｋａｔ縁取り文字描画 STATUS_NAME_X (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "速さ" Bold 保持
Call ｋａｔ縁取り文字描画 STATUS_NAME_X (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "幸運" Bold 保持
Call ｋａｔ縁取り文字描画 (STATUS_NAME_X + STATUS_WIDTH) STATUS_NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "魔力" Bold 保持
Call ｋａｔ縁取り文字描画 (STATUS_NAME_X + STATUS_WIDTH) (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "守備" Bold 保持
Call ｋａｔ縁取り文字描画 (STATUS_NAME_X + STATUS_WIDTH) (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "魔防" Bold 保持
Call ｋａｔ縁取り文字描画 (STATUS_NAME_X + STATUS_WIDTH) (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "ＨＰ" Bold 保持
//変化後ステータス描画
Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(成長前力))) STATUS_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前力) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(成長前技))) (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前技) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(成長前速さ))) (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前速さ) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(成長前幸運))) (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前幸運) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(成長前魔力))) STATUS_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前魔力) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(成長前守備))) (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前守備) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(成長前魔防))) (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前魔防) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(成長前ＨＰ))) (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前ＨＰ) Regular 通常

WhiteIn 100
Wait 20
ｋａｔトースト描画 Unit(target) #FF0000

//上昇ステータス描画
If 0 < 力上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "力"
EndIf
If 0 < 技上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "技"
EndIf
If 0 < 速さ上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "速さ"
EndIf
If 0 < 幸運上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "幸運"
EndIf
If 0 < 魔力上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "魔力"
EndIf
If 0 < 守備上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "守備"
EndIf
If 0 < 魔防上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "魔防"
EndIf
If 0 < ＨＰ上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "ＨＰ"
EndIf

Wait Click
StartBGM ステージＢＧＭ
KeepBGM

Redraw
Return


FE攻撃実行確認:
Ｐ−Ｄｅ＝Ｄ攻撃実行確認:
//攻撃の実行をプレイヤーに確認します。戦闘の情報を表示します。
//ウィンドウ画像
Local WINDOW_BACKGROUND_IMAGE = ウィンドウ画像
//ウィンドウ共通設定
Local WINDOW_FRAME_WIDTH = 2
//ウィンドウ設定
Local WINDOW_DX = 40
Local WINDOW_DY = 40
Local WINDOW_DW = 195
Local WINDOW_DH = 260

//表示情報
Local TARGET_CLASS_X = 46
Local TARGET_CLASS_Y = 50
Local ENEMY_CLASS_X = 197
Local ENEMY_CLASS_Y = 94
Local TARGET_NAME_X = 78
Local TARGET_NAME_Y = 62
Local ENEMY_NAME_X = 197 //右側の座標
Local ENEMY_NAME_Y = 106
Local TARGET_WEAPON_X = 78
Local TARGET_WEAPON_Y = 82
Local ENEMY_WEAPON_X = 197
Local ENEMY_WEAPON_Y = 126
Local TARGET_DATA_X = 90 //右側の座標
Local ENEMY_DATA_X = 205 //右側の座標
Local DATA_Y = 151
Local DATA_H = 40
Local DATA_FRAME_WIDTH = 1
Local TARGET_WEAPON_UP_X = 78 //右側の座標
Local TARGET_WEAPON_UP_Y = 82
Local ENEMY_WEAPON_UP_X = 197
Local ENEMY_WEAPON_UP_Y = 126
Local WEAPON_UP_COLOR = #FF0000
Local WEAPON_DOWN_COLOR = #0000FF
Local TARGET_REATTACK_X = 90
Local ENEMY_REATTACK_X = 205
Local REATTACK_Y = 197

//インフォテキスト情報
Local INFO_FONT_COLOR = #FFFFFF
Local INFO_FONT_FRAME_COLOR = #000000
Local INFO_FONT_SIZE = 10pt
Local INFO_FONT_FRAME_WIDTH = 1
Local INFO_TEXT_HP = "HP"
Local INFO_TEXT_DAMAGE = "DAMAGE"
Local INFO_TEXT_HIT = "HIT"
Local INFO_TEXT_CRITICAL = "CRITICAL"
Local INFO_WEAPON_UP = "↑"
Local INFO_WEAPON_DOWN = "↓"
Local INFO_TEXT_REATTACK = "x2"
Local INFO_X = 136 //中央の座標
Local INFO_Y = 154
Local INFO_H = 40

//テキスト情報
Local FONT_SIZE = 12pt
Local FONT_COLOR = #FFFFFF
Local FONT_FRAME_COLOR = #000000
Local FONT_FRAME_WIDTH = 1

//相手ユニット装備情報取得
Local enemyWeaponName = Replace(Info(パイロット, 相手パイロット, 特殊能力名称, 装備中武器名), "装備", "")
Local enemyWeapon = FE装備中武器番号取得(相手ユニットＩＤ)
Call Ｐ−Ｄｅ＝Ｄ武器相性補正値取得 対象ユニットＩＤ 相手ユニットＩＤ 対象ユニット使用武器番号 enemyWeapon

//対象情報
Local targetName = Info(パイロット, 対象パイロット, 愛称)
Local targetHP = HP(対象ユニットＩＤ)
Local targetDamage = Ｐ−Ｄｅ＝Ｄダメージ取得(対象ユニットＩＤ, 相手ユニットＩＤ, 対象ユニット使用武器番号, "クリティカル無視")
Local accuracyRate = Ｐ−Ｄｅ＝Ｄ命中率取得(対象ユニットＩＤ, 対象ユニット使用武器番号)
Local evadeRate = Ｐ−Ｄｅ＝Ｄ回避率取得(相手ユニットＩＤ, enemyWeapon, 対象ユニットＩＤ, 対象ユニット使用武器番号)
Local targetAccuracyRate = IIf(Info(ユニット, 相手ユニットＩＤ, 特殊能力所有, "地形ユニット") = 0, Int(Ｐ−Ｄｅ＝Ｄ最終命中率取得(accuracyRate, evadeRate)), 100)
Local criticalRate = Ｐ−Ｄｅ＝Ｄ必殺率取得(対象ユニットＩＤ, 対象ユニット使用武器番号)
Local criticalEvadeRate = Ｐ−Ｄｅ＝Ｄ必殺回避率取得(相手ユニットＩＤ)
Local targetCritical = Int(Ｐ−Ｄｅ＝Ｄ最終必殺率取得(criticalRate, criticalEvadeRate))

Call Ｐ−Ｄｅ＝Ｄ武器相性補正値取得 相手ユニットＩＤ 対象ユニットＩＤ enemyWeapon 対象ユニット使用武器番号
//相手情報
Local enemyName = Info(パイロット, 相手パイロット, 愛称)
Local enemyHP = HP(相手ユニットＩＤ)
//武器の射程内に対象がいなければ反撃なし
Local weaponMinRange = Info(ユニット, 相手ユニットＩＤ, 武器, enemyWeapon, 最小射程)
Local weaponMaxRange = Info(ユニット, 相手ユニットＩＤ, 武器, enemyWeapon, 最大射程)
Local range = Ｐ−Ｄｅ＝Ｄ距離計算(対象ユニットＩＤ, 相手ユニットＩＤ)
If ((range < weaponMinRange) Or (weaponMaxRange < range)) != 1 And Not Info(ユニット, 対象ユニットＩＤ, 武器, 対象ユニット使用武器番号, 属性所有, 杖) And Not Condition(相手ユニットＩＤ, 睡眠) Then
    Local enemyDamage = Ｐ−Ｄｅ＝Ｄダメージ取得(相手ユニットＩＤ, 対象ユニットＩＤ, enemyWeapon, "クリティカル無視")
    UnSet accuracyRate
    Local accuracyRate = Ｐ−Ｄｅ＝Ｄ命中率取得(相手ユニットＩＤ, enemyWeapon)
    UnSet evadeRate
    Local evadeRate = Ｐ−Ｄｅ＝Ｄ回避率取得(対象ユニットＩＤ, 対象ユニット使用武器番号)
    Local enemyAccuracyRate = IIf(Info(ユニット, 対象ユニットＩＤ, 特殊能力所有, "地形ユニット") = 0, Int(Ｐ−Ｄｅ＝Ｄ最終命中率取得(accuracyRate, evadeRate)), 100)
    UnSet criticalRate
    Local criticalRate = Ｐ−Ｄｅ＝Ｄ必殺率取得(相手ユニットＩＤ, enemyWeapon)
    UnSet criticalEvadeRate
    Local criticalEvadeRate = Ｐ−Ｄｅ＝Ｄ必殺回避率取得(対象ユニットＩＤ)
    Local enemyCritical = Int(Ｐ−Ｄｅ＝Ｄ最終必殺率取得(criticalRate, criticalEvadeRate))
Else
    Local enemyDamage = "-"
    Local enemyAccuracyRate = "-"
    Local enemyCritical = "-"
EndIf

Local targetSpeed = Ｐ−Ｄｅ＝Ｄ攻撃速度取得(対象ユニットＩＤ, 対象ユニット使用武器番号)
Local enemySpeed = Ｐ−Ｄｅ＝Ｄ攻撃速度取得(相手ユニットＩＤ, enemyWeapon)

//ウィンドウ描画
Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE WINDOW_DX WINDOW_DY WINDOW_DW WINDOW_DH WINDOW_FRAME_WIDTH

//インフォテキスト描画
Font INFO_FONT_SIZE ゴシック
Call ｋａｔ縁取り文字描画 (INFO_X - TextWidth(INFO_TEXT_HP) / 2) INFO_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_HP 保持
Font INFO_FONT_SIZE ゴシック
Call ｋａｔ縁取り文字描画 (INFO_X - TextWidth(INFO_TEXT_DAMAGE) / 2) (INFO_Y + INFO_H) INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_DAMAGE 保持
Font INFO_FONT_SIZE ゴシック
Call ｋａｔ縁取り文字描画 (INFO_X - TextWidth(INFO_TEXT_HIT) / 2) (INFO_Y + INFO_H * 2) INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_HIT 保持
Font INFO_FONT_SIZE ゴシック
Call ｋａｔ縁取り文字描画 (INFO_X - TextWidth(INFO_TEXT_CRITICAL) / 2) (INFO_Y + INFO_H * 3) INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_CRITICAL 保持

//情報描画
If Info(ユニット, 対象ユニットＩＤ, グラフィック) != "-.bmp" Then
    PaintPicture ("Unit\" & Info(ユニット, 対象ユニットＩＤ, グラフィック)) TARGET_CLASS_X TARGET_CLASS_Y 透過 #FFFFFF 保持
EndIf
If Info(ユニット, 相手ユニットＩＤ, グラフィック) != "-.bmp" Then
    PaintPicture ("Unit\" & Info(ユニット, 相手ユニットＩＤ, グラフィック)) ENEMY_CLASS_X ENEMY_CLASS_Y 透過 #FFFFFF 保持
EndIf
Call ｋａｔ縁取り文字描画 TARGET_NAME_X TARGET_NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Info(パイロット, 対象パイロット, 愛称) Regular 保持
Call ｋａｔ縁取り文字描画 TARGET_WEAPON_X TARGET_WEAPON_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR 対象ユニット使用武器 Regular 保持
Font FONT_SIZE ゴシック
Call ｋａｔ縁取り文字描画 (ENEMY_NAME_X - TextWidth(Info(パイロット, 相手パイロット, 愛称))) ENEMY_NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Info(パイロット, 相手パイロット, 愛称) Regular 保持
Font FONT_SIZE ゴシック
Call ｋａｔ縁取り文字描画 (ENEMY_WEAPON_X - TextWidth(enemyWeaponName)) ENEMY_WEAPON_Y FONT_SIZE FONT_COLOR ゴシック DATA_FRAME_WIDTH FONT_FRAME_COLOR enemyWeaponName Regular 保持
Call ｋａｔ縁取り文字描画 (TARGET_DATA_X - TextWidth(Wide(targetHP))) DATA_Y FONT_SIZE FONT_COLOR ゴシック DATA_FRAME_WIDTH FONT_FRAME_COLOR Wide(targetHP) Italic 通常
Call ｋａｔ縁取り文字描画 (TARGET_DATA_X - TextWidth(Wide(targetDamage))) (DATA_Y + DATA_H) FONT_SIZE FONT_COLOR ゴシック DATA_FRAME_WIDTH FONT_FRAME_COLOR Wide(targetDamage) Italic 通常
Call ｋａｔ縁取り文字描画 (TARGET_DATA_X - TextWidth(Wide(targetAccuracyRate))) (DATA_Y + DATA_H * 2) FONT_SIZE FONT_COLOR ゴシック DATA_FRAME_WIDTH FONT_FRAME_COLOR Wide(targetAccuracyRate) Italic 通常
Call ｋａｔ縁取り文字描画 (TARGET_DATA_X - TextWidth(Wide(targetCritical))) (DATA_Y + DATA_H * 3) FONT_SIZE FONT_COLOR ゴシック DATA_FRAME_WIDTH FONT_FRAME_COLOR Wide(targetCritical) Italic 通常
Call ｋａｔ縁取り文字描画 (ENEMY_DATA_X - TextWidth(Wide(enemyHP))) DATA_Y FONT_SIZE FONT_COLOR ゴシック DATA_FRAME_WIDTH FONT_FRAME_COLOR Wide(enemyHP) Italic 通常
Call ｋａｔ縁取り文字描画 (ENEMY_DATA_X - TextWidth(Wide(enemyDamage))) (DATA_Y + DATA_H) FONT_SIZE FONT_COLOR ゴシック DATA_FRAME_WIDTH FONT_FRAME_COLOR Wide(enemyDamage) Italic 通常
Call ｋａｔ縁取り文字描画 (ENEMY_DATA_X - TextWidth(Wide(enemyAccuracyRate))) (DATA_Y + DATA_H * 2) FONT_SIZE FONT_COLOR ゴシック DATA_FRAME_WIDTH FONT_FRAME_COLOR Wide(enemyAccuracyRate) Italic 通常
Call ｋａｔ縁取り文字描画 (ENEMY_DATA_X - TextWidth(Wide(enemyCritical))) (DATA_Y + DATA_H * 3) FONT_SIZE FONT_COLOR ゴシック DATA_FRAME_WIDTH FONT_FRAME_COLOR Wide(enemyCritical) Italic 通常

//相性情報描画
Call Ｐ−Ｄｅ＝Ｄ武器相性補正値取得 対象ユニットＩＤ 相手ユニットＩＤ 対象ユニット使用武器番号 enemyWeapon
If 0 < Ｐ−Ｄｅ＝Ｄ武器相性命中補正 Then
    //対象が有利
    Font INFO_FONT_SIZE ゴシック
    Call ｋａｔ縁取り文字描画 (TARGET_WEAPON_UP_X - TextWidth("↑")) TARGET_WEAPON_UP_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH WEAPON_UP_COLOR INFO_WEAPON_UP 通常
    Call ｋａｔ縁取り文字描画 ENEMY_WEAPON_UP_X ENEMY_WEAPON_UP_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH WEAPON_DOWN_COLOR INFO_WEAPON_DOWN 通常
ElseIf Ｐ−Ｄｅ＝Ｄ武器相性命中補正 < 0 Then
    //相手が有利
    Font INFO_FONT_SIZE ゴシック
    Call ｋａｔ縁取り文字描画 (TARGET_WEAPON_UP_X - TextWidth("↑")) TARGET_WEAPON_UP_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH WEAPON_DOWN_COLOR INFO_WEAPON_DOWN 通常
    Call ｋａｔ縁取り文字描画 ENEMY_WEAPON_UP_X ENEMY_WEAPON_UP_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH WEAPON_UP_COLOR INFO_WEAPON_UP 通常
EndIf

//再攻撃情報描画
If Not Info(ユニット, 対象ユニットＩＤ, 武器, 対象ユニット使用武器番号, 属性所有, "杖") Then
	If Not Info(ユニット, 対象ユニットＩＤ, 特殊能力所有, "地形ユニット") Then
		If Not Info(ユニット, 相手ユニットＩＤ, 特殊能力所有, "地形ユニット") Then
			If (targetSpeed - enemySpeed >= 4) Then
			    Call ｋａｔ縁取り文字描画 TARGET_REATTACK_X REATTACK_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH WEAPON_UP_COLOR INFO_TEXT_REATTACK 通常
			ElseIf (enemySpeed - targetSpeed >= 4) And (enemyDamage != "-") Then
			    Call ｋａｔ縁取り文字描画 ENEMY_REATTACK_X REATTACK_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH WEAPON_UP_COLOR INFO_TEXT_REATTACK 通常
			EndIf
		EndIf
	EndIf
EndIf
Refresh

Ask "攻撃しますか？" キャンセル可
はい
いいえ
End

Redraw
Return IIf(選択 = 1, 1, 0)


FE戦闘開始:
Ｐ−Ｄｅ＝Ｄ戦闘開始:
//戦闘処理を行います。
Call FE戦闘開始初期化

If Not Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性所有, "杖") Then
	Call Ｐ−Ｄｅ＝Ｄ武器持ち替え attackerUnitID attackerWeapon

	//先手判別
	If Info(ユニット, defenderUnitID, 武器, defenderWeapon, 属性所有, "先") Then
	    If Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性所有, "見") = 0 Then
	        Call Ｐ−Ｄｅ＝Ｄ攻守入れ替え
	    EndIf
	ElseIf (Info(パイロット, PilotID(defenderUnitID), 特殊能力所有, "先制")) And (Info(パイロット, PilotID(attackerUnitID), ステータス速さ) < Info(パイロット, PilotID(defenderUnitID), ステータス速さ)) Then
	    If Info(パイロット, PilotID(attackerUnitID), 特殊能力所有, "見切り") = 0 Then
	        Call Ｐ−Ｄｅ＝Ｄ攻守入れ替え
	    EndIf
	EndIf

	//先攻行動
	Call FE攻撃

	//防御側が破壊されていなければ反撃
	If (Status(defenderUnitID) != 破壊) And (破壊キャンセル状態[defenderUnitID] != 1) Then
	    Call Ｐ−Ｄｅ＝Ｄ攻守入れ替え
	    //後攻行動
	    Call FE攻撃
	EndIf

	//攻撃側が破壊されておらず尚且つどちらかが再攻撃可能なら再攻撃
	If Not Info(ユニット, defenderUnitID, 特殊能力所有, "地形ユニット") Then
		If Not Info(ユニット, attackerUnitID, 特殊能力所有, "地形ユニット") Then
			If (Status(defenderUnitID) != 破壊) And (破壊キャンセル状態[defenderUnitID] != 1) Then
			    Call Ｐ−Ｄｅ＝Ｄ攻守入れ替え
			    If Call(Ｐ−Ｄｅ＝Ｄ再攻撃可能判定) Then
			        Call FE攻撃
			    EndIf
			            
			    Call Ｐ−Ｄｅ＝Ｄ攻守入れ替え
			    If Call(Ｐ−Ｄｅ＝Ｄ再攻撃可能判定) Then
			        Call FE攻撃
			    EndIf
			EndIf
		EndIf
	EndIf

	//経験値の取得
	If (Party(defenderUnitID) = "味方") Then
	    Call Ｐ−Ｄｅ＝Ｄ攻守入れ替え
	EndIf
	If (Party(attackerUnitID) = "味方") And (Status(attackerUnitID) != 破壊) And (破壊キャンセル状態[attackerUnitID] != 1) Then
		If Not Info(ユニット, defenderUnitID, 特殊能力所有, "地形ユニット") Then
		    Call Ｐ−Ｄｅ＝Ｄ経験値加算 PilotID(attackerUnitID) Ｐ−Ｄｅ＝Ｄ獲得経験値取得(attackerUnitID, defenderUnitID)
		    Redraw
		    
		    //武器破損
		    Call FE武器破損チェック attackerUnitID attackerWeapon
		    Call FE武器破損チェック defenderUnitID defenderWeapon
		EndIf
	EndIf
	Call アイテムドロップ
	Call 破壊イベント実行
	Call 全滅イベント実行
	Call 損傷率イベント実行
	Call 攻撃後イベント実行
Else
	#杖使用時
    Local 元対象パイロット = 対象パイロット
	Local 元相手パイロット = 相手パイロット

    Local damage = Ｐ−Ｄｅ＝Ｄ一括戦闘計算(attackerUnitID, defenderUnitID, attackerWeapon, defenderWeapon)
    Local attackerWeaponName = Info(ユニット, attackerUnitID, 武器, attackerWeapon)
    Local attackerWeaponAnimeOption
    If Info(ユニット, attackerUnitID, 特殊能力所有, (attackerWeaponName & "アニメオプション")) Then
        Array attackerWeaponAnimeOption Info(ユニット, attackerUnitID, 特殊能力解説, (attackerWeaponName & "アニメオプション")) リスト
    EndIf
	If Info(ユニット, attackerUnitID, 特殊能力所有, (attackerWeaponName & "アニメ")) = 1 Then
        Set attackerWeaponName Info(ユニット, attackerUnitID, 特殊能力解説, (attackerWeaponName & "アニメ"))
    EndIf
    If Not damage = 回避 Then
        Call AttackDemo attackerUnitID attackerWeaponName defenderUnitID 命中 attackerWeaponAnimeOption[1] attackerWeaponAnimeOption[2] attackerWeaponAnimeOption[3] attackerWeaponAnimeOption[4] attackerWeaponAnimeOption[5] attackerWeaponAnimeOption[6] attackerWeaponAnimeOption[7] attackerWeaponAnimeOption[8]
        Select 元対象パイロット
        SelectTarget 元相手パイロット
        
        #状態異常
        If Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性所有, "黙") Then
        	SetStatus defenderUnitID 沈黙 IIf(Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "黙") != 0, Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "黙"), 3)
        EndIf
        If Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性所有, "乱") Then
        	SetStatus defenderUnitID 混乱 IIf(Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "乱") != 0, Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "乱"), 3)
        EndIf
        If Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性所有, "眠") Then
        	SetStatus defenderUnitID 睡眠 IIf(Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "眠") != 0, Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "眠"), 3)
        EndIf
    Else
        Call AttackDemo attackerUnitID attackerWeaponName defenderUnitID 回避 attackerWeaponAnimeOption[1] attackerWeaponAnimeOption[2] attackerWeaponAnimeOption[3] attackerWeaponAnimeOption[4] attackerWeaponAnimeOption[5] attackerWeaponAnimeOption[6] attackerWeaponAnimeOption[7] attackerWeaponAnimeOption[8]
        Select 元対象パイロット
        SelectTarget 元相手パイロット
    EndIf
    
	If Party(attackerUnitID) = 味方 Then
        Call Ｐ−Ｄｅ＝Ｄ経験値加算 PilotID(attackerUnitID) Ｐ−Ｄｅ＝Ｄ獲得経験値取得(attackerUnitID, defenderUnitID, "杖", Info(ユニット, attackerUnitID, 特殊能力レベル, (Info(ユニット, attackerUnitID, 武器, attackerWeapon) & "経験値")))
    EndIf
	Redraw

    #弾数減
    If (Info(ユニット, attackerUnitID, 武器, attackerWeapon, 最大弾数) != 0) Then
        If ((Info(ユニット, attackerUnitID, 武器, attackerWeapon, 弾数) - 1) <= 0) Then
            //アイテム破損
            If アイテム破損無効フラグ = "" Then
                FERemoveItem attackerUnitID Info(ユニット, attackerUnitID, 武器, attackerWeapon) 1
            EndIf
        Else
            SetBullet attackerUnitID attackerWeapon (Info(ユニット, attackerUnitID, 武器, attackerWeapon, 弾数) - 1)
        EndIf
    EndIf
EndIf

//再移動処理
Local 再移動判定対象
If (Party(defenderUnitID) = フェイズ) Then
    Set 再移動判定対象 PilotID(defenderUnitID)
Else
    Set 再移動判定対象 PilotID(attackerUnitID)
EndIf
If (Status(再移動判定対象) = 出撃) And (Action(再移動判定対象) != 0) Then
    Call 再移動判定 再移動判定対象
EndIf
UnSet 再移動判定対象

Call FE戦闘開始終了処理
Return


FE戦闘開始初期化:
Set attackerUnitID 対象ユニットＩＤ
Set defenderUnitID 相手ユニットＩＤ
Set attackerWeapon 対象ユニット使用武器番号
Set defenderWeapon IIf(Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性所有, "杖") Or Condition(相手ユニットＩＤ, 睡眠), "", 装備中武器番号取得(相手ユニットＩＤ))
UnSet 破壊キャンセル状態
Return


FE戦闘開始終了処理:
UnSet attackerUnitID
UnSet defenderUnitID
UnSet attackerWeapon
UnSet defenderWeapon
UnSet 月光発動
UnSet 太陽発動
UnSet 怒り発動
UnSet 連続発動
Call FEトライアングルアタック終了処理
UnSet FEトライアングルアタック攻撃済
Return


//攻撃を行います
FE攻撃:
Local 攻撃回数 = 0
Do
    Incr 攻撃回数
    Call 連続発動判定 PilotID(attackerUnitID) attackerWeapon PilotID(defenderUnitID) defenderWeapon
    Call 連続発動演出
    Call Ｐ−Ｄｅ＝Ｄ攻撃
    
    If Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性所有, "連") = 0 Then
        Break
    EndIf
    If (Status(defenderUnitID) = 破壊) Or (破壊キャンセル状態[defenderUnitID] = 1) Then
        Break
    EndIf
Loop While (攻撃回数 < Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "連"))
Return


FE武器破損チェック:
If アイテム破損無効フラグ = "" Then
    Local target = Args(1)      //メインパイロット名または愛称、ユニット名またはユニットＩＤ(省略可)
    Local weaponNo = Args(2)    //武器番号
    
    If Args(1) != "" Then
        If Args(2) = "" Then
            //引数が一つの時
            Set target 対象ユニットＩＤ
            Set weaponNo Args(1)
        EndIf
        Set target IIf(IsDefined(target, パイロット), UnitID(target), UnitID(PilotID(target)))

        If (Info(ユニット, target, 武器, weaponNo, 最大弾数) != 0) Then
            If (Info(ユニット, target, 武器, weaponNo, 弾数) <= 0 ) Then
                If Party(target) = "味方" Or Party(target) = "ＮＰＣ" Then
                    Call Ｐ−Ｄｅ＝Ｄ武器破損演出 target weaponNo
                EndIf
                RemoveItem target 装備中アイテム番号取得(target)
                Call 代替武器装備 target
            EndIf
        EndIf
    Else
        Talk
        サブルーチン「FE武器破損チェック」の引数の数が違います。
        End
    EndIf
EndIf
Return


ユニットコマンド "" 味方 Call(杖経験値取得):
Exit

杖経験値取得:
UnSet 杖経験値
Local i
For i = 1 To CountItem()
	If Info(Item(対象パイロット, i), アイテムクラス) = "杖" Then
    	Set 杖経験値[Item(対象パイロット, i)] Info(ユニット, 対象ユニットＩＤ, 特殊能力レベル, Item(対象パイロット, i) & 経験値)
    EndIf
Next
Return 0

*使用後 全 対象ユニット使用アビリティ:
If Info(対象ユニット使用アビリティ, アイテムクラス) = "杖" Then
	Call Ｐ−Ｄｅ＝Ｄ経験値加算 対象パイロット Ｐ−Ｄｅ＝Ｄ獲得経験値取得(対象ユニットＩＤ, 相手ユニットＩＤ, "杖", 杖経験値[対象ユニット使用アビリティ])
EndIf
Exit


//スキルの発動演出です。
スキル発動演出:
//攻撃がなかった場合は終了
Switch attackerWeapon
Case "" 回避 防御
    Return
EndSw

//武器の射程内に相手がいなければ失敗
Local weaponMinRange = Info(ユニット, attackerUnitID, 武器, attackerWeapon, 最小射程)
Local weaponMaxRange = Info(ユニット, attackerUnitID, 武器, attackerWeapon, 最大射程)
Local range = Ｐ−Ｄｅ＝Ｄ距離計算(attackerUnitID, defenderUnitID)
If (range < weaponMinRange) Or (weaponMaxRange < range) Then
    Return
EndIf

If 月光発動[PilotID(attackerUnitID)] = 1 Then
    PlayEffect "オーラ上昇" attackerUnitID "ブルー" special_attack.wav
EndIf
If 太陽発動[PilotID(attackerUnitID)] = 1 Then
    PlayEffect "オーラ上昇" attackerUnitID "オレンジ" special_attack.wav
EndIf
Return

//連続の発動演出です。
連続発動演出:
//攻撃がなかった場合は終了
Switch attackerWeapon
Case "" 回避 防御
    Return
EndSw

//武器の射程内に相手がいなければ失敗
Local weaponMinRange = Info(ユニット, attackerUnitID, 武器, attackerWeapon, 最小射程)
Local weaponMaxRange = Info(ユニット, attackerUnitID, 武器, attackerWeapon, 最大射程)
Local range = Ｐ−Ｄｅ＝Ｄ距離計算(attackerUnitID, defenderUnitID)
If (range < weaponMinRange) Or (weaponMaxRange < range) Then
    Return
EndIf

If 連続発動[PilotID(attackerUnitID)] = 1 Then
    PlayEffect "オーラ上昇" attackerUnitID "グリーン" special_attack.wav
EndIf
Return


//再攻撃が可能かどうか確認します
Ｐ−Ｄｅ＝Ｄ再攻撃可能判定:
Local attackerSpeed = Ｐ−Ｄｅ＝Ｄ攻撃速度取得(attackerUnitID, attackerWeapon)
Local defenderSpeed = Ｐ−Ｄｅ＝Ｄ攻撃速度取得(defenderUnitID, defenderWeapon)
//（自分の攻撃速度）−（敵の攻撃速度）≧4
Return (attackerSpeed - defenderSpeed >= 4)


//イベント戦闘を行うためのコマンドです。
//FE版Attackコマンドとしてご利用下さい
//武器名に自動を指定した場合、装備中の武器で戦闘を行います
FEAttack:
If ArgNum = 4 Then
    Set attackerUnitID IIf(IsDefined(Args(1), ユニット), UnitID(PilotID(Args(1))), UnitID(Args(1)))
    Local attackerWeaponName = Args(2)
    Set defenderUnitID IIf(IsDefined(Args(3), ユニット), UnitID(PilotID(Args(3))), UnitID(Args(3)))
    Local defenderWeaponName = Args(4)
	
	Local 元対象パイロット = 対象パイロット
	Local 元相手パイロット = 相手パイロット
	Select attackerUnitID
	SelectTarget defenderUnitID
	
	Set attackerWeapon ""
	Set defenderWeapon ""
	//武器名→武器番号に変換
	Local i
	If Not attackerWeaponName = "自動" Then
	    For i = 1 To Info(ユニット, attackerUnitID, 武器数)
		    If Info(ユニット, attackerUnitID, 武器, i) = attackerWeaponName Then
			    Set attackerWeapon i
				Break
			EndIf
		Next
	Else
	    Set attackerWeapon FE装備中武器番号取得(attackerUnitID)
	EndIf
	
	Switch defenderWeaponName
	Case "防御" "回避" "無抵抗"
	    
	Case "自動"
	    Set defenderWeapon FE装備中武器番号取得(defenderUnitID)
	Case Else
	    For i = 1 To Info(ユニット, defenderUnitID, 武器数)
		    If Info(ユニット, defenderUnitID, 武器, i) = defenderWeaponName Then
			    Set defenderWeapon i
				Break
			EndIf
		Next
	EndSw
	
	Call FE攻撃実行 1
    If Not Status(defenderUnitID) = 破壊 And Not 破壊キャンセル状態[defenderUnitID] = 1 Then
    	Call FE攻守入れ替え
    	Call FE攻撃実行 1
    EndIf
	
	//終了処理
	UnSet attackerUnitID
	UnSet attackerWeapon
	UnSet defenderUnitID
	UnSet defenderWeapon
	If Not 元対象パイロット = "" Then
	    Select 元対象パイロット
	EndIf
	If Not 元相手パイロット = "" Then
    	SelectTarget 元相手パイロット
	EndIf
EndIf
Return


//攻撃を行います。
FE攻撃実行:
Ｐ−Ｄｅ＝Ｄ攻撃:
Local isEvent = Args(1) //イベント戦闘なら1

Local TRIANGLE_ATTACK_SE = "special_attack.wav"

Local 元対象パイロット = 対象パイロット
Local 元相手パイロット = 相手パイロット

Switch attackerWeapon
Case "" 回避 防御
	
Case Else
	//武器の射程内に相手がいるかチェック
	Local weaponMinRange = Info(ユニット, attackerUnitID, 武器, attackerWeapon, 最小射程)
	Local weaponMaxRange = Info(ユニット, attackerUnitID, 武器, attackerWeapon, 最大射程)
	Local range = Ｐ−Ｄｅ＝Ｄ距離計算(attackerUnitID, defenderUnitID)
	If (weaponMinRange <= range) And (range <= weaponMaxRange) Or isEvent Then
		Local damage attackerWeaponName attackerWeaponAnimeOption
        Local 攻撃回数 = 0
		Do
		    Incr 攻撃回数
		    
		    //武器回数が0以上かチェック
		    If (Info(ユニット, attackerUnitID, 武器, attackerWeapon, 最大弾数) = 0) Or (0 < Info(ユニット, attackerUnitID, 武器, attackerWeapon, 弾数)) Or isEvent Then
			    Call スキル発動判定 PilotID(attackerUnitID) attackerWeapon PilotID(defenderUnitID) defenderWeapon
			    Call スキル発動演出
			    Set damage Ｐ−Ｄｅ＝Ｄ一括戦闘計算(attackerUnitID, defenderUnitID, attackerWeapon, defenderWeapon)
			    Set attackerWeaponName Info(ユニット, attackerUnitID, 武器, attackerWeapon)
			    If Info(ユニット, attackerUnitID, 特殊能力所有, (attackerWeaponName & "アニメオプション")) Then
			        Array attackerWeaponAnimeOption Info(ユニット, attackerUnitID, 特殊能力解説, (attackerWeaponName & "アニメオプション")) リスト
			    EndIf
			    If Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性所有, 変) And FE攻撃種別[attackerUnitID] = "魔法" And Info(ユニット, attackerUnitID, 特殊能力所有, (attackerWeaponName & "アニメ変")) Then
			        Set attackerWeaponName Info(ユニット, attackerUnitID, 特殊能力解説, (attackerWeaponName & "アニメ変"))
			    ElseIf Info(ユニット, attackerUnitID, 特殊能力所有, (attackerWeaponName & "アニメ")) = 1 Then
			        Set attackerWeaponName Info(ユニット, attackerUnitID, 特殊能力解説, (attackerWeaponName & "アニメ"))
			    EndIf
			    If FEトライアングルアタック発動 = 1 And Not IsVarDefined(FEトライアングルアタック攻撃済) Then
			    	PlaySound TRIANGLE_ATTACK_SE
			        WhiteIn
			        Set FEトライアングルアタック攻撃済
			    EndIf
			    
			    If damage != "回避" Then
			        If (fＰ−Ｄｅ＝Ｄクリティカル = 1) Then
			            If Info(ユニット, attackerUnitID, 特殊能力所有, attackerWeaponName & "クリティカルアニメ") Then
			                Set attackerWeaponName Info(ユニット, attackerUnitID, 特殊能力解説, (attackerWeaponName & "クリティカルアニメ"))
			            EndIf
			        EndIf
			        Call AttackDemo attackerUnitID attackerWeaponName defenderUnitID 命中 attackerWeaponAnimeOption[1] attackerWeaponAnimeOption[2] attackerWeaponAnimeOption[3] attackerWeaponAnimeOption[4] attackerWeaponAnimeOption[5] attackerWeaponAnimeOption[6] attackerWeaponAnimeOption[7] attackerWeaponAnimeOption[8]
			        Select 元対象パイロット
			        SelectTarget 元相手パイロット
			        If damage = 0 Then
			            PlaySound nodamage.wav
			        EndIf
			        Call ｋａｔダメージ演出 defenderUnitID damage fＰ−Ｄｅ＝Ｄクリティカル
                    
                    #状態異常
                    If Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性所有, "黙") Then
                    	SetStatus defenderUnitID 沈黙 IIf(Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "黙") != 1, Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "黙"), 3)
                    EndIf
                    If Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性所有, "乱") Then
                    	SetStatus defenderUnitID 混乱 IIf(Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "乱") != 1, Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "乱"), 3)
                    EndIf
                    If Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性所有, "眠") Then
                    	SetStatus defenderUnitID 睡眠 IIf(Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "眠") != 1, Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性レベル, "眠"), 3)
                    EndIf
                    
			        //防御側破壊
			        If (HP(defenderUnitID) <= damage) Then
			            If 太陽発動[PilotID(attackerUnitID)] = 1 Then
			                Call ヒーリング HP(defenderUnitID) attackerUnitID
			            EndIf
			            If (Condition(defenderUnitID, 破壊キャンセル) != 1) Then
			                Destroy defenderUnitID
			            Else
			                HP(defenderUnitID) = 1
			                Set 破壊キャンセル状態[defenderUnitID]
			            EndIf
			        //防御側生存
			        Else
			            If 太陽発動[PilotID(attackerUnitID)] = 1 Then
			                Call ヒーリング damage attackerUnitID
			            EndIf
			            HP(defenderUnitID) = HP(defenderUnitID) - damage
			        EndIf
                    
			        If (Info(ユニット, attackerUnitID, 武器, attackerWeapon, 最大弾数) != 0) Then
			            If (0 < Info(ユニット, attackerUnitID, 武器, attackerWeapon, 弾数)) Then
			                Call 装備残更新 attackerUnitID attackerWeapon (Info(ユニット, attackerUnitID, 武器, attackerWeapon, 弾数) - 1)
			            EndIf
			        EndIf
			    Else
			        Call AttackDemo attackerUnitID attackerWeaponName defenderUnitID 回避 attackerWeaponAnimeOption[1] attackerWeaponAnimeOption[2] attackerWeaponAnimeOption[3] attackerWeaponAnimeOption[4] attackerWeaponAnimeOption[5] attackerWeaponAnimeOption[6] attackerWeaponAnimeOption[7] attackerWeaponAnimeOption[8]
			        Select 元対象パイロット
			        SelectTarget 元相手パイロット
			        If Info(ユニット, attackerUnitID, 武器, attackerWeapon, 属性所有) = "魔" Then
			            If (Info(ユニット, attackerUnitID, 武器, attackerWeapon, 最大弾数) != 0) Then
			                If (0 < Info(ユニット, attackerUnitID, 武器, attackerWeapon, 弾数)) Then
			                    Call 装備残更新 attackerUnitID attackerWeapon (Info(ユニット, attackerUnitID, 武器, attackerWeapon, 弾数) - 1)
			                EndIf
			            EndIf
			        EndIf
			    EndIf
			    
			    UnSet 月光発動
			    UnSet 太陽発動
			    UnSet 怒り発動
			    
			    If (Status(defenderUnitID) = 破壊) Or (破壊キャンセル状態[defenderUnitID] = 1) Then
			        Break
			    EndIf
			    If 連続発動[PilotID(attackerUnitID)] = 0 Then
			        Break
			    EndIf
		    EndIf
		Loop While (攻撃回数 < Skill(attackerUnitID, "連続"))
		UnSet 連続発動
	EndIf
EndSw
Return


//武器が破損した時の演出です。
Ｐ−Ｄｅ＝Ｄ武器破損演出:
    Local target = Args(1)
    Local weapon = Args(2)
    Set target IIf(IsDefined(Args(1), パイロット), UnitID(Args(1)), UnitID(PilotID(Args(1))))
    
    Redraw
    PlaySound weapon_break.wav
    Local itemImage
    Set itemImage ""
    If Info(ユニット, target, 特殊能力所有, Info(ユニット, target, 武器, weapon) & "画像") Then
        Set itemImage Info(ユニット, target, 特殊能力解説, Info(ユニット, target, 武器, weapon) & "画像")
    EndIf
    Call ワンポイントテロップ (Info(ユニット, target, 武器, weapon) & " は壊れてしまった") itemImage
Return


//ワンポイントの画像を付けたテロップを表示します。
ワンポイントテロップ:
Local messages = Args(1)
Local image = Args(2)

//ウィンドウ画像
Local WINDOW_BACKGROUND_IMAGE = ウィンドウ画像
//ウィンドウ共通設定
Local WINDOW_FRAME_WIDTH = 2
//ウィンドウ設定
Local WINDOW_DX = 240    //中央の座標
Local WINDOW_DY = 200
Local WINDOW_DH = 40

//テキスト情報
Local FONT_SIZE = 12pt
Local FONT_COLOR = #FFFFFF
Local FONT_FRAME_COLOR = #000000
Local FONT_FRAME_WIDTH = 1

//共通表示情報
Local ITEM_ICON_SIZE = 24

//表示情報
Local MESSAGE_DY = 200
Local ITEM_ICON_Y = 208

Font FONT_SIZE Regular
Local WINDOW_DW = (TextWidth(messages) + 90)
Local dx = (WINDOW_DX - WINDOW_DW / 2)
Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE dx WINDOW_DY WINDOW_DW WINDOW_DH WINDOW_FRAME_WIDTH
If image != "" Then
    PaintPicture image (dx + 10) ITEM_ICON_Y ITEM_ICON_SIZE ITEM_ICON_SIZE 透過 #FFFFFF
EndIf
Call ｋａｔ縁取り文字描画 (dx + 45) (WINDOW_DY + Int((WINDOW_DH - TextHeight("あ")) / 2)) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR messages Regular

Refresh
Wait Click
Redraw
Return


//経験値を加算します。100を超える毎にレベルアップします。
経験値加算:
Ｐ−Ｄｅ＝Ｄ経験値加算:
Local target = Args(1)
Local exp = Args(2)
Set target IIf(IsDefined(target, パイロット), PilotID(UnitID(target)), PilotID(target))

Local 最下級ユニット = "S"
Local 下級ユニット = "M"
Local 上級ユニット = "L"
Local クラスチェンジ無し上級ユニット = "LL"

UnSet レベル上限
Local レベル上限
Switch Info(ユニット, UnitID(target), サイズ)
Case 最下級ユニット
    Set レベル上限 レベル上限S
Case 下級ユニット
    Set レベル上限 レベル上限M
Case 上級ユニット
    Set レベル上限 レベル上限L
Case クラスチェンジ無し上級ユニット
    Set レベル上限 レベル上限LL
EndSw

Do While (100 <= (Info(パイロット, target, 累積経験値) + exp))
    If Level(target) < レベル上限 Then
        Call Ｐ−Ｄｅ＝Ｄ経験値演出 target (100 - (Info(パイロット, target, 累積経験値)))
        Call Ｐ−Ｄｅ＝Ｄレベルアップ target
        
        Incr exp ((100 - Info(パイロット, target, 累積経験値)) * -1) 
        ExpUp target (Info(パイロット, target, 累積経験値) * -1)
    Else
        ExpUp target (Info(パイロット, target, 累積経験値) * -1)
        Break
    EndIf
Loop
If Level(target) < レベル上限 Then
    Call Ｐ−Ｄｅ＝Ｄ経験値演出 target exp
    ExpUp target exp
Else
    ExpUp target (Info(パイロット, target, 累積経験値) * -1)
EndIf
Return


//経験値の上昇を演出します。
Ｐ−Ｄｅ＝Ｄ経験値演出:
Local target = Args(1)
Local exp = Args(2)
Set target IIf(IsDefined(target, パイロット), PilotID(UnitID(target)), PilotID(target))

//ウィンドウ画像
Local WINDOW_BACKGROUND_IMAGE = ウィンドウ画像
//ウィンドウ共通設定
Local WINDOW_FRAME_WIDTH = 2
//ウィンドウ設定
Local NAME_WINDOW_DX = 40
Local NAME_WINDOW_DY = 40
Local NAME_WINDOW_DW = 195
Local NAME_WINDOW_DH = 130
Local FACE_WINDOW_DX = 155
Local FACE_WINDOW_DY = 50
Local FACE_WINDOW_DW = 68
Local FACE_WINDOW_DH = 68
Local FACE_WINDOW_FRAME_WIDTH = 2
Local EXP_WINDOW_DX = 95
Local EXP_WINDOW_DY = 137
Local EXP_WINDOW_DW = 128
Local EXP_WINDOW_DH = 18
Local EXP_WINDOW_FRAME_WIDTH = 1

//表示情報
Local NAME_X = 151  //右側の座標
Local NAME_Y = 62
Local LV_X = 151
Local LV_Y = 96
Local CLASS_X = 46
Local CLASS_Y = 130
Local EXP_X = 100
Local EXP_Y = 142
Local EXP_W = 118
Local EXP_H = 7

//インフォテキスト情報
Local INFO_FONT_COLOR = #FFFFFF
Local INFO_FONT_FRAME_COLOR = #000000
Local INFO_FONT_SIZE = 10pt
Local INFO_FONT_FRAME_WIDTH = 2
Local INFO_TEXT_NAME = "NAME"
Local INFO_TEXT_LV = "Lv"
Local INFO_TEXT_CLASS = "CLASS"
Local INFO_TEXT_EXP = "Exp"
Local INFO_NAME_X = 46
Local INFO_NAME_Y = 46
Local INFO_LV_X = 46
Local INFO_LV_Y = 80
Local INFO_CLASS_X = 46
Local INFO_CLASS_Y = 114
Local INFO_EXP_X = 95
Local INFO_EXP_Y = 114

//テキスト情報
Local FONT_SIZE = 12pt
Local FONT_COLOR = #FFFFFF
Local FONT_FRAME_COLOR = #000000
Local FONT_FRAME_WIDTH = 1

//ウェイト
Local ANIME_SPEED = 0.2
Local VIEW_TIME = 5

//ウィンドウ描画
Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE NAME_WINDOW_DX NAME_WINDOW_DY NAME_WINDOW_DW NAME_WINDOW_DH WINDOW_FRAME_WIDTH
Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE FACE_WINDOW_DX FACE_WINDOW_DY FACE_WINDOW_DW FACE_WINDOW_DH FACE_WINDOW_FRAME_WIDTH
Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE EXP_WINDOW_DX EXP_WINDOW_DY EXP_WINDOW_DW EXP_WINDOW_DH EXP_WINDOW_FRAME_WIDTH

//インフォテキスト描画
Call ｋａｔ縁取り文字描画 INFO_NAME_X INFO_NAME_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_NAME 保持
Call ｋａｔ縁取り文字描画 INFO_LV_X INFO_LV_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_LV 保持
Call ｋａｔ縁取り文字描画 INFO_CLASS_X INFO_CLASS_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_CLASS 保持
Call ｋａｔ縁取り文字描画 INFO_EXP_X INFO_EXP_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_EXP 保持

//対象ユニット情報描画
If Info(パイロット, target, グラフィック) != "-.bmp" Then
    PaintPicture ("Pilot\" & Info(パイロット, target, グラフィック)) (FACE_WINDOW_DX + FACE_WINDOW_FRAME_WIDTH) (FACE_WINDOW_DY + FACE_WINDOW_FRAME_WIDTH) 64 64 保持
EndIf
Font FONT_SIZE ゴシック
Call ｋａｔ縁取り文字描画 (NAME_X - TextWidth(Info(パイロット, target, 愛称))) NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Info(パイロット, target, 愛称) Regular 保持
Font FONT_SIZE ゴシック Regular
Call ｋａｔ縁取り文字描画 (LV_X - TextWidth(Wide(Info(パイロット, target, レベル)))) LV_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(パイロット, target, レベル)) Regular 通常
If Info(ユニット, UnitID(target), グラフィック) != "-.bmp" Then
    PaintPicture ("Unit\" & Info(ユニット, UnitID(target), グラフィック)) CLASS_X CLASS_Y 透過 #FFFFFF 保持
EndIf

//経験値上昇アニメ
Local sw
Local sh = EXP_H + (4 - EXP_H Mod 4)
Local dw
Local i
Wait Start
For i = Info(パイロット, target, 累積経験値) To (Info(パイロット, target, 累積経験値) + exp)
    Set dw (i / 100 * EXP_W)
    If (dw Mod 2) = 0 Then
        ClearPicture EXP_X EXP_Y (EXP_X + EXP_W) (EXP_Y + EXP_H)
        Set sw (dw + (4 - dw Mod 4))
        PaintPicture WINDOW_BACKGROUND_IMAGE EXP_X EXP_Y dw EXP_H EXP_X EXP_Y sw sh 明
        Refresh
        PlaySound exp.wav
        Wait Until ((i - Info(パイロット, target, 累積経験値) + 1) * ANIME_SPEED)
    EndIf
Next

Wait VIEW_TIME
ClearPicture EXP_X EXP_Y (EXP_X + EXP_W) (EXP_Y + EXP_H)
Refresh
Return


//レベルアップ処理をします。乱数成長を用います
Ｐ−Ｄｅ＝Ｄレベルアップ:
Local target = Args(1)
Set target IIf(IsDefined(target, パイロット), PilotID(UnitID(target)), PilotID(target))

LevelUp target 1
//レベルアップ前の値を保存
Set 成長前力 Info(パイロット, target, ステータス力)
Set 成長前魔力 Info(パイロット, target, ステータス魔力)
Set 成長前技 Info(パイロット, target, ステータス技)
Set 成長前速さ Info(パイロット, target, ステータス速さ)
Set 成長前幸運 Info(パイロット, target, ステータス幸運)
Set 成長前守備 Info(ユニット, UnitID(target), ステータス守備)
Set 成長前魔防 Info(ユニット, UnitID(target), ステータス魔防)
Set 成長前ＨＰ Info(ユニット, UnitID(target), 最大ＨＰ)

Call 乱数成長 target

//上昇値を取得
Set 力上昇値 (Info(パイロット, target, ステータス力) - 成長前力)
Set 魔力上昇値 (Info(パイロット, target, ステータス魔力) - 成長前魔力)
Set 技上昇値 (Info(パイロット, target, ステータス技) - 成長前技)
Set 速さ上昇値 (Info(パイロット, target, ステータス速さ) - 成長前速さ)
Set 幸運上昇値 (Info(パイロット, target, ステータス幸運) - 成長前幸運)
Set 守備上昇値 (Info(ユニット, UnitID(target), ステータス守備) - 成長前守備)
Set 魔防上昇値 (Info(ユニット, UnitID(target), ステータス魔防) - 成長前魔防)
Set ＨＰ上昇値 (Info(ユニット, UnitID(target), 最大ＨＰ) - 成長前ＨＰ)

Call Ｐ−Ｄｅ＝Ｄレベルアップ演出 target
Return


//レベルアップの演出です。
Ｐ−Ｄｅ＝Ｄレベルアップ演出:
Local target = Args(1)
Set target IIf(IsDefined(target, パイロット), PilotID(UnitID(target)), PilotID(target))

//ウィンドウ画像
Local WINDOW_BACKGROUND_IMAGE = ウィンドウ画像
//ウィンドウ共通設定
Local WINDOW_FRAME_WIDTH = 2
//ウィンドウ設定
Local WINDOW_DX = 40
Local WINDOW_DY = 185
Local WINDOW_DW = 195
Local WINDOW_DH = 190
//インフォテキスト設定
Local INFO_FONT_COLOR = #FFFFFF
Local INFO_FONT_FRAME_COLOR = #000000
Local INFO_FONT_SIZE = 10pt
Local INFO_FONT_FRAME_WIDTH = 2
Local INFO_TEXT_STATUS = "STATUS"
Local INFO_STATUS_X = 46
Local INFO_STATUS_Y = 191

//表示情報
Local LV_X = 151 //右側の座標
Local LV_Y = 96
Local STATUS_NAME_X = 50
Local STATUS_NAME_Y = 214
Local STATUS_HEIGHT = 40
Local STATUS_WIDTH = 88
Local STATUS_X = 130 //右側の座標
Local STATUS_Y = 214

//テキスト情報
Local FONT_SIZE = 12pt
Local FONT_COLOR = #FFFFFF
Local FONT_FRAME_COLOR = #000000
Local FONT_FRAME_WIDTH = 1

//ウェイト
Local WAIT_SOUND_LEVELUP = 20

//導入
StopBGM
Font FONT_SIZE ゴシック Regular
ClearPicture (LV_X - TextWidth(Wide(1000))) LV_Y LV_X (LV_Y + TextHeight(1))
Call ｋａｔ縁取り文字描画 (LV_X - TextWidth(Wide(Info(パイロット, target, レベル)))) LV_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(パイロット, target, レベル)) Regular 保持
Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE WINDOW_DX WINDOW_DY WINDOW_DW WINDOW_DH WINDOW_FRAME_WIDTH
Call ｋａｔ縁取り文字描画 INFO_STATUS_X INFO_STATUS_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_STATUS 保持
//ステータス名描画
Call ｋａｔ縁取り文字描画 STATUS_NAME_X STATUS_NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "力" Bold 保持
Call ｋａｔ縁取り文字描画 STATUS_NAME_X (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "技" Bold 保持
Call ｋａｔ縁取り文字描画 STATUS_NAME_X (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "速さ" Bold 保持
Call ｋａｔ縁取り文字描画 STATUS_NAME_X (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "幸運" Bold 保持
Call ｋａｔ縁取り文字描画 (STATUS_NAME_X + STATUS_WIDTH) STATUS_NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "魔力" Bold 保持
Call ｋａｔ縁取り文字描画 (STATUS_NAME_X + STATUS_WIDTH) (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "守備" Bold 保持
Call ｋａｔ縁取り文字描画 (STATUS_NAME_X + STATUS_WIDTH) (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "魔防" Bold 保持
Call ｋａｔ縁取り文字描画 (STATUS_NAME_X + STATUS_WIDTH) (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR "ＨＰ" Bold 保持
//変化前ステータス描画
Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(成長前力))) STATUS_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前力) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(成長前技))) (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前技) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(成長前速さ))) (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前速さ) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(成長前幸運))) (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前幸運) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(成長前魔力))) STATUS_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前魔力) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(成長前守備))) (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前守備) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(成長前魔防))) (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前魔防) Regular 通常
Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(成長前ＨＰ))) (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(成長前ＨＰ) Regular 通常

Wait Start
PlaySound levelup.wav
WhiteIn
ｋａｔトースト描画 "レベルアップ" #FF6600

Wait WAIT_SOUND_LEVELUP

//上昇ステータス描画
If 0 < 力上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "力"
EndIf
If 0 < 技上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "技"
EndIf
If 0 < 速さ上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "速さ"
EndIf
If 0 < 幸運上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "幸運"
EndIf
If 0 < 魔力上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "魔力"
EndIf
If 0 < 守備上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "守備"
EndIf
If 0 < 魔防上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "魔防"
EndIf
If 0 < ＨＰ上昇値 Then
    Call Ｐ−Ｄｅ＝Ｄステータス上昇演出 target "ＨＰ"
EndIf

StartBGM ステージＢＧＭ
KeepBGM
Wait Click

Redraw
Return

//ステータスの上昇演出です
Ｐ−Ｄｅ＝Ｄステータス上昇演出:
Local target = Args(1)
Local status = Args(2)
Set target IIf(IsDefined(target, パイロット), PilotID(UnitID(target)), PilotID(target))

//上昇量テキスト設定
Local UP_FONT_COLOR = #FFFFFF
Local UP_FONT_FRAME_COLOR = #FFFF00
Local UP_FONT_SIZE = 10pt
Local UP_FONT_FRAME_WIDTH = 1
Local UP_X = 85
Local UP_Y = 217
Local UP_W = 88
Local UP_H = 40

//表示設定
Local STATUS_X = 130 //右側の座標
Local STATUS_Y = 214
Local STATUS_COLOR = #00DB47
Local STATUS_HEIGHT = 40
Local STATUS_WIDTH = 88
Local STATUS_NAME_Y = 214

//ウィンドウ設定
Local WINDOW_DX = 40
Local WINDOW_DY = 185
Local WINDOW_DW = 195
Local WINDOW_DH = 190

//アニメ設定
Local ANIME_FILE_NAME = "Anime\shower\EFFECT_shower"
Local ANIME_PATTERN = 10
Local ANIME_SPEED = 0.3
Local ANIME_DX = 102
Local ANIME_DY = 214
Local ANIME_DW = 40
Local ANIME_DH = 40

//テキスト情報
Local FONT_SIZE = 12pt
Local FONT_COLOR = #FFFFFF
Local FONT_FRAME_COLOR = #000000
Local FONT_FRAME_WIDTH = 1

//ウェイト
Local WAIT_TIME = 1.5

PlaySound statusup.wav

//画像読み込み
For i = 1 To ANIME_PATTERN
        If i < 10 Then
            Set tmp ("0" & i)
        Else
            Set tmp i
        EndIf
        PaintPicture ("Anime\shower\EFFECT_shower" & tmp & ".gif") 480 480 ANIME_DW ANIME_DH 透過 #efe5e5
Next

Local tmp
Local dx
Local dy
Switch status
Case "力"
    ClearPicture ANIME_DX ANIME_DY (ANIME_DX + ANIME_DW) (ANIME_DY + ANIME_DH)
    Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(Info(パイロット, target, ステータス力)))) STATUS_Y FONT_SIZE STATUS_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(パイロット, target, ステータス力)) Regular 保持
    Call ｋａｔ縁取り文字描画 UP_X UP_Y UP_FONT_SIZE UP_FONT_COLOR ゴシック UP_FONT_FRAME_WIDTH UP_FONT_FRAME_COLOR ("+" & 力上昇値) 保持
	Wait Start
    For i = 1 To ANIME_PATTERN
        If i < 10 Then
            Set tmp ("0" & i)
        Else
            Set tmp i
        EndIf
        ClearPicture ANIME_DX ANIME_DY (ANIME_DX + ANIME_DW) (ANIME_DY + ANIME_DH)
        PaintPicture ("Anime\shower\EFFECT_shower" & tmp & ".gif") ANIME_DX ANIME_DY ANIME_DW ANIME_DH 透過 #efe5e5
        Refresh
        Wait Until (i * ANIME_SPEED)
    Next
    ClearPicture ANIME_DX ANIME_DY (ANIME_DX + ANIME_DW) (ANIME_DY + ANIME_DH)
    Refresh
Case "技"
    ClearPicture ANIME_DX dy (ANIME_DX + ANIME_DW) (dy + ANIME_DH)
    Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(Info(パイロット, target, ステータス技)))) (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE STATUS_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(パイロット, target, ステータス技)) Regular 保持
    Call ｋａｔ縁取り文字描画 UP_X (UP_Y + UP_H) UP_FONT_SIZE UP_FONT_COLOR ゴシック UP_FONT_FRAME_WIDTH UP_FONT_FRAME_COLOR ("+" & 技上昇値) 保持
	Wait Start
    For i = 1 To ANIME_PATTERN
        If i < 10 Then
            Set tmp ("0" & i)
        Else
            Set tmp i
        EndIf
        Set dy (ANIME_DY + UP_H)
        ClearPicture ANIME_DX dy (ANIME_DX + ANIME_DW) (dy + ANIME_DH)
        PaintPicture ("Anime\shower\EFFECT_shower" & tmp & ".gif") ANIME_DX dy ANIME_DW ANIME_DH 透過 #efe5e5
        Refresh
        Wait Until (i * ANIME_SPEED)
    Next
    ClearPicture ANIME_DX dy (ANIME_DX + ANIME_DW) (dy + ANIME_DH)
    Refresh
Case "速さ"
    ClearPicture ANIME_DX dy (ANIME_DX + ANIME_DW) (dy + ANIME_DH)
    Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(Info(パイロット, target, ステータス速さ)))) (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE STATUS_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(パイロット, target, ステータス速さ)) Regular 保持
    Call ｋａｔ縁取り文字描画 UP_X (UP_Y + UP_H * 2) UP_FONT_SIZE UP_FONT_COLOR ゴシック UP_FONT_FRAME_WIDTH UP_FONT_FRAME_COLOR ("+" & 速さ上昇値) 保持
	Wait Start
    For i = 1 To ANIME_PATTERN
        If i < 10 Then
            Set tmp ("0" & i)
        Else
            Set tmp i
        EndIf
        Set dy (ANIME_DY + UP_H * 2)
        ClearPicture ANIME_DX dy (ANIME_DX + ANIME_DW) (dy + ANIME_DH)
        PaintPicture ("Anime\shower\EFFECT_shower" & tmp & ".gif") ANIME_DX dy ANIME_DW ANIME_DH 透過 #efe5e5
        Refresh
        Wait Until (i * ANIME_SPEED)
    Next
    ClearPicture ANIME_DX dy (ANIME_DX + ANIME_DW) (dy + ANIME_DH)
    Refresh
Case "幸運"
    ClearPicture ANIME_DX dy (ANIME_DX + ANIME_DW) (dy + ANIME_DH)
    Call ｋａｔ縁取り文字描画 (STATUS_X - TextWidth(Wide(Info(パイロット, target, ステータス幸運)))) (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE STATUS_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(パイロット, target, ステータス幸運)) Regular 保持
    Call ｋａｔ縁取り文字描画 UP_X (UP_Y + UP_H * 3) UP_FONT_SIZE UP_FONT_COLOR ゴシック UP_FONT_FRAME_WIDTH UP_FONT_FRAME_COLOR ("+" & 幸運上昇値) 保持
	Wait Start
    For i = 1 To ANIME_PATTERN
        If i < 10 Then
            Set tmp ("0" & i)
        Else
            Set tmp i
        EndIf
        Set dy (ANIME_DY + UP_H * 3)
        ClearPicture ANIME_DX dy (ANIME_DX + ANIME_DW) (dy + ANIME_DH)
        PaintPicture ("Anime\shower\EFFECT_shower" & tmp & ".gif") ANIME_DX dy ANIME_DW ANIME_DH 透過 #efe5e5
        Refresh
        Wait Until (i * ANIME_SPEED)
    Next
    ClearPicture ANIME_DX dy (ANIME_DX + ANIME_DW) (dy + ANIME_DH)
    Refresh
Case "魔力"
    ClearPicture dx ANIME_DY (dx + ANIME_DW) (ANIME_DY + ANIME_DH)
    Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(Info(パイロット, target, ステータス魔力)))) STATUS_Y FONT_SIZE STATUS_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(パイロット, target, ステータス魔力)) Regular 保持
    Call ｋａｔ縁取り文字描画 (UP_X + UP_W) UP_Y UP_FONT_SIZE UP_FONT_COLOR ゴシック UP_FONT_FRAME_WIDTH UP_FONT_FRAME_COLOR ("+" & 魔力上昇値) 保持
	Wait Start
    For i = 1 To ANIME_PATTERN
        If i < 10 Then
            Set tmp ("0" & i)
        Else
            Set tmp i
        EndIf
        Set dx (ANIME_DX + UP_W)
        ClearPicture dx ANIME_DY (dx + ANIME_DW) (ANIME_DY + ANIME_DH)
        PaintPicture ("Anime\shower\EFFECT_shower" & tmp & ".gif") (ANIME_DX + UP_W) ANIME_DY ANIME_DW ANIME_DH 透過 #efe5e5
        Refresh
        Wait Until (i * ANIME_SPEED)
    Next
    ClearPicture dx ANIME_DY (dx + ANIME_DW) (ANIME_DY + ANIME_DH)
    Refresh
Case "守備"
    ClearPicture dx dy (dx + ANIME_DW) (dy + ANIME_DH)
    Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(Info(ユニット, UnitID(target), ステータス守備)))) (STATUS_NAME_Y + STATUS_HEIGHT) FONT_SIZE STATUS_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(ユニット, UnitID(target), ステータス守備)) Regular 保持
    Call ｋａｔ縁取り文字描画 (UP_X + UP_W) (UP_Y + UP_H) UP_FONT_SIZE UP_FONT_COLOR ゴシック UP_FONT_FRAME_WIDTH UP_FONT_FRAME_COLOR ("+" & 守備上昇値) 保持
	Wait Start
    For i = 1 To ANIME_PATTERN
        If i < 10 Then
            Set tmp ("0" & i)
        Else
            Set tmp i
        EndIf
        Set dx (ANIME_DX + UP_W)
        Set dy (ANIME_DY + UP_H)
        ClearPicture dx dy (dx + ANIME_DW) (dy + ANIME_DH)
        PaintPicture ("Anime\shower\EFFECT_shower" & tmp & ".gif") dx (ANIME_DY + UP_H) ANIME_DW ANIME_DH 透過 #efe5e5
        Refresh
        Wait Until (i * ANIME_SPEED)
    Next
    ClearPicture dx dy (dx + ANIME_DW) (dy + ANIME_DH)
    Refresh
Case "魔防"
    ClearPicture dx dy (dx + ANIME_DW) (dy + ANIME_DH)
    Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(Info(ユニット, UnitID(target), ステータス魔防)))) (STATUS_NAME_Y + STATUS_HEIGHT * 2) FONT_SIZE STATUS_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(ユニット, UnitID(target), ステータス魔防)) Regular 保持
    Call ｋａｔ縁取り文字描画 (UP_X + UP_W) (UP_Y + UP_H * 2) UP_FONT_SIZE UP_FONT_COLOR ゴシック UP_FONT_FRAME_WIDTH UP_FONT_FRAME_COLOR ("+" & 魔防上昇値) 保持
	Wait Start
    For i = 1 To ANIME_PATTERN
        If i < 10 Then
            Set tmp ("0" & i)
        Else
            Set tmp i
        EndIf
        Set dx (ANIME_DX + UP_W)
        Set dy (ANIME_DY + UP_H * 2)
        ClearPicture dx dy (dx + ANIME_DW) (dy + ANIME_DH)
        PaintPicture ("Anime\shower\EFFECT_shower" & tmp & ".gif") dx dy ANIME_DW ANIME_DH 透過 #efe5e5
        Refresh
        Wait Until (i * ANIME_SPEED)
    Next
    ClearPicture dx dy (dx + ANIME_DW) (dy + ANIME_DH)
    Refresh
Case "ＨＰ"
    ClearPicture dx dy (dx + ANIME_DW) (dy + ANIME_DH)
    Call ｋａｔ縁取り文字描画 (STATUS_X + STATUS_WIDTH - TextWidth(Wide(Info(ユニット, UnitID(target), 最大ＨＰ)))) (STATUS_NAME_Y + STATUS_HEIGHT * 3) FONT_SIZE STATUS_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(ユニット, UnitID(target), 最大ＨＰ)) Regular 保持
    Call ｋａｔ縁取り文字描画 (UP_X + UP_W) (UP_Y + UP_H * 3) UP_FONT_SIZE UP_FONT_COLOR ゴシック UP_FONT_FRAME_WIDTH UP_FONT_FRAME_COLOR ("+" & ＨＰ上昇値) 保持
	Wait Start
    For i = 1 To ANIME_PATTERN
        If i < 10 Then
            Set tmp ("0" & i)
        Else
            Set tmp i
        EndIf
        Set dx (ANIME_DX + UP_W)
        Set dy (ANIME_DY + UP_H * 3)
        ClearPicture dx dy (dx + ANIME_DW) (dy + ANIME_DH)
        PaintPicture ("Anime\shower\EFFECT_shower" & tmp & ".gif") dx dy ANIME_DW ANIME_DH 透過 #efe5e5
        Refresh
        Wait Until (i * ANIME_SPEED)
    Next
    ClearPicture dx dy (dx + ANIME_DW) (dy + ANIME_DH)
    Refresh
EndSw

Wait WAIT_TIME
Return

//攻守を入れ替えます。
FE攻守入れ替え:
Ｐ−Ｄｅ＝Ｄ攻守入れ替え:
Local temp
Set temp           attackerUnitID
Set attackerUnitID defenderUnitID
Set defenderUnitID temp
Set temp           attackerWeapon
Set attackerWeapon defenderWeapon
Set defenderWeapon temp
Return


//自分と相手の距離を返します。
FE距離計算:
Ｐ−Ｄｅ＝Ｄ距離計算:
Local attackerUnitID = Args(1)
Local defenderUnitID = Args(2)
Local rangeX = Abs(X(attackerUnitID) - X(defenderUnitID))
Local rangeY = Abs(Y(attackerUnitID) - Y(defenderUnitID))
Local range = rangeX + rangeY
Return range


//反撃に用いる武器を持ち替えます。
FE武器持ち替え:
Ｐ−Ｄｅ＝Ｄ武器持ち替え:
Local target = Args(1)
Local weapon = Args(2)
Set target IIf(IsDefined(target, ユニット), UnitID(PilotID(target)), UnitID(target))

SetSkill PilotID(target) 装備中武器名 -1 (Info(ユニット, target, 武器, weapon) & 装備)
If (weapon != "") And (weapon != 0) Then
    Call 装備残更新 target weapon Info(ユニット, target, 武器, weapon, 弾数)
Else
    SetSkill PilotID(target) 装備中武器残表示 -1 (武器残 & "　0")
    SetSkill PilotID(target) 装備中武器残 0 非表示
EndIf
Return


//反撃に用いる武器を装備していないユニットがあれば、武器番号1の武器を装備します。
//引数で与えられた陣営、groupIDのユニット全てを検索します。
FE一括装備:
一括装備:
Ｐ−Ｄｅ＝Ｄ一括装備:
If 対象パイロット != "" Then
    Local 元対象パイロット = 対象パイロット
EndIf
Local groupID = Args(1)
ForEach groupID
    If Call(装備中武器番号取得, 対象ユニットＩＤ) = "" Then
        Call FE武器持ち替え 対象ユニットＩＤ Call(FE装備可能武器検索, 対象ユニットＩＤ)
    EndIf
Next
If IsVarDefined(元対象パイロット) Then
    Select 元対象パイロット
EndIf
Return


//装備変更が使用可能かどうか調べます
装備変更可否:
Return IIf(装備変更不可[対象パイロット] != 1, 1, 0)


//アイテム交換が使用可能かどうか調べます
アイテム交換可否:
Return IIf(アイテム交換不可[対象パイロット] != 1, Ｐ−Ｄｅ＝Ｄ隣接ユニット確認(対象ユニットＩＤ, 味方), 0)


//盗むが使用可能かどうか調べます
盗む可否:
Return IIf((盗む不可[対象パイロット] != 1) And (Info(ユニット, 対象ユニットＩＤ, 特殊能力所有, "盗む")), 盗む隣接ユニット確認(対象ユニットＩＤ), 0)


//踊るが使用可能かどうか調べます
踊る可否:
Return IIf((踊る不可[対象パイロット] != 1) And (Info(ユニット, 対象ユニットＩＤ, 特殊能力所有, "踊る")), 行動済隣接ユニット確認(対象ユニットＩＤ), 0)


//装備を変更するユニットコマンド。
ユニットコマンド 装備変更 味方 Call(装備変更可否):
//武器を一覧
Local seed = ""
Local weaponName = ""
For i = 1 To Info(ユニット, 対象ユニットＩＤ, 武器数)
    If Info(ユニット, 対象ユニットＩＤ, 武器, i, 使用可) = 1 Then
        Set weaponName (weaponName & Info(ユニット, 対象ユニットＩＤ, 武器, i) & ",")
        Set seed (seed & Info(ユニット, 対象ユニットＩＤ, 武器, i) & " (攻撃力 " & Info(ユニット, 対象ユニットＩＤ, 武器, i, 攻撃力) & " 重さ " & Ｐ−Ｄｅ＝Ｄ武器重量取得(対象ユニットＩＤ, i) & ")" & ",")
    EndIf
Next
Array weaponNameArr weaponName ","
Array arrayWeapons seed ","
UnSet weaponNameArr[Count(weaponNameArr)]
UnSet arrayWeapons[Count(arrayWeapons)]
Set arrayWeapons[Count(arrayWeapons) + 1] "装備を外す"
Ask arrayWeapons "装備中の武器で反撃します。武器の重さが体格を超える場合、回避率が下がります。" キャンセル可

//キャンセル
If 選択 = "" Then
    Cancel
Else
    If 選択 != Count(arrayWeapons) Then
        For i = 1 To Info(ユニット, 対象ユニットＩＤ, 武器数)
            If weaponNameArr[選択] = Info(ユニット, 対象ユニットＩＤ, 武器, i) Then
                Call Ｐ−Ｄｅ＝Ｄ武器持ち替え 対象ユニットＩＤ i
                Break
            EndIf
        Next
    Else
        Call Ｐ−Ｄｅ＝Ｄ武器持ち替え 対象ユニットＩＤ ""
    EndIf
EndIf
Exit


//隣接するユニットとアイテムを交換します。
*ユニットコマンド 交換 味方 Call(アイテム交換可否):
//記号定数の定義
If Ｐ−Ｄｅ＝Ｄアイテム交換初期設定 != 1 Then
    //アイテム装備
    Global Ｐ−Ｄｅ＝ＤEQUIP_ITEM
    Set Ｐ−Ｄｅ＝ＤEQUIP_ITEM 1
    //スキル装備
    Global Ｐ−Ｄｅ＝ＤEQUIP_SKILL
    Set Ｐ−Ｄｅ＝ＤEQUIP_SKILL -1
    //装備なし
    Global Ｐ−Ｄｅ＝ＤNO_EQUIP
    Set Ｐ−Ｄｅ＝ＤNO_EQUIP 0
    //初期設定完了
    Global Ｐ−Ｄｅ＝Ｄアイテム交換初期設定
    Set Ｐ−Ｄｅ＝Ｄアイテム交換初期設定
EndIf

Call Ｐ−Ｄｅ＝Ｄ隣接選択 対象ユニットＩＤ 味方

If 選択 = "" Then
    Cancel
Else
    Local partnerUnitID
    Set partnerUnitID 選択
    
    //ウィンドウ画像
    Local WINDOW_BACKGROUND_IMAGE = ウィンドウ画像
    //ウィンドウ共通設定
    Local WINDOW_FRAME_WIDTH = 2
    //対象ユニット用ウィンドウ設定
    Local TARGET_NAME_WINDOW_DX = 40
    Local TARGET_NAME_WINDOW_DY = 40
    Local TARGET_NAME_WINDOW_DW = 195
    Local TARGET_NAME_WINDOW_DH = 130
    Local TARGET_FACE_WINDOW_DX = 155
    Local TARGET_FACE_WINDOW_DY = 50
    Local TARGET_FACE_WINDOW_DW = 68
    Local TARGET_FACE_WINDOW_DH = 68
    Local TARGET_FACE_WINDOW_FRAME_WIDTH = 2
    Local TARGET_WINDOW_DX = 40
    Local TARGET_WINDOW_DY = 185
    Local TARGET_WINDOW_DW = 195
    Local TARGET_WINDOW_DH = 190
    //相手ユニット用ウィンドウ設定
    Local PARTNER_NAME_WINDOW_DX = 245
    Local PARTNER_NAME_WINDOW_DY = 40
    Local PARTNER_NAME_WINDOW_DW = 195
    Local PARTNER_NAME_WINDOW_DH = 130
    Local PARTNER_FACE_WINDOW_DX = 257
    Local PARTNER_FACE_WINDOW_DY = 50
    Local PARTNER_FACE_WINDOW_DW = 68
    Local PARTNER_FACE_WINDOW_DH = 68
    Local PARTNER_FACE_WINDOW_FRAME_WIDTH = 2
    Local PARTNER_WINDOW_DX = 245
    Local PARTNER_WINDOW_DY = 185
    Local PARTNER_WINDOW_DW = 195
    Local PARTNER_WINDOW_DH = 190
    //インフォテキスト情報
    Local INFO_FONT_COLOR = #FFFFFF
    Local INFO_FONT_FRAME_COLOR = #000000
    Local INFO_FONT_EQUIP_FRAME_COLOR = #66CC00
    Local INFO_FONT_BAG_FRAME_COLOR = #0000CC
    Local INFO_FONT_SIZE = 10pt
    Local INFO_FONT_FRAME_WIDTH = 2
    Local INFO_FONT_EQUIP_FRAME_WIDTH = 1
    Local INFO_FONT_BAG_FRAME_WIDTH = 1
    Local INFO_TEXT_NAME = "NAME"
    Local INFO_TEXT_LV = "Lv"
    Local INFO_TEXT_CLASS = "CLASS"
    Local INFO_TEXT_WEAPON = "WEAPON"
    Local INFO_TEXT_EQUIP = "EQUIP"
    Local INFO_TEXT_BAG = "BAG"
    Local TARGET_INFO_NAME_X = 46
    Local TARGET_INFO_NAME_Y = 46
    Local TARGET_INFO_LV_X = 46
    Local TARGET_INFO_LV_Y = 80
    Local TARGET_INFO_CLASS_X = 46
    Local TARGET_INFO_CLASS_Y = 114
    Local TARGET_INFO_WEAPON_X = 95
    Local TARGET_INFO_WEAPON_Y = 114
    Local TARGET_INFO_EQUIP_X = 46
    Local TARGET_INFO_EQUIP_Y = 191
    Local TARGET_INFO_BAG_X = 46
    Local TARGET_INFO_BAG_Y = 240
    Local PARTNER_INFO_NAME_X = 337
    Local PARTNER_INFO_NAME_Y = 46
    Local PARTNER_INFO_LV_X = 337
    Local PARTNER_INFO_LV_Y = 80
    Local PARTNER_INFO_CLASS_X = 434 //右側の座標
    Local PARTNER_INFO_CLASS_Y = 114
    Local PARTNER_INFO_WEAPON_X = 385 //右側の座標
    Local PARTNER_INFO_WEAPON_Y = 114
    Local PARTNER_INFO_EQUIP_X = 251
    Local PARTNER_INFO_EQUIP_Y = 191
    Local PARTNER_INFO_BAG_X = 251
    Local PARTNER_INFO_BAG_Y = 240
    
    //テキスト情報
    Local FONT_SIZE = 12pt
    Local FONT_COLOR = #FFFFFF
    Local FONT_FRAME_COLOR = #000000
    Local FONT_FRAME_WIDTH = 1
    
    //共通表示情報
    Local ITEM_ICON_SIZE = 24
    Local ITEM_NUM_A_PAGE = 3
    Local ITEM_HEIGHT = 30
    
    //対象ユニット用表示情報
    Local TARGET_NAME_X = 151  //右側の座標
    Local TARGET_NAME_Y = 62
    Local TARGET_LV_X = 151
    Local TARGET_LV_Y = 96
    Local TARGET_CLASS_X = 46
    Local TARGET_CLASS_Y = 130
    Local TARGET_WEAPON_X = 95
    Local TARGET_WEAPON_Y = 130
    Local TARGET_ITEM_NAME_X = 85
    Local TARGET_EQUIP_ITEM_ICON_X = 50
    Local TARGET_EQUIP_ITEM_ICON_Y = 207
    
    //相手ユニット用表示情報
    Local PARTNER_NAME_X = 436 //右側の座標
    Local PARTNER_NAME_Y = 62
    Local PARTNER_LV_X = 436
    Local PARTNER_LV_Y = 96
    Local PARTNER_CLASS_X = 402
    Local PARTNER_CLASS_Y = 130
    Local PARTNER_WEAPON_X = 385 //右側の座標
    Local PARTNER_WEAPON_Y = 130
    Local PARTNER_ITEM_NAME_X = 290
    Local PARTNER_EQUIP_ITEM_ICON_X = 255
    Local PARTNER_EQUIP_ITEM_ICON_Y = 207
    
    //ホットポイント座標
    Local TARGET_HOTPOINT_X = 46
    Local TARGET_HOTPOINT_Y = 253
    Local TARGET_HOTPOINT_WIDTH = 184
    Local TARGET_HOTPOINT_HEIGHT = 30
    Local PARTNER_HOTPOINT_X = 251
    Local PARTNER_HOTPOINT_Y = 253
    Local PARTNER_HOTPOINT_WIDTH = 184
    Local PARTNER_HOTPOINT_HEIGHT = 30
    
    //ページ切り替えボタン
    Local PAGE_PREV = "≪"
    Local PAGE_NEXT = "≫"
    
    //装備アイテム情報
    Local targetEquipItemName
    Local targetEquipItemImage
    Local targetEquipItemProperty
    Local targetIsEquipItem = Ｐ−Ｄｅ＝ＤNO_EQUIP
    Local partnerEquipItemName
    Local partnerEquipItemImage
    Local partnerEquipItemProperty
    Local partnerIsEquipItem = Ｐ−Ｄｅ＝ＤNO_EQUIP
    
    //ウィンドウ描画
    Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE TARGET_NAME_WINDOW_DX TARGET_NAME_WINDOW_DY TARGET_NAME_WINDOW_DW TARGET_NAME_WINDOW_DH WINDOW_FRAME_WIDTH
    Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE TARGET_FACE_WINDOW_DX TARGET_FACE_WINDOW_DY TARGET_FACE_WINDOW_DW TARGET_FACE_WINDOW_DH TARGET_FACE_WINDOW_FRAME_WIDTH
    Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE TARGET_WINDOW_DX TARGET_WINDOW_DY TARGET_WINDOW_DW TARGET_WINDOW_DH WINDOW_FRAME_WIDTH
    Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE PARTNER_NAME_WINDOW_DX PARTNER_NAME_WINDOW_DY PARTNER_NAME_WINDOW_DW PARTNER_NAME_WINDOW_DH WINDOW_FRAME_WIDTH
    Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE PARTNER_FACE_WINDOW_DX PARTNER_FACE_WINDOW_DY PARTNER_FACE_WINDOW_DW PARTNER_FACE_WINDOW_DH PARTNER_FACE_WINDOW_FRAME_WIDTH
    Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE PARTNER_WINDOW_DX PARTNER_WINDOW_DY PARTNER_WINDOW_DW PARTNER_WINDOW_DH WINDOW_FRAME_WIDTH
    
    //インフォテキスト描画
    Call ｋａｔ縁取り文字描画 TARGET_INFO_NAME_X TARGET_INFO_NAME_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_NAME 保持
    Call ｋａｔ縁取り文字描画 TARGET_INFO_LV_X TARGET_INFO_LV_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_LV 保持
    Call ｋａｔ縁取り文字描画 TARGET_INFO_CLASS_X TARGET_INFO_CLASS_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_CLASS 保持
    Call ｋａｔ縁取り文字描画 TARGET_INFO_WEAPON_X TARGET_INFO_WEAPON_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_WEAPON 保持
    Call ｋａｔ縁取り文字描画 TARGET_INFO_EQUIP_X TARGET_INFO_EQUIP_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_EQUIP_FRAME_WIDTH INFO_FONT_EQUIP_FRAME_COLOR INFO_TEXT_EQUIP 保持
    Call ｋａｔ縁取り文字描画 TARGET_INFO_BAG_X TARGET_INFO_BAG_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_BAG_FRAME_WIDTH INFO_FONT_BAG_FRAME_COLOR INFO_TEXT_BAG 保持
    Call ｋａｔ縁取り文字描画 PARTNER_INFO_NAME_X PARTNER_INFO_NAME_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_NAME 保持
    Call ｋａｔ縁取り文字描画 PARTNER_INFO_LV_X PARTNER_INFO_LV_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_LV 保持
    Font INFO_FONT_SIZE ゴシック
    Call ｋａｔ縁取り文字描画 (PARTNER_INFO_CLASS_X - TextWidth(INFO_TEXT_CLASS)) PARTNER_INFO_CLASS_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_CLASS 保持
    Font INFO_FONT_SIZE ゴシック
    Call ｋａｔ縁取り文字描画 (PARTNER_INFO_WEAPON_X - TextWidth(INFO_TEXT_WEAPON)) PARTNER_INFO_WEAPON_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_WEAPON 保持
    Call ｋａｔ縁取り文字描画 PARTNER_INFO_EQUIP_X PARTNER_INFO_EQUIP_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_EQUIP_FRAME_WIDTH INFO_FONT_EQUIP_FRAME_COLOR INFO_TEXT_EQUIP 保持
    Call ｋａｔ縁取り文字描画 PARTNER_INFO_BAG_X PARTNER_INFO_BAG_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_BAG_FRAME_WIDTH INFO_FONT_BAG_FRAME_COLOR INFO_TEXT_BAG 保持
    
    //対象ユニット情報描画
    If Info(パイロット, 対象パイロット, グラフィック) != "-.bmp" Then
        PaintPicture ("Pilot\" & Info(パイロット, 対象パイロット, グラフィック)) (TARGET_FACE_WINDOW_DX + TARGET_FACE_WINDOW_FRAME_WIDTH) (TARGET_FACE_WINDOW_DY + TARGET_FACE_WINDOW_FRAME_WIDTH) 64 64 保持
    EndIf
    Font FONT_SIZE ゴシック Regular
    Call ｋａｔ縁取り文字描画 (TARGET_NAME_X - TextWidth(Info(パイロット, 対象パイロット, 愛称))) TARGET_NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Info(パイロット, 対象パイロット, 愛称) Regular 保持
    Font FONT_SIZE ゴシック Regular
    Call ｋａｔ縁取り文字描画 (TARGET_LV_X - TextWidth(Wide(Info(パイロット, 対象パイロット, レベル)))) TARGET_LV_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(パイロット, 対象パイロット, レベル)) Regular 保持
    If Info(ユニット, 対象ユニットＩＤ, グラフィック) != "-.bmp" Then
        PaintPicture ("Unit\" & Info(ユニット, 対象ユニットＩＤ, グラフィック)) TARGET_CLASS_X TARGET_CLASS_Y 透過 #FFFFFF 保持
    EndIf
    Call ｋａｔ縁取り文字描画 TARGET_WEAPON_X TARGET_WEAPON_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Info(ユニット, 対象ユニットＩＤ, 特殊能力データ, 武器クラス) Regular 保持
    
    //相手ユニット情報描画
    If Info(パイロット, PilotID(partnerUnitID), グラフィック) != "-.bmp" Then
        PaintPicture ("Pilot\" & Info(パイロット, PilotID(partnerUnitID), グラフィック)) (PARTNER_FACE_WINDOW_DX + PARTNER_FACE_WINDOW_FRAME_WIDTH) (PARTNER_FACE_WINDOW_DY + PARTNER_FACE_WINDOW_FRAME_WIDTH) 64 64 保持
    EndIf
    Font FONT_SIZE ゴシック Regular
    Call ｋａｔ縁取り文字描画 (PARTNER_NAME_X - TextWidth(Info(パイロット, PilotID(partnerUnitID), 愛称))) PARTNER_NAME_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Info(パイロット, PilotID(partnerUnitID), 愛称) Regular 保持
    Font FONT_SIZE ゴシック Regular
    Call ｋａｔ縁取り文字描画 (PARTNER_LV_X - TextWidth(Wide(Info(パイロット, PilotID(partnerUnitID), レベル)))) PARTNER_LV_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Wide(Info(パイロット, PilotID(partnerUnitID), レベル)) Regular 保持
    If Info(ユニット, partnerUnitID, グラフィック) != "-.bmp" Then
        PaintPicture ("Unit\" & Info(ユニット, partnerUnitID, グラフィック)) PARTNER_CLASS_X PARTNER_CLASS_Y 透過 #FFFFFF 保持
    EndIf
    Font FONT_SIZE ゴシック
    Call ｋａｔ縁取り文字描画 (PARTNER_WEAPON_X - TextWidth(Info(ユニット, partnerUnitID, 特殊能力データ, 武器クラス))) PARTNER_WEAPON_Y FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR Info(ユニット, partnerUnitID, 特殊能力データ, 武器クラス) Regular 保持
    
    //対象ユニットアイテム情報
    Local targetEquipItem
    Set targetEquipItem 装備中武器番号取得(対象ユニットＩＤ)
    Local targetEquipItemNum
    Set targetEquipItemNum 装備中アイテム番号取得(対象ユニットＩＤ)
    Local targetEquipItemName
    Set targetEquipItemName Info(ユニット, 対象ユニットＩＤ, 武器, targetEquipItem)
    Local targetEquipItemImage
    Local targetEquipItemProperty
    Local targetEquipItemStock
    If targetEquipItemName != "" Then
        Set targetEquipItemImage Info(ユニット, 対象ユニットＩＤ, 特殊能力解説, targetEquipItemName & "画像")
        Set targetEquipItemStock IIf(Info(ユニット, 対象ユニットＩＤ, 武器, targetEquipItem, 最大弾数) != 0, Info(ユニット, 対象ユニットＩＤ, 武器, targetEquipItem, 弾数), "∞")
    EndIf
    If targetEquipItemNum != "" Then
        Set targetEquipItemProperty Info(Info(ユニット, 対象ユニットＩＤ, アイテム, targetEquipItemNum), 解説文)
        Set targetIsEquipItem Ｐ−Ｄｅ＝ＤEQUIP_ITEM
    EndIf
    //装備中のアイテムを除いたアイテムリスト作成
    Local itemList
    Set itemList ""
    Local targetItemImageList
    Set targetItemImageList ""
    Local targetItemPropertyList
    Set targetItemPropertyList ""
    Local targetItemStockList
    Set targetItemStockList ""
    For i = 1 To Info(ユニット, 対象ユニットＩＤ, アイテム数)
        //非表示のアイテムはスキップ
        If Info(Info(ユニット, 対象ユニットＩＤ, アイテム, i), 装備個所) = "非表示" Then
            Skip
        EndIf
        //装備アイテムはスキップ
        If i = targetEquipItemNum Then
            Skip
        EndIf
        
        Set itemList (itemList & Info(ユニット, 対象ユニットＩＤ, アイテム, i) & " ")
        If Info(ユニット, 対象ユニットＩＤ, 特殊能力所有, Info(ユニット, 対象ユニットＩＤ, アイテム, i) & "画像") = 1 Then
            Set targetItemImageList (targetItemImageList & (Info(ユニット, 対象ユニットＩＤ, 特殊能力解説, Info(ユニット, 対象ユニットＩＤ, アイテム, i) & "画像")) & ",")
        Else
            Set targetItemImageList (targetItemImageList & ",")
        EndIf
        Set targetItemPropertyList (targetItemPropertyList & Info(Info(ユニット, 対象ユニットＩＤ, アイテム, i), 解説文) & ",")
        Set targetItemStockList (targetItemStockList & アイテム残り回数取得(対象ユニットＩＤ, i) & ",")
    Next
    //リストから配列へ
    Array targetBag itemList " "
    Array targetItemImageArr targetItemImageList ","
    Array targetItemPropertyArr targetItemPropertyList ","
    Array targetItemStockArr targetItemStockList ","
    UnSet targetBag[Count(targetBag)]
    UnSet targetItemImageArr[Count(targetItemImageArr)]
    UnSet targetItemPropertyArr[Count(targetItemPropertyArr)]
    UnSet targetItemStockArr[Count(targetItemStockArr)]
    
    //相手ユニットアイテム情報
    Local partnerEquipItem
    Set partnerEquipItem 装備中武器番号取得(partnerUnitID)
    Local partnerEquipItemNum
    Set partnerEquipItemNum 装備中アイテム番号取得(partnerUnitID)
    Local partnerEquipItemName
    Set partnerEquipItemName Info(ユニット, partnerUnitID, 武器, partnerEquipItem)
    Local partnerEquipItemImage
    Local partnerEquipItemProperty
    Local partnerEquipItemStock
    If partnerEquipItemName != "" Then
        Set partnerEquipItemImage Info(ユニット, partnerUnitID, 特殊能力解説, partnerEquipItemName & "画像")
        Set partnerEquipItemStock IIf(Info(ユニット, partnerUnitID, 武器, partnerEquipItem, 最大弾数) != 0, Info(ユニット, partnerUnitID, 武器, partnerEquipItem, 弾数), "∞")
    EndIf
    If partnerEquipItemNum != "" Then
        Set partnerEquipItemProperty Info(Info(ユニット, partnerUnitID, アイテム, partnerEquipItemNum), 解説文)
        Set partnerIsEquipItem Ｐ−Ｄｅ＝ＤEQUIP_ITEM
    EndIf
    //装備中のアイテムを除いたアイテムリスト作成
    Local itemList
    Set itemList ""
    Local partnerItemImageList
    Set partnerItemImageList ""
    Local partnerItemPropertyList
    Set partnerItemPropertyList ""
    Local partnerItemStockList
    Set partnerItemStockList ""
    For i = 1 To Info(ユニット, partnerUnitID, アイテム数)
        //非表示のアイテムはスキップ
        If Info(Info(ユニット, partnerUnitID, アイテム, i), 装備個所) = "非表示" Then
            Skip
        EndIf
        //装備アイテムはスキップ
        If i = partnerEquipItemNum Then
            Skip
        EndIf
        
        Set itemList (itemList & Info(ユニット, partnerUnitID, アイテム, i) & " ")
        If Info(ユニット, partnerUnitID, 特殊能力所有, Info(ユニット, partnerUnitID, アイテム, i) & "画像") = 1 Then
            Set partnerItemImageList (partnerItemImageList & (Info(ユニット, partnerUnitID, 特殊能力解説, Info(ユニット, partnerUnitID, アイテム, i) & "画像")) & ",")
        Else
            Set partnerItemImageList (partnerItemImageList & ",")
        EndIf
        Set partnerItemPropertyList (partnerItemPropertyList & Info(Info(ユニット, partnerUnitID, アイテム, i), 解説文) & ",")
        Set partnerItemStockList (partnerItemStockList & アイテム残り回数取得(partnerUnitID, i) & ",")
    Next
    //リストから配列へ
    Array partnerBag itemList " "
    Array partnerItemImageArr partnerItemImageList ","
    Array partnerItemPropertyArr partnerItemPropertyList ","
    Array partnerItemStockArr partnerItemStockList ","
    UnSet partnerBag[Count(partnerBag)]
    UnSet partnerItemImageArr[Count(partnerItemImageArr)]
    UnSet partnerItemPropertyArr[Count(partnerItemPropertyArr)]
    UnSet partnerItemStockArr[Count(partnerItemStockArr)]
    
    //アイテム交換実行
    Local fTargetEquipReDraw
    Set fTargetEquipReDraw
    Local fTargetBagReDraw
    Set fTargetBagReDraw
    Local fPartnerEquipReDraw
    Set fPartnerEquipReDraw
    Local fPartnerBagReDraw
    Set fPartnerBagReDraw
    
    Local fTargetNoNameHotPointCreatable
    Local fPartnerNoNameHotPointCreatable
    Local fTargetEquipHotPointCreatable
    Local fPartnerEquipHotPointCreatable
    Local selectedItemName
    Local selectedItemImage
    Local selectedItemProperty
    Local selectedItemStock
    Local targetPage
    Set targetPage 0
    Local partnerPage
    Set partnerPage 0
    Local fTrade
    Local clicked
    Local fEquipTrade
    Local fRunning
    Set fRunning
    Do
        //描画
        If fTargetEquipReDraw Then
            ClearObj et
            Call Ｐ−Ｄｅ＝Ｄ装備武器描画 対象ユニットＩＤ targetEquipItemName targetEquipItemImage targetEquipItemProperty targetEquipItemStock fTargetEquipHotPointCreatable
            Set fTargetEquipReDraw ""
        EndIf
        
        If fTargetBagReDraw Then
            For i = 1 To ITEM_NUM_A_PAGE
                ClearObj ("t" & i)
                ClearObj ("t0")
                ClearObj (PAGE_NEXT & "t")
                ClearObj (PAGE_PREV & "t")
            Next
            Call Ｐ−Ｄｅ＝Ｄアイテムリスト描画 対象ユニットＩＤ targetPage fTargetNoNameHotPointCreatable
            Set fTargetBagReDraw ""
        EndIf
        
        If fPartnerEquipReDraw Then
            ClearObj ep
            Call Ｐ−Ｄｅ＝Ｄ装備武器描画 partnerUnitID partnerEquipItemName partnerEquipItemImage partnerEquipItemProperty partnerEquipItemStock fPartnerEquipHotPointCreatable
            Set fpartnerEquipReDraw ""
        EndIf
        
        If fPartnerBagReDraw Then
            For i = 1 To ITEM_NUM_A_PAGE
                ClearObj ("p" & i)
                ClearObj ("p0")
                ClearObj (PAGE_NEXT & "p")
                ClearObj (PAGE_PREV & "p")
            Next
            Call Ｐ−Ｄｅ＝Ｄアイテムリスト描画 partnerUnitID partnerPage fPartnerNoNameHotPointCreatable
            Set fPartnerBagReDraw ""
        EndIf
        
        Refresh
        
        Wait Click
        If 選択 = "" Then
            If clicked = "" Then
                Ask "交換を終了しますか？移動後の場合も続けて攻撃ができます。交換がなければ未行動" キャンセル可    
                    はい
                    いいえ
                End
                If 選択 = 1 Then
                    UnSet fRunning
                EndIf
            //アイテムの選択をキャンセル
            Else
                Set selectedItemName ""
                Set selectedItemImage ""
                Set selectedItemProperty ""
                Set selectedItemStock ""
                Set selectedIndex ""
                Set clicked ""
                
                ClearPicture TARGET_HOTPOINT_X TARGET_HOTPOINT_Y (PARTNER_HOTPOINT_X + PARTNER_HOTPOINT_WIDTH) (TARGET_WINDOW_DY + TARGET_WINDOW_DH)
                Local fTargetBagReDraw
                Set fTargetBagReDraw
                Local fPartnerBagReDraw
                Set fPartnerBagReDraw
            EndIf
        Else
            Switch Left(選択, 1)
            Case "t"
                Switch Left(clicked, 1)
                Case "p"
                    //相手→対象アイテム譲渡
                    If Mid(選択, 2, 1) = "0" Then
                        //バッグにアイテムを追加
                        UnSet element
                        Local element = (Count(targetBag) + 1)
                        Set targetBag[element] selectedItemName
                        Set targetItemImageArr[element] selectedItemImage
                        Set targetItemPropertyArr[element] selectedItemProperty
                        Set targetItemStockArr[element] selectedItemStock
                        //アイテム付け替え
                        FERemoveItem partnerUnitID selectedItemName selectedItemStock
                        Item selectedItemName
                        FEEquip 対象ユニットＩＤ selectedItemName selectedItemStock
                        //渡した側のバッグからアイテムを削除
                        For i = selectedIndex To (Count(partnerBag) - 1)
                            Set partnerBag[i] partnerBag[(i + 1)]
                            Set partnerItemImageArr[i] partnerItemImageArr[(i + 1)]
                            Set partnerItemPropertyArr[i] partnerItemPropertyArr[(i + 1)]
                            Set partnerItemStockArr[i] partnerItemStockArr[(i + 1)]
                        Next
                        UnSet partnerBag[Count(partnerBag)]
                        UnSet partnerItemImageArr[Count(partnerItemImageArr)]
                        UnSet partnerItemPropertyArr[Count(partnerItemPropertyArr)]
                        UnSet partnerItemStockArr[Count(partnerItemStockArr)]
                    //相手⇔対象アイテム交換
                    Else
                        UnSet element
                        Local element = (Mid(選択, 2) + targetPage * ITEM_NUM_A_PAGE)
                        Set partnerBag[selectedIndex] targetBag[element]
                        Set partnerItemImageArr[selectedIndex] targetItemImageArr[element]
                        Set partnerItemPropertyArr[selectedIndex] targetItemPropertyArr[element]
                        Set partnerItemStockArr[selectedIndex] targetItemStockArr[element]
                        Set targetBag[element] selectedItemName
                        Set targetItemImageArr[element] selectedItemImage
                        Set targetItemPropertyArr[element] selectedItemProperty
                        Set targetItemStockArr[element] selectedItemStock
                        //アイテム付け替え
                        FERemoveItem partnerUnitID selectedItemName selectedItemStock
                        FERemoveItem 対象ユニットＩＤ partnerBag[selectedIndex] partnerItemStockArr[selectedIndex]
                        Item partnerBag[selectedIndex]
                        FEEquip partnerUnitID partnerBag[selectedIndex]  partnerItemStockArr[selectedIndex]
                        Item selectedItemName
                        FEEquip 対象ユニットＩＤ selectedItemName selectedItemStock
                    EndIf
                    
                    Set selectedItemName ""
                    Set selectedItemImage ""
                    Set selectedItemProperty ""
                    Set selectedItemStock ""
                    Set selectedIndex ""
                    Set clicked ""
                    
                    UnSet fTrade
                    Local fTrade = 1
                    
                    ClearPicture TARGET_HOTPOINT_X TARGET_HOTPOINT_Y (PARTNER_HOTPOINT_X + PARTNER_HOTPOINT_WIDTH) (TARGET_WINDOW_DY + TARGET_WINDOW_DH)
                    Local fTargetBagReDraw
                    Set fTargetBagReDraw
                    Local fPartnerBagReDraw
                    Set fPartnerBagReDraw
                //対象アイテム選択
                Case Else
                    ClearPicture TARGET_HOTPOINT_X TARGET_HOTPOINT_Y (TARGET_HOTPOINT_X + TARGET_HOTPOINT_WIDTH) (TARGET_HOTPOINT_Y + ITEM_HEIGHT * ITEM_NUM_A_PAGE)
                    Local sw = TARGET_HOTPOINT_WIDTH + (4 - TARGET_HOTPOINT_WIDTH Mod 4)
                    Local sh = TARGET_HOTPOINT_HEIGHT + (4 - TARGET_HOTPOINT_HEIGHT Mod 4)
                    PaintPicture WINDOW_BACKGROUND_IMAGE TARGET_HOTPOINT_X (TARGET_HOTPOINT_Y + ITEM_HEIGHT * (Mid(選択, 2) - 1)) TARGET_HOTPOINT_WIDTH TARGET_HOTPOINT_HEIGHT TARGET_HOTPOINT_X (TARGET_HOTPOINT_Y + ITEM_HEIGHT * (Mid(選択, 2) - 1)) sw sh 明
                    Local fTargetEquipReDraw
                    Set fTargetEquipReDraw
                    Local fPartnerEquipReDraw
                    Set fPartnerEquipReDraw
                    Local fTargetBagReDraw
                    Set fTargetBagReDraw
                    Local 
                    Local clicked
                    Set clicked 選択
                    
                    //アイテムの情報を格納
                    UnSet selectedIndex
                    Local selectedIndex = (Mid(選択, 2) + targetPage * ITEM_NUM_A_PAGE)
                    Local selectedItemName
                    Set selectedItemName targetBag[selectedIndex]
                    Local selectedItemImage
                    Set selectedItemImage targetItemImageArr[selectedIndex]
                    Local selectedItemProperty
                    Set selectedItemProperty targetItemPropertyArr[selectedIndex]
                    Local selectedItemStock
                    Set selectedItemStock targetItemStockArr[selectedIndex]
                EndSw
            Case "p"
                Switch Left(clicked, 1)
                Case "t"
                //対象→相手アイテム譲渡
                    If Mid(選択, 2) = "0" Then
                        //バッグにアイテムを追加
                        UnSet element
                        Local element = (Count(partnerBag) + 1)
                        Set partnerBag[element] selectedItemName
                        Set partnerItemImageArr[element] selectedItemImage
                        Set partnerItemPropertyArr[element] selectedItemProperty
                        Set partnerItemStockArr[element] selectedItemStock
                        //アイテム付け替え
                        FERemoveItem 対象ユニットＩＤ selectedItemName selectedItemStock
                        Item selectedItemName
                        FEEquip partnerUnitID selectedItemName selectedItemStock
                        //渡した側のバッグからアイテムを削除
                        For i = selectedIndex To (Count(targetBag) - 1)
                            Set targetBag[i] targetBag[(i + 1)]
                            Set targetItemImageArr[i] targetItemImageArr[(i + 1)]
                            Set targetItemPropertyArr[i] targetItemPropertyArr[(i + 1)]
                            Set targetItemStockArr[i] targetItemStockArr[(i + 1)]
                        Next
                        UnSet targetBag[Count(targetBag)]
                        UnSet targetItemImageArr[Count(targetItemImageArr)]
                        UnSet targetItemPropertyArr[Count(targetItemPropertyArr)]
                        UnSet targetItemStockArr[Count(targetItemStockArr)]
                    //対象⇔相手アイテム交換
                    Else
                        UnSet element
                        Local element = (Mid(選択, 2) + partnerPage * ITEM_NUM_A_PAGE)
                        Set targetBag[selectedIndex] partnerBag[element]
                        Set targetItemImageArr[selectedIndex] partnerItemImageArr[element]
                        Set targetItemPropertyArr[selectedIndex] partnerItemPropertyArr[element]
                        Set targetItemStockArr[selectedIndex] partnerItemStockArr[element]
                        Set partnerBag[element] selectedItemName
                        Set partnerItemImageArr[element] selectedItemImage
                        Set partnerItemPropertyArr[element] selectedItemProperty
                        Set partnerItemStockArr[element] selectedItemStock
                        //アイテム付け替え
                        FERemoveItem 対象ユニットＩＤ selectedItemName selectedItemStock
                        FERemoveItem partnerUnitID targetBag[selectedIndex] targetItemStockArr[selectedIndex]
                        Item targetBag[selectedIndex]
                        FEEquip 対象ユニットＩＤ targetBag[selectedIndex] targetItemStockArr[selectedIndex]
                        Item selectedItemName
                        FEEquip partnerUnitID selectedItemName selectedItemStock
                    EndIf
                    Set selectedItemName ""
                    Set selectedItemImage ""
                    Set selectedItemProperty ""
                    Set selectedItemStock ""
                    Set selectedIndex ""
                    Set clicked ""
                    
                    UnSet fTrade
                    Local fTrade = 1
                    
                    ClearPicture TARGET_HOTPOINT_X TARGET_HOTPOINT_Y (PARTNER_HOTPOINT_X + PARTNER_HOTPOINT_WIDTH) (TARGET_WINDOW_DY + TARGET_WINDOW_DH)
                    Local fTargetBagReDraw
                    Set fTargetBagReDraw
                    Local fPartnerBagReDraw
                    Set fPartnerBagReDraw
                //相手アイテム選択
                Case Else
                    ClearPicture PARTNER_HOTPOINT_X PARTNER_HOTPOINT_Y (PARTNER_HOTPOINT_X + PARTNER_HOTPOINT_WIDTH) (TARGET_HOTPOINT_Y + ITEM_HEIGHT * 3)
                    Local sw = PARTNER_HOTPOINT_WIDTH + (4 - PARTNER_HOTPOINT_WIDTH Mod 4)
                    Local sh = PARTNER_HOTPOINT_HEIGHT + (4 - PARTNER_HOTPOINT_HEIGHT Mod 4)
                    PaintPicture WINDOW_BACKGROUND_IMAGE PARTNER_HOTPOINT_X (PARTNER_HOTPOINT_Y + ITEM_HEIGHT * (Mid(選択, 2) - 1)) PARTNER_HOTPOINT_WIDTH PARTNER_HOTPOINT_HEIGHT PARTNER_HOTPOINT_X (PARTNER_HOTPOINT_Y + ITEM_HEIGHT * (Mid(選択, 2) - 1)) sw sh 明
                    Local fTargetEquipReDraw
                    Set fTargetEquipReDraw
                    Local fPartnerEquipReDraw
                    Set fPartnerEquipReDraw
                    Local fPartnerBagReDraw
                    Set fPartnerBagReDraw
                    Local clicked
                    Set clicked 選択
                    
                    //アイテムの情報を格納
                    UnSet selectedIndex
                    Local selectedIndex = (Mid(選択, 2) + partnerPage * ITEM_NUM_A_PAGE)
                    Local selectedItemName
                    Set selectedItemName partnerBag[selectedIndex]
                    Local selectedItemImage
                    Set selectedItemImage partnerItemImageArr[selectedIndex]
                    Local selectedItemProperty
                    Set selectedItemProperty partnerItemPropertyArr[selectedIndex]
                    Local selectedItemStock
                    Set selectedItemStock partnerItemStockArr[selectedIndex]
                EndSw
            Case "e"
                If Info(selectedItemName, アイテムクラス) != "汎用" Then
                    //対象装備切り替え
                    If Mid(選択, 2) = "t" Then
                        //対象→対象装備
                        If Left(clicked, 1) = "t" Then
                            //装備できるか確認
                            If Info(ユニット, 対象ユニットＩＤ, 武器, selectedItemName, 使用可) = 1 Then
                                If targetIsEquipItem = Ｐ−Ｄｅ＝ＤEQUIP_ITEM Then
                                    Set targetBag[selectedIndex] targetEquipItemName
                                    Set targetItemImageArr[selectedIndex] targetEquipItemImage
                                    Set targetItemPropertyArr[selectedIndex] targetEquipItemProperty
                                    Set targetItemStockArr[selectedIndex] targetEquipItemStock
                                Else
                                    Set targetBag[selectedIndex] ""
                                EndIf
                                Set targetEquipItemName selectedItemName
                                Set targetEquipItemImage selectedItemImage
                                Set targetEquipItemProperty selectedItemProperty
                                Set targetEquipItemStock selectedItemStock
                                //元々装備欄が空ならばバッグからアイテムを削除
                                If targetBag[selectedIndex] = "" Then
                                    For i = selectedIndex To (Count(targetBag) - 1)
                                        Set targetBag[i] targetBag[(i + 1)]
                                        Set targetItemImageArr[i] targetItemImageArr[(i + 1)]
                                        Set targetItemPropertyArr[i] targetItemPropertyArr[(i + 1)]
                                        Set targetItemStockArr[i] targetItemStockArr[(i + 1)]
                                    Next
                                    UnSet targetBag[Count(targetBag)]
                                    UnSet targetItemImageArr[Count(targetItemImageArr)]
                                    UnSet targetItemPropertyArr[Count(targetItemPropertyArr)]
                                    UnSet targetItemStockArr[Count(targetItemStockArr)]
                                EndIf
                                //装備切り替え
                                For i = 1 To Info(ユニット, 対象ユニットＩＤ, 武器数)
                                    Local convertedItemStock
                                    Set convertedItemStock IIf(targetEquipItemStock != "∞", targetEquipItemStock, 0)
                                    If (Info(ユニット, 対象ユニットＩＤ, 武器, i) = targetEquipItemName) And (Info(ユニット, 対象ユニットＩＤ, 武器, i, 弾数) = convertedItemStock) Then
                                        Call Ｐ−Ｄｅ＝Ｄ武器持ち替え 対象ユニットＩＤ i
                                        Break
                                    EndIf
                                Next
                                
                                ClearPicture TARGET_EQUIP_ITEM_ICON_X TARGET_EQUIP_ITEM_ICON_Y (TARGET_EQUIP_ITEM_ICON_X + PARTNER_HOTPOINT_WIDTH) (TARGET_EQUIP_ITEM_ICON_Y + PARTNER_HOTPOINT_HEIGHT)
                                ClearPicture TARGET_HOTPOINT_X TARGET_HOTPOINT_Y (TARGET_HOTPOINT_X + TARGET_HOTPOINT_WIDTH) (TARGET_WINDOW_DY + TARGET_WINDOW_DH)
                                Local fTargetBagReDraw
                                Set fTargetBagReDraw
                            Else
                                
                            EndIf
                        //相手→対象装備
                        Else
                            //装備できるか確認
                            If targetIsEquipItem = Ｐ−Ｄｅ＝ＤEQUIP_ITEM Then
                                FERemoveItem 対象ユニットＩＤ targetEquipItemName targetEquipItemStock
                            EndIf
                            Item selectedItemName
                            FEEquip 対象ユニットＩＤ selectedItemName selectedItemStock
                            If Info(ユニット, 対象ユニットＩＤ, 武器, selectedItemName, 使用可) = 1 Then
                                If targetIsEquipItem = Ｐ−Ｄｅ＝ＤEQUIP_ITEM Then
                                    Set partnerBag[selectedIndex] targetEquipItemName
                                    Set partnerItemImageArr[selectedIndex] targetEquipItemImage
                                    Set partnerItemPropertyArr[selectedIndex] targetEquipItemProperty
                                    Set partnerItemStockArr[selectedIndex] targetEquipItemStock
                                Else
                                    Set partnerBag[selectedIndex] ""
                                EndIf
                                Set targetEquipItemName selectedItemName
                                Set targetEquipItemImage selectedItemImage
                                Set targetEquipItemProperty selectedItemProperty
                                Set targetEquipItemStock selectedItemStock
                                //交換
                                FERemoveItem partnerUnitID targetEquipItemName targetEquipItemStock
                                If partnerBag[selectedIndex] != "" Then
                                    Item partnerBag[selectedIndex]
                                    FEEquip partnerUnitID partnerBag[selectedIndex] partnerItemStockArr[selectedIndex]
                                //譲渡
                                Else
                                    //渡した側のバッグからアイテムを削除
                                    For i = selectedIndex To (Count(partnerBag) - 1)
                                        Set partnerBag[i] partnerBag[(i + 1)]
                                        Set partnerItemImageArr[i] partnerItemImageArr[(i + 1)]
                                        Set partnerItemPropertyArr[i] partnerItemPropertyArr[(i + 1)]
                                        Set partnerItemStockArr[i] partnerItemStockArr[(i + 1)]
                                    Next
                                    UnSet partnerBag[Count(partnerBag)]
                                    UnSet partnerItemImageArr[Count(partnerItemImageArr)]
                                    UnSet partnerItemPropertyArr[Count(partnerItemPropertyArr)]
                                    UnSet partnerItemStockArr[Count(partnerItemStockArr)]
                                EndIf
                                //装備切り替え
                                For i = 1 To Info(ユニット, 対象ユニットＩＤ, 武器数)
                                    Local convertedItemStock
                                    Set convertedItemStock IIf(targetEquipItemStock != "∞", targetEquipItemStock, 0)
                                    If (Info(ユニット, 対象ユニットＩＤ, 武器, i) = targetEquipItemName) And (Info(ユニット, 対象ユニットＩＤ, 武器, i, 弾数) = convertedItemStock) Then
                                        Call Ｐ−Ｄｅ＝Ｄ武器持ち替え 対象ユニットＩＤ i
                                        Break
                                    EndIf
                                Next
                                
                                ClearPicture TARGET_EQUIP_ITEM_ICON_X TARGET_EQUIP_ITEM_ICON_Y (TARGET_EQUIP_ITEM_ICON_X + PARTNER_HOTPOINT_WIDTH) (TARGET_EQUIP_ITEM_ICON_Y + PARTNER_HOTPOINT_HEIGHT)
                                ClearPicture PARTNER_HOTPOINT_X PARTNER_HOTPOINT_Y (PARTNER_HOTPOINT_X + PARTNER_HOTPOINT_WIDTH) (PARTNER_WINDOW_DY + PARTNER_WINDOW_DH)
                                Local fPartnerBagReDraw
                                Set fPartnerBagReDraw
                                
                                UnSet fTrade
                                Local fTrade = 1
                            //装備失敗
                            Else
                                FERemoveItem 対象ユニットＩＤ selectedItemName selectedItemStock
                                If targetIsEquipItem = Ｐ−Ｄｅ＝ＤEQUIP_ITEM Then
                                    Item targetEquipItemName
                                    FEEquip 対象ユニットＩＤ targetEquipItemName targetEquipItemStock
                                    SetSkill PilotID(対象ユニットＩＤ) 装備中武器名 -1 (targetEquipItemName & 装備)
                                    Call 装備残更新 対象ユニットＩＤ targetEquipItemName targetEquipItemStock
                                EndIf
                            EndIf
                        EndIf
                        
                        If Info(ユニット, 対象ユニットＩＤ, 武器, selectedItemName, 使用可) = 1 Then
                            Set targetIsEquipItem Ｐ−Ｄｅ＝ＤEQUIP_ITEM
                            Local fTargetEquipReDraw
                            Set fTargetEquipReDraw
                            
                            Set selectedItemName ""
                            Set selectedItemImage ""
                            Set selectedItemProperty ""
                            Set selectedItemStock ""
                            Set selectedIndex ""
                            Set clicked ""
                        EndIf
                    //相手装備切り替え
                    Else
                        //対象→相手装備
                        If Left(clicked, 1) = "t" Then
                            //装備できるか確認
                            If partnerIsEquipItem = Ｐ−Ｄｅ＝ＤEQUIP_ITEM Then
                                FERemoveItem partnerUnitID partnerEquipItemName partnerEquipItemStock
                            EndIf
                            Item selectedItemName
                            FEEquip partnerUnitID selectedItemName selectedItemStock
                            If Info(ユニット, partnerUnitID, 武器, selectedItemName, 使用可) = 1 Then
                                If partnerIsEquipItem = Ｐ−Ｄｅ＝ＤEQUIP_ITEM Then
                                    Set targetBag[selectedIndex] partnerEquipItemName
                                    Set targetItemImageArr[selectedIndex] partnerEquipItemImage
                                    Set targetItemPropertyArr[selectedIndex] partnerEquipItemProperty
                                    Set targetItemStockArr[selectedIndex] partnerEquipItemStock
                                Else
                                    Set targetBag[selectedIndex] ""
                                EndIf
                                Set partnerEquipItemName selectedItemName
                                Set partnerEquipItemImage selectedItemImage
                                Set partnerEquipItemProperty selectedItemProperty
                                Set partnerEquipItemStock selectedItemStock
                                //交換
                                FERemoveItem 対象ユニットＩＤ partnerEquipItemName partnerEquipItemStock
                                If targetBag[selectedIndex] != "" Then
                                    Item targetBag[selectedIndex]
                                    FEEquip 対象ユニットＩＤ targetBag[selectedIndex] targetItemStockArr[selectedIndex]
                                //譲渡
                                Else
                                    //渡した側のバッグからアイテムを削除
                                    For i = selectedIndex To (Count(targetBag) - 1)
                                        Set targetBag[i] targetBag[(i + 1)]
                                        Set targetItemImageArr[i] targetItemImageArr[(i + 1)]
                                        Set targetItemPropertyArr[i] targetItemPropertyArr[(i + 1)]
                                        Set targetItemStockArr[i] targetItemStockArr[(i + 1)]
                                    Next
                                    UnSet targetBag[Count(targetBag)]
                                    UnSet targetItemImageArr[Count(targetItemImageArr)]
                                    UnSet targetItemPropertyArr[Count(targetItemPropertyArr)]
                                    UnSet targetItemStockArr[Count(targetItemStockArr)]
                                EndIf
                                //装備切り替え
                                For i = 1 To Info(ユニット, partnerUnitID, 武器数)
                                    Local convertedItemStock
                                    Set convertedItemStock IIf(partnerEquipItemStock != "∞", partnerEquipItemStock, 0)
                                    If (Info(ユニット, partnerUnitID, 武器, i) = partnerEquipItemName) And (Info(ユニット, partnerUnitID, 武器, i, 弾数) = convertedItemStock) Then
                                        Call Ｐ−Ｄｅ＝Ｄ武器持ち替え partnerUnitID i
                                        Break
                                    EndIf
                                Next
                                
                                ClearPicture PARTNER_EQUIP_ITEM_ICON_X PARTNER_EQUIP_ITEM_ICON_Y (PARTNER_EQUIP_ITEM_ICON_X + PARTNER_HOTPOINT_WIDTH) (PARTNER_EQUIP_ITEM_ICON_Y + PARTNER_HOTPOINT_HEIGHT)
                                ClearPicture TARGET_HOTPOINT_X TARGET_HOTPOINT_Y (TARGET_HOTPOINT_X + TARGET_HOTPOINT_WIDTH) (TARGET_WINDOW_DY + TARGET_WINDOW_DH)
                                Local fTargetBagReDraw
                                Set fTargetBagReDraw
                                
                                UnSet fTrade
                                Local fTrade = 1
                            //装備失敗
                            Else
                                FERemoveItem partnerUnitID selectedItemName selectedItemStock
                                If partnerIsEquipItem = Ｐ−Ｄｅ＝ＤEQUIP_ITEM Then
                                    Item partnerEquipItemName
                                    FEEquip partnerUnitID partnerEquipItemName partnerEquipItemStock
                                    SetSkill PilotID(partnerUnitID) 装備中武器名 -1 (partnerEquipItemName & 装備)
                                    Call 装備残更新 partnerUnitID partnerEquipItemName partnerEquipItemStock
                                EndIf
                            EndIf
                        //相手→相手装備
                        Else
                            //装備できるか確認
                            If Info(ユニット, partnerUnitID, 武器, selectedItemName, 使用可) = 1 Then
                                If partnerIsEquipItem = Ｐ−Ｄｅ＝ＤEQUIP_ITEM Then
                                    Set partnerBag[selectedIndex] partnerEquipItemName
                                    Set partnerItemImageArr[selectedIndex] partnerEquipItemImage
                                    Set partnerItemPropertyArr[selectedIndex] partnerEquipItemProperty
                                    Set partnerItemStockArr[selectedIndex] partnerEquipItemStock
                                Else
                                    Set partnerBag[selectedIndex] ""
                                EndIf
                                Set partnerEquipItemName selectedItemName
                                Set partnerEquipItemImage selectedItemImage
                                Set partnerEquipItemProperty selectedItemProperty
                                Set partnerEquipItemStock selectedItemStock
                                //元々装備欄が空ならばバッグからアイテムを削除
                                If partnerBag[selectedIndex] = "" Then
                                    For i = selectedIndex To (Count(partnerBag) - 1)
                                        Set partnerBag[i] partnerBag[(i + 1)]
                                        Set partnerItemImageArr[i] partnerItemImageArr[(i + 1)]
                                        Set partnerItemPropertyArr[i] partnerItemPropertyArr[(i + 1)]
                                        Set partnerItemStockArr[i] partnerItemStockArr[(i + 1)]
                                    Next
                                    UnSet partnerBag[Count(partnerBag)]
                                    UnSet partnerItemImageArr[Count(partnerItemImageArr)]
                                    UnSet partnerItemPropertyArr[Count(partnerItemPropertyArr)]
                                    UnSet partnerItemStockArr[Count(partnerItemStockArr)]
                                EndIf
                                //装備切り替え
                                For i = 1 To Info(ユニット, partnerUnitID, 武器数)
                                    Local convertedItemStock
                                    Set convertedItemStock IIf(partnerEquipItemStock != "∞", partnerEquipItemStock, 0)
                                    If (Info(ユニット, partnerUnitID, 武器, i) = partnerEquipItemName) And (Info(ユニット, partnerUnitID, 武器, i, 弾数) = convertedItemStock) Then
                                        Call Ｐ−Ｄｅ＝Ｄ武器持ち替え partnerUnitID i
                                        Break
                                    EndIf
                                Next
                                
                                ClearPicture PARTNER_EQUIP_ITEM_ICON_X PARTNER_EQUIP_ITEM_ICON_Y (PARTNER_EQUIP_ITEM_ICON_X + PARTNER_HOTPOINT_WIDTH) (PARTNER_EQUIP_ITEM_ICON_Y + PARTNER_HOTPOINT_HEIGHT)
                                ClearPicture PARTNER_HOTPOINT_X PARTNER_HOTPOINT_Y (PARTNER_HOTPOINT_X + PARTNER_HOTPOINT_WIDTH) (PARTNER_WINDOW_DY + PARTNER_WINDOW_DH)
                                Local fPartnerBagReDraw
                                Set fPartnerBagReDraw
                                
                                UnSet fTrade
                                Local fTrade = 1
                            //装備失敗
                            Else
                                
                            EndIf
                        EndIf
                        
                        If Info(ユニット, partnerUnitID, 武器, selectedItemName, 使用可) = 1 Then
                            Set partnerIsEquipItem Ｐ−Ｄｅ＝ＤEQUIP_ITEM
                            Local fPartnerEquipReDraw
                            Set fPartnerEquipReDraw
                            
                            Set selectedItemName ""
                            Set selectedItemImage ""
                            Set selectedItemProperty ""
                            Set selectedItemStock ""
                            Set selectedIndex ""
                            Set clicked ""
                        EndIf
                    EndIf
                EndIf
            Case PAGE_PREV PAGE_NEXT
                //アイテムのページを切り替え
                If Mid(選択, 2) = "t" Then
                    If Left(選択, 1) = PAGE_PREV Then
                        Incr targetPage -1
                    Else
                        Incr targetPage
                    EndIf
                    ClearPicture TARGET_HOTPOINT_X TARGET_HOTPOINT_Y (TARGET_HOTPOINT_X + TARGET_HOTPOINT_WIDTH) (TARGET_WINDOW_DY + TARGET_WINDOW_DH)
                    If clicked != "" Then
                        If Left(clicked, 1) = "t" Then
                            If ((1 + targetPage * ITEM_NUM_A_PAGE) <= selectedIndex) And (selectedIndex < (1 + (targetPage + 1) * ITEM_NUM_A_PAGE)) Then
                                PaintPicture WINDOW_BACKGROUND_IMAGE TARGET_HOTPOINT_X (TARGET_HOTPOINT_Y + ITEM_HEIGHT * (Mid(clicked, 2, 1) - 1)) TARGET_HOTPOINT_WIDTH TARGET_HOTPOINT_HEIGHT TARGET_HOTPOINT_X (TARGET_HOTPOINT_Y + ITEM_HEIGHT * (Mid(clicked, 2, 1) - 1)) sw sh 明
                            EndIf
                        EndIf
                    EndIf
                    Local fTargetBagReDraw
                    Set fTargetBagReDraw
                Else
                    If Left(選択, 1) = PAGE_PREV Then
                        Incr partnerPage -1
                    Else
                        Incr partnerPage
                    EndIf
                    ClearPicture PARTNER_HOTPOINT_X PARTNER_HOTPOINT_Y (PARTNER_HOTPOINT_X + PARTNER_HOTPOINT_WIDTH) (PARTNER_WINDOW_DY + PARTNER_WINDOW_DH)
                    If clicked != "" Then
                        If Left(clicked, 1) = "p" Then
                            If ((1 + partnerPage * ITEM_NUM_A_PAGE) <= selectedIndex) And (selectedIndex < (1 + (partnerPage + 1) * ITEM_NUM_A_PAGE)) Then
                                PaintPicture WINDOW_BACKGROUND_IMAGE PARTNER_HOTPOINT_X (PARTNER_HOTPOINT_Y + ITEM_HEIGHT * (Mid(clicked, 2, 1) - 1)) PARTNER_HOTPOINT_WIDTH PARTNER_HOTPOINT_HEIGHT PARTNER_HOTPOINT_X (PARTNER_HOTPOINT_Y + ITEM_HEIGHT * (Mid(clicked, 2, 1) - 1)) sw sh 明
                            EndIf
                        EndIf
                    EndIf
                    Local fPartnerBagReDraw
                    Set fPartnerBagReDraw
                EndIf
            EndSw
            
            //バッグの空欄が選択可能か確認
            Set fTargetNoNameHotPointCreatable ""
            Set fPartnerNoNameHotPointCreatable ""
            UnSet clickedFirst
            Local clickedFirst = Left(clicked, 1)
            //対象
            If clickedFirst != "t" Then
                UnSet tmp
                If 0 < targetIsEquipItem Then
                    Local tmp = Info(ユニット, 対象ユニットＩＤ, アイテム数)
                Else
                    Local tmp = (Info(ユニット, 対象ユニットＩＤ, アイテム数) - 1)
                EndIf
                For i = 0 To Info(ユニット, 対象ユニットＩＤ, アイテム数)
                    If (Info(Info(ユニット, 対象ユニットＩＤ, アイテム, i), 装備個所) = "非表示") Then
                        Incr tmp -1
                    EndIf
                Next
                If tmp < Info(ユニット, 対象ユニットＩＤ, 最大アイテム数) Then
                    Set fTargetNoNameHotPointCreatable
                    Set fTargetBagReDraw
                EndIf
            EndIf
                
            //相手
            If clickedFirst != "p" Then
                UnSet tmp
                If 0 < partnerIsEquipItem Then
                    Local tmp = Info(ユニット, partnerUnitID, アイテム数)
                Else
                    Local tmp = (Info(ユニット, partnerUnitID, アイテム数) - 1)
                EndIf
                For i = 0 To Info(ユニット, partnerUnitID, アイテム数)
                    If (Info(Info(ユニット, partnerUnitID, アイテム, i), 装備個所) = "非表示") Then
                        Incr tmp -1
                    EndIf
                Next
                If tmp < Info(ユニット, partnerUnitID, 最大アイテム数) Then
                    Set fPartnerNoNameHotPointCreatable
                    Set fPartnerBagReDraw
                EndIf
            EndIf
        EndIf
        
        if clicked = "" Then
            Set fTargetNoNameHotPointCreatable ""
            Set fPartnerNoNameHotPointCreatable ""
            Set fTargetEquipHotPointCreatable ""
            Set fPartnerEquipHotPointCreatable ""
            ClearObj "et"
            ClearObj "ep"
        Else
            Local fTargetEquipHotPointCreatable
            Set fTargetEquipHotPointCreatable
            Local fPartnerEquipHotPointCreatable
            Set fPartnerEquipHotPointCreatable
        EndIf
    Loop While fRunning
    
    If fTrade = 0 Then
        Cancel
    ElseIf Not キャンプ中 = 1 Then
        If Info(パイロット, 対象パイロット, 特殊能力所有, アイテム交換済) = 0 Then
            If InStr(Info(ユニット, 対象ユニットＩＤ, ユニットクラス), "騎兵") = 0 Then
                Item 移動力−１０
                Equip 対象ユニットＩＤ 移動力−１０
                Action(対象パイロット) = (Action(対象パイロット) + 1)
            EndIf
            SetSkill 対象パイロット "アイテム交換済" -1
            Set アイテム交換不可[対象パイロット]
            Set 装備変更不可[対象パイロット]
            Incr gＰ−Ｄｅ＝Ｄステータスアイテム装備数
        EndIf
		ワープ終了処理
        Call 再移動判定 
    EndIf
    ClearPicture
    ClearObj
    Redraw
EndIf
Exit


//アイテムを売買するためのショップを作成します。
ショップ作成:
Local target = Args(1)
If target = "" Then
    Set target 対象パイロット
EndIf

Set ショップ座標Ｘ[店番号] X(target)
Set ショップ座標Ｙ[店番号] Y(target)
Set ショップ店主[店番号] target
Escape target "非同期"

Incr 店番号
Set ショップ作成済
Return


//ショップに入ります。
*ユニットコマンド ショップ 味方 Call(ショップ可否):
If ショップＢＧＭ != "" Then
    StopBGM
EndIf

FadeOut
Cls
If ショップ背景 != "" Then
    PaintPicture ショップ背景 1 1 480 480 保持
    Refresh
EndIf

If ショップＢＧＭ != "" Then
    StartBGM ショップＢＧＭ
EndIf

talk 店主ＩＤ
    $(IIf(入店メッセージ[店主ＩＤ] != "", 入店メッセージ[店主ＩＤ], "いらっしゃい。何にするンだい？"))
end
Call ショップ 対象ユニットＩＤ 店主ＩＤ
If 退店メッセージ[店主ＩＤ] != "" Then
    talk 店主ＩＤ
        $(退店メッセージ[店主ＩＤ])
    end
EndIf

If ショップＢＧＭ != "" Then
    StopBGM
EndIf

Redraw 非同期
FadeIn

If ショップＢＧＭ != "" Then
    StartBGM ステージＢＧＭ
EndIf
Exit


//ショップの利用可否を調べます。
ショップ可否:
Return IIf(ショップ利用不可[対象パイロット] != 1, Call(ショップ検索), 0)


//ユニットの座標にショップがあるか調べます。
ショップ検索:
For i = 1 To Count(ショップ店主)
    If (X(対象パイロット) = ショップ座標Ｘ[i]) And (Y(対象パイロット) = ショップ座標Ｙ[i]) Then
        Set 店主ＩＤ ショップ店主[i]
        Return 1
    EndIf
Next
Return


//アイテムを売買します。
ショップ:
Local target = Args(1)
Local owner = Args(2)
Set target IIf(IsDefined(target, ユニット), UnitID(PilotID(target)), UnitID(target))
//記号定数の定義
If Ｐ−Ｄｅ＝Ｄアイテム交換初期設定 != 1 Then
    //アイテム装備
    Global Ｐ−Ｄｅ＝ＤEQUIP_ITEM
    Set Ｐ−Ｄｅ＝ＤEQUIP_ITEM 1
    //スキル装備
    Global Ｐ−Ｄｅ＝ＤEQUIP_SKILL
    Set Ｐ−Ｄｅ＝ＤEQUIP_SKILL -1
    //装備なし
    Global Ｐ−Ｄｅ＝ＤNO_EQUIP
    Set Ｐ−Ｄｅ＝ＤNO_EQUIP 0
    //初期設定完了
    Global Ｐ−Ｄｅ＝Ｄアイテム交換初期設定
    Set Ｐ−Ｄｅ＝Ｄアイテム交換初期設定
EndIf

//ウィンドウ画像
Local WINDOW_BACKGROUND_IMAGE = ウィンドウ画像
//ウィンドウ共通設定
Local WINDOW_FRAME_WIDTH = 2
//対象ユニット用ウィンドウ設定
Local TARGET_WINDOW_DX = 245
Local TARGET_WINDOW_DY = 185
Local TARGET_WINDOW_DW = 195
Local TARGET_WINDOW_DH = 226
Local CAPITAL_WINDOW_DX = 245
Local CAPITAL_WINDOW_DY = 120
Local CAPITAL_WINDOW_DW = 195
Local CAPITAL_WINDOW_DH = 50

//ショップ用ウィンドウ設定
Local SHOP_WINDOW_DX = 40
Local SHOP_WINDOW_DY = 108
Local SHOP_WINDOW_DW = 195
Local SHOP_WINDOW_DH = 303

//インフォテキスト情報
Local INFO_FONT_COLOR = #FFFFFF
Local INFO_FONT_FRAME_COLOR = #000000
Local INFO_FONT_EQUIP_FRAME_COLOR = #66CC00
Local INFO_FONT_BAG_FRAME_COLOR = #0000CC
Local INFO_FONT_SHOP_FRAME_COLOR = #0000CC
Local INFO_FONT_SIZE = 10pt
Local INFO_FONT_FRAME_WIDTH = 2
Local INFO_FONT_EQUIP_FRAME_WIDTH = 1
Local INFO_FONT_BAG_FRAME_WIDTH = 1
Local INFO_FONT_SHOP_FRAME_WIDTH = 1
Local INFO_FONT_CAPITAL_FRAME_WIDTH = 1
Local INFO_TEXT_EQUIP = "EQUIP"
Local INFO_TEXT_BAG = "BAG"
Local INFO_TEXT_SHOP = "SHOP"
Local INFO_TEXT_CAPITAL = "CAPITAL"
Local TARGET_INFO_EQUIP_X = 251
Local TARGET_INFO_EQUIP_Y = 191
Local CAPITAL_INFO_X = 251
Local CAPITAL_INFO_Y = 126
Local TARGET_INFO_BAG_X = 251
Local TARGET_INFO_BAG_Y = 240
Local SHOP_INFO_X = 46
Local SHOP_INFO_Y = 114

//テキスト情報
Local FONT_SIZE = 12pt
Local FONT_COLOR = #FFFFFF
Local FONT_FRAME_COLOR = #000000
Local FONT_FRAME_WIDTH = 1

//共通表示情報
Local ITEM_ICON_SIZE = 24
Local ITEM_NUM_A_PAGE = 3
Local ITEM_HEIGHT = 34

//ショップ側表示情報
Local SHOP_ITEM_NAME_X = 85
Local SHOP_ITEM_ICON_X = 50
Local SHOP_ITEM_ICON_Y = 130
Local SHOP_HOTPOINT_X = 46
Local SHOP_HOTPOINT_Y = 130
Local SHOP_HOTPOINT_WIDTH = 184
Local SHOP_ITEM_NUM_A_PAGE = 6

//対象ユニット用表示情報
Local TARGET_ITEM_NAME_X = 290
Local TARGET_EQUIP_ITEM_ICON_X = 255
Local TARGET_EQUIP_ITEM_ICON_Y = 207
Local CAPITAL_X = 392 //右側の座標
Local CAPITAL_Y = 147
Local CAPITAL_FONT_COLOR = #FFFFFF
Local CAPITAL_FONT_FRAME_COLOR = #000000
Local CAPITAL_FONT_SIZE = 10pt
Local CAPITAL_FONT_FRAME_WIDTH = 1

//ページ切り替えボタン
Local PAGE_PREV = "≪"
Local PAGE_NEXT = "≫"

//ホットポイント座標
Local TARGET_HOTPOINT_X = 251
Local TARGET_HOTPOINT_Y = 253
Local TARGET_HOTPOINT_WIDTH = 184
Local TARGET_HOTPOINT_HEIGHT = 42

//装備アイテム情報
Local targetEquipItemName
Local targetEquipItemImage
Local targetEquipItemProperty
Local targetIsEquipItem = Ｐ−Ｄｅ＝ＤNO_EQUIP

//ウィンドウ描画
Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE CAPITAL_WINDOW_DX CAPITAL_WINDOW_DY CAPITAL_WINDOW_DW CAPITAL_WINDOW_DH WINDOW_FRAME_WIDTH
Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE TARGET_WINDOW_DX TARGET_WINDOW_DY TARGET_WINDOW_DW TARGET_WINDOW_DH WINDOW_FRAME_WIDTH
Call ｋａｔウィンドウ描画 WINDOW_BACKGROUND_IMAGE SHOP_WINDOW_DX SHOP_WINDOW_DY SHOP_WINDOW_DW SHOP_WINDOW_DH WINDOW_FRAME_WIDTH

//インフォテキスト描画
Call ｋａｔ縁取り文字描画 CAPITAL_INFO_X CAPITAL_INFO_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_CAPITAL_FRAME_WIDTH INFO_FONT_FRAME_COLOR INFO_TEXT_CAPITAL 保持
Call ｋａｔ縁取り文字描画 TARGET_INFO_EQUIP_X TARGET_INFO_EQUIP_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_EQUIP_FRAME_WIDTH INFO_FONT_EQUIP_FRAME_COLOR INFO_TEXT_EQUIP 保持
Call ｋａｔ縁取り文字描画 TARGET_INFO_BAG_X TARGET_INFO_BAG_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_BAG_FRAME_WIDTH INFO_FONT_BAG_FRAME_COLOR INFO_TEXT_BAG 保持
Call ｋａｔ縁取り文字描画 SHOP_INFO_X SHOP_INFO_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_SHOP_FRAME_WIDTH INFO_FONT_SHOP_FRAME_COLOR INFO_TEXT_SHOP 保持

//対象ユニットアイテム情報
Local targetEquipItem
Set targetEquipItem 装備中武器番号取得(target)
Local targetEquipItemNum
Set targetEquipItemNum 装備中アイテム番号取得(target)
Local targetEquipItemName
Set targetEquipItemName Info(ユニット, target, 武器, targetEquipItem)
Local targetEquipItemImage
Local targetEquipItemProperty
Local targetEquipItemStock
Local targetEquipItemPrice
If targetEquipItemName != "" Then
    Set targetEquipItemImage Info(ユニット, target, 特殊能力解説, targetEquipItemName & "画像")
    Set targetEquipItemStock IIf(Info(ユニット, target, 武器, targetEquipItem, 最大弾数) != 0, Info(ユニット, target, 武器, targetEquipItem, 弾数), "∞")
    If Info(ユニット, target, 特殊能力レベル, targetEquipItemName & "価格") != 0 Then
        If Info(ユニット, target, 武器, targetEquipItemName, 最大弾数) = 0 Then
            Set targetEquipItemPrice (Info(ユニット, target, 特殊能力レベル, targetEquipItemName & "価格")  \ 2)
        Else
            Set targetEquipItemPrice ((Info(ユニット, target, 特殊能力レベル, targetEquipItemName & "価格") * (Info(ユニット, target, 武器, targetEquipItemName, 弾数) / Info(ユニット, target, 武器, targetEquipItemName, 最大弾数))) \ 2)
        EndIf
    Else
        Set targetEquipItemPrice "−"
    EndIf
EndIf
If targetEquipItemNum != "" Then
    Set targetEquipItemProperty Info(Info(ユニット, target, アイテム, targetEquipItemNum), 解説文)
    Set targetIsEquipItem Ｐ−Ｄｅ＝ＤEQUIP_ITEM
EndIf
//装備中のアイテムを除いたアイテムリスト作成
Local itemList
Set itemList ""
Local targetItemImageList
Set targetItemImageList ""
Local targetItemPropertyList
Set targetItemPropertyList ""
Local targetItemStockList
Set targetItemStockList ""
Local targetItemPriceList
Set targetItemPriceList ""
For i = 1 To Info(ユニット, target, アイテム数)
    //非表示のアイテムはスキップ
    If Info(Info(ユニット, target, アイテム, i), 装備個所) = "非表示" Then
        Skip
    EndIf
    //装備アイテムはスキップ
    If i = targetEquipItemNum Then
        Skip
    EndIf
    
    Set itemList (itemList & Info(ユニット, target, アイテム, i) & " ")
    If Info(ユニット, target, 特殊能力所有, Info(ユニット, target, アイテム, i) & "画像") = 1 Then
        Set targetItemImageList (targetItemImageList & (Info(ユニット, target, 特殊能力解説, Info(ユニット, target, アイテム, i) & "画像")) & ",")
    Else
        Set targetItemImageList (targetItemImageList & ",")
    EndIf
    Set targetItemPropertyList (targetItemPropertyList & Info(Info(ユニット, target, アイテム, i), 解説文) & ",")
    Set targetItemStockList (targetItemStockList & アイテム残り回数取得(target, i) & ",")
    If Info(ユニット, target, 特殊能力レベル, Info(ユニット, target, アイテム, i) & "価格") != 0 Then
        Local アイテム種別
        Set アイテム種別 Call(アイテム種別取得, target, Info(ユニット, target, アイテム, i))
        Switch アイテム種別
        Case "武器"
            If Info(ユニット, target, 武器, Info(ユニット, target, アイテム, i), 最大弾数) = 0 Then
                Set targetItemPriceList (targetItemPriceList & (Info(ユニット, target, 特殊能力レベル, Info(ユニット, target, アイテム, i)) \ 2) & ",")
            Else
                Set targetItemPriceList (targetItemPriceList & ((Info(ユニット, target, 特殊能力レベル, Info(ユニット, target, アイテム, i) & "価格") * (Info(ユニット, target, 武器, Info(ユニット, target, アイテム, i), 弾数) / Info(ユニット, target, 武器, Info(ユニット, target, アイテム, i), 最大弾数))) \ 2) & ",")
            EndIf
        Case "アビリティ"
            If Info(ユニット, target, アビリティ, Info(ユニット, target, アイテム, i), 最大使用回数) = 0 Then
                Set targetItemPriceList (targetItemPriceList & (Info(ユニット, target, 特殊能力レベル, Info(ユニット, target, アイテム, i)) \ 2) & ",")
            Else
                Set targetItemPriceList (targetItemPriceList & ((Info(ユニット, target, 特殊能力レベル, Info(ユニット, target, アイテム, i) & "価格") * (Info(ユニット, target, アビリティ, Info(ユニット, target, アイテム, i), 使用回数) / Info(ユニット, target, アビリティ, Info(ユニット, target, アイテム, i), 最大使用回数))) \ 2) & ",")
            EndIf
        Case Else
            Set targetItemPriceList (targetItemPriceList & (Info(ユニット, target, 特殊能力レベル, Info(ユニット, target, アイテム, i)) \ 2) & ",")
        EndSw
    Else
        Set targetItemPriceList (targetItemPriceList & "−" & ",")
    EndIf
Next
//リストから配列へ
Array targetBag itemList " "
Array targetItemImageArr targetItemImageList ","
Array targetItemPropertyArr targetItemPropertyList ","
Array targetItemStockArr targetItemStockList ","
Array targetItemPriceArr targetItemPriceList ","
UnSet targetBag[Count(targetBag)]
UnSet targetItemImageArr[Count(targetItemImageArr)]
UnSet targetItemPropertyArr[Count(targetItemPropertyArr)]
UnSet targetItemStockArr[Count(targetItemStockArr)]
UnSet targetItemPriceArr[Count(targetItemPriceArr)]

//ショップ情報
Local itemList
Set itemList ""
Local shopItemImageList
Set shopItemImageList ""
Local shopItemPropertyList
Set shopItemPropertyList ""
Local shopItemStockList
Set shopItemStockList ""
Local shopItemPriceList
Set shopItemPriceList ""
For i = 1 To Info(ユニット, UnitID(owner), アイテム数)
    Set itemList (itemList & Info(ユニット, UnitID(owner), アイテム, i) & " ")
    If Info(ユニット, UnitID(owner), 特殊能力所有, Info(ユニット, UnitID(owner), アイテム, i) & "画像") = 1 Then
        Set shopItemImageList (shopItemImageList & (Info(ユニット, UnitID(owner), 特殊能力解説, Info(ユニット, UnitID(owner), アイテム, i) & "画像")) & ",")
    Else
        Set shopItemImageList (shopItemImageList & ",")
    EndIf
    Set shopItemPropertyList (shopItemPropertyList & Info(Info(ユニット, UnitID(owner), アイテム, i), 解説文) & ",")
    Set shopItemStockList (shopItemStockList & アイテム残り回数取得(UnitID(owner), i) & ",")
    If Info(ユニット, UnitID(owner), 特殊能力レベル, Info(ユニット, UnitID(owner), アイテム, i) & "価格") != 0 Then
        Set shopItemPriceList (shopItemPriceList & Info(ユニット, UnitID(owner), 特殊能力レベル, Info(ユニット, UnitID(owner), アイテム, i) & "価格") & ",")
    Else
        Set shopItemPriceList (shopItemPriceList & "−" & ",")
    EndIf
Next
//リストから配列へ
Array shopBag itemList " "
Array shopItemImageArr shopItemImageList ","
Array shopItemPropertyArr shopItemPropertyList ","
Array shopItemStockArr shopItemStockList ","
Array shopItemPriceArr shopItemPriceList ","
UnSet shopBag[Count(shopBag)]
UnSet shopItemImageArr[Count(shopItemImageArr)]
UnSet shopItemPropertyArr[Count(shopItemPropertyArr)]
UnSet shopItemStockArr[Count(shopItemStockArr)]
UnSet shopItemPriceArr[Count(shopItemPriceArr)]

//アイテム交換実行
Local fShopReDraw
Set fShopReDraw
Local fTargetEquipReDraw
Set fTargetEquipReDraw
Local fTargetBagReDraw
Set fTargetBagReDraw
Local fCapitalReDraw
Set fCapitalReDraw

Local selectedItemName
Local selectedItemImage
Local selectedItemProperty
Local selectedItemStock
Local targetPage
Set targetPage 0
Local shopPage
Set shopPage 0
Local f売買成立 = 0
Local fRunning
Set fRunning
Do
    //描画
    If fCapitalReDraw Then
        ClearPicture CAPITAL_WINDOW_DX CAPITAL_WINDOW_DY (CAPITAL_WINDOW_DX + CAPITAL_WINDOW_DW) (CAPITAL_WINDOW_DY + CAPITAL_WINDOW_DH)
        Font CAPITAL_FONT_SIZE ゴシック Regular
        Call ｋａｔ縁取り文字描画 (CAPITAL_X - TextWidth(Wide(資金) & "Ｇ")) CAPITAL_Y CAPITAL_FONT_SIZE CAPITAL_FONT_COLOR ゴシック CAPITAL_FONT_FRAME_WIDTH CAPITAL_FONT_FRAME_COLOR (Wide(資金) & "Ｇ" ) Regular
        Set fCapitalReDraw ""
    EndIf
    
    If fShopReDraw Then
        For i = 1 To SHOP_ITEM_NUM_A_PAGE
            ClearObj ("s" & i)
            ClearObj (PAGE_NEXT & "s")
            ClearObj (PAGE_PREV & "s")
        Next
        Call アイテムリスト描画 UnitID(owner) shopPage "" "ショップ"
        Set fShopReDraw ""
    EndIf
    
    If fTargetEquipReDraw Then
        ClearObj et
        Call 装備武器描画 target targetEquipItemName targetEquipItemImage targetEquipItemProperty targetEquipItemStock "" "ショップ" targetEquipItemPrice
        Set fTargetEquipReDraw ""
    EndIf
    
    If fTargetBagReDraw Then
        For i = 1 To ITEM_NUM_A_PAGE
            ClearObj ("t" & i)
            ClearObj (PAGE_NEXT & "t")
            ClearObj (PAGE_PREV & "t")
        Next
        Call アイテムリスト描画 target targetPage "" "ショップ"
        Set fTargetBagReDraw ""
    EndIf
    
    Refresh
    
    Wait Click
    If 選択 = "" Then
        If f売買成立 = 0 Then
            Ask "店を出ますか？" キャンセル可    
                はい
                いいえ
            End
        Else
            Ask "店を出ますか？退出後も装備の持ち替えができます" キャンセル可    
                はい
                いいえ
            End
        EndIf
        If 選択 = 1 Then
            UnSet fRunning
        EndIf
    Else
        Switch Left(選択, 1)
        Case "t"
            Local selected
            Set selected (Mid(選択, 2) + targetPage * ITEM_NUM_A_PAGE)
            Confirm (targetBag[selected] & " を売ります。よろしいですか？")
            If 選択 = 1 Then
                Money targetItemPriceArr[selected]
                FERemoveItem target targetBag[selected] targetItemStockArr[selected]
                For i = selected To (Count(targetBag) - 1)
                    Set targetBag[i] targetBag[i + 1]
                    Set targetItemImageArr[i] targetItemImageArr[i + 1]
                    Set targetItemPropertyArr[i] targetItemPropertyArr[i + 1]
                    Set targetItemStockArr[i] targetItemStockArr[i + 1]
                    Set targetItemPriceArr[i] targetItemPriceArr[i + 1]
                Next
                UnSet targetBag[Count(targetBag)]
                UnSet targetItemImageArr[Count(targetItemImageArr)]
                UnSet targetItemPropertyArr[Count(targetItemPropertyArr)]
                UnSet targetItemStockArr[Count(targetItemStockArr)]
                UnSet targetItemPriceArr[Count(targetItemPriceArr)]
                
                Set f売買成立
                
                Set fCapitalReDraw
                ClearPicture TARGET_HOTPOINT_X TARGET_HOTPOINT_Y (TARGET_HOTPOINT_X + TARGET_HOTPOINT_WIDTH) (TARGET_WINDOW_DY + TARGET_WINDOW_DH)
                Set fTargetBagReDraw
            EndIf
        Case "s"
            Local selected
            Set selected (Mid(選択, 2) + shopPage * SHOP_ITEM_NUM_A_PAGE)
            Confirm (shopBag[selected] & " を買いますか？")
            If 選択 = 1 Then
                If 資金 < shopItemPriceArr[selected] Then
                    Talk
                        資金が不足しています
                    End
                Else
                    Local tmp
                    Set tmp 0
                    For i = 1 To CountItem(target)
                        If Info(Info(ユニット, target, アイテム, i), 装備個所) != "非表示" Then
                            Incr tmp
                        EndIf
                    Next
                    If Info(ユニット, target, 最大アイテム数) <= tmp Then
                        Talk
                            アイテムをこれ以上持てません
                        End
                    Else
                        Money (shopItemPriceArr[selected] * -1)
                        Item shopBag[selected]
                        FEEquip target shopBag[selected]
                        Set targetBag[Count(targetBag) + 1] shopBag[selected]
                        Set targetItemImageArr[Count(targetItemImageArr) + 1] shopItemImageArr[selected]
                        Set targetItemPropertyArr[Count(targetItemPropertyArr) + 1] shopItemPropertyArr[selected]
                        Set targetItemStockArr[Count(targetItemStockArr) + 1] shopItemStockArr[selected]
                        Set targetItemPriceArr[Count(targetItemPriceArr) + 1] (shopItemPriceArr[selected] \ 2)
                        
                        Set f売買成立
                        
                        Set fCapitalReDraw
                        ClearPicture TARGET_HOTPOINT_X TARGET_HOTPOINT_Y (TARGET_HOTPOINT_X + TARGET_HOTPOINT_WIDTH) (TARGET_WINDOW_DY + TARGET_WINDOW_DH)
                        Set fTargetBagReDraw
                    EndIf
                EndIf
            EndIf
        Case PAGE_PREV PAGE_NEXT
            //アイテムのページを切り替え
            If Mid(選択, 2) = "t" Then
                If Left(選択, 1) = PAGE_PREV Then
                    Incr targetPage -1
                Else
                    Incr targetPage
                EndIf
                ClearPicture TARGET_HOTPOINT_X TARGET_HOTPOINT_Y (TARGET_HOTPOINT_X + TARGET_HOTPOINT_WIDTH) (TARGET_WINDOW_DY + TARGET_WINDOW_DH)
                Local fTargetBagReDraw
                Set fTargetBagReDraw
            Else
                If Left(選択, 1) = PAGE_PREV Then
                    Incr shopPage -1
                Else
                    Incr shopPage
                EndIf
                ClearPicture SHOP_HOTPOINT_X SHOP_HOTPOINT_Y (SHOP_HOTPOINT_X + SHOP_HOTPOINT_WIDTH) (SHOP_WINDOW_DY + SHOP_WINDOW_DH)
                Local fShopReDraw
                Set fShopReDraw
            EndIf
        EndSw
    EndIf
Loop While (fRunning = 1)

If f売買成立 = 0 Then
    If (行動前座標Ｘ取得(PilotID(target)) != X(PilotID(target))) Or (行動前座標Ｙ取得(PilotID(target)) != Y(PilotID(target))) Then
        Move 行動前座標Ｘ取得(PilotID(target)) 行動前座標Ｙ取得(PilotID(target)) 非同期
        If (InStr(Info(ユニット, target, 移動可能地形), "空") != 0) Then
            EN(target) = EN(target) + 5
        EndIf
	    Action(PilotID(target)) = Action(PilotID(target)) + 1
	    Center PilotID(target) 非同期
	    Set 再移動キャンセル[PilotID(target)]
    EndIf
ElseIf Not キャンプ中 = 1 Then
    If (行動前座標Ｘ取得(PilotID(target)) = X(PilotID(target))) And (行動前座標Ｙ取得(PilotID(target)) = Y(PilotID(target))) Then
		Finish PilotID(target)
    EndIf
    Action(PilotID(target)) = Action(PilotID(target)) + 1
    SetSkill PilotID(target) ショップ利用済 -1
    SetSkill PilotID(target) "アイテム使用不可" -1 非表示
    SetStatus target "攻撃不能"
    Set アイテム交換不可[PilotID(target)]
    Set 盗む不可[PilotID(target)]
    Set 踊る不可[PilotID(target)]
    Set ショップ利用不可[PilotID(target)]
    Item 移動力−１０
    Equip target 移動力−１０
    Incr ショップ利用数
EndIf
ClearPicture
ClearObj
Redraw 非同期
Return


//踊って隣接する行動済みユニット１体を再行動可能にします。
*ユニットコマンド 踊る 味方 Call(踊る可否):
Call 行動済隣接選択 対象ユニットＩＤ

If 選択 = "" Then
    Cancel
    Exit
EndIf

Local partner = 選択

PlayEffect 音符 対象ユニットＩＤ "dance.wav"
Action(partner) = 1

Call 経験値加算 対象パイロット Ｐ−Ｄｅ＝Ｄ獲得経験値取得(対象ユニットＩＤ, partner, "踊る")

If 行動前座標Ｘ取得(対象パイロット) = X(対象パイロット) Then
    If 行動前座標Ｙ取得(対象パイロット) = Y(対象パイロット) Then
        Finish
    EndIf
EndIf

Redraw

Call 再移動判定
Exit


//アイテムを盗みます。
//FEOption「武器盗み可」を設定している場合、
//武器アイテムを盗むこともできます。
*ユニットコマンド 盗む 味方 Call(盗む可否):
Call 盗む隣接選択 対象ユニットＩＤ

If 選択 = "" Then
    Cancel
    Exit
EndIf

Local enemy = 選択

Local itemList = ""
Local itemNameList = ""
Local 残り回数リスト = ""

Local 装備中アイテム番号 = Call(装備中アイテム番号取得, enemy)
Local i
For i = 1 To CountItem(enemy)
    If Info(Info(ユニット, enemy, アイテム, i), 装備個所) != "非表示" Then
        Local tmp
        Set tmp 0
        If ((武器盗み可フラグ != 1) And (i != 装備中アイテム番号)) Then
            Local j
            For j = 1 To Info(ユニット, enemy, 武器数)
                If Info(ユニット, enemy, 武器, j) = Info(ユニット, enemy, アイテム, i) Then
                    Incr tmp
                    Break
                EndIf
            Next
        EndIf
        If i = 装備中アイテム番号 Then
            Incr tmp
        EndIf
        If tmp != 0 Then
            Set itemList (itemList & "×　" & Info(ユニット, enemy, アイテム, i) & " " & アイテム残り回数取得(enemy, i) & ",")
        Else
            Set itemList (itemList & "○　" & Info(ユニット, enemy, アイテム, i) & " " & アイテム残り回数取得(enemy, i) & ",")
        EndIf
        Set itemNameList (itemNameList & Info(ユニット, enemy, アイテム, i) & " ")
        Set 残り回数リスト (残り回数リスト & アイテム残り回数取得(enemy, i) & " ")
    EndIf
Next
Local itemArr
Array itemArr itemList ","
Local itemNameArr
Array itemNameArr itemNameList リスト
Local 残り回数Arr
Array 残り回数Arr 残り回数リスト リスト
If itemList = "" Then
    Set itemArr[1] アイテムがありません
EndIf
Do
    Ask itemArr 何を盗みますか？ キャンセル可 連続表示
Loop While ((選択 != "") And (Left(itemArr[選択], 1) != "○"))
Ask 終了
If 選択 = "" Then
    Cancel
    Exit
EndIf
Local selected
Set selected 選択
FERemoveItem enemy itemNameArr[selected] 残り回数Arr[selected]
ClearSkill PilotID(enemy) ("ドロップ　" & itemNameArr[selected])
Call アイテム入手 対象ユニットＩＤ itemNameArr[selected] 残り回数Arr[selected]

If 行動前座標Ｘ取得(対象パイロット) = X(対象パイロット) Then
    If 行動前座標Ｙ取得(対象パイロット) = Y(対象パイロット) Then
        Finish
    EndIf
EndIf

Call 再移動判定
Exit


//アイテムを入手する
アイテム入手:
Local target = Args(1)
Local itemName = Args(2)
Local stock = Args(3)
Set target IIf(IsDefined(target, ユニット), UnitID(PilotID(target)), UnitID(target))

Item itemName
Equip アイテムデータ表示用Ｐ itemName

PlaySound getitem.wav
Call ワンポイントテロップ (itemName & " を手に入れた") IIf(Info(ユニット, UnitID(アイテムデータ表示用Ｐ), 特殊能力所有, itemName & "画像"), Info(ユニット, UnitID(アイテムデータ表示用Ｐ), 特殊能力解説, itemName & "画像"), )
Item itemName
FEEquip target itemName stock

RemoveItem アイテムデータ表示用Ｐ itemName
Return


//アイテム交換ウィンドウの装備欄に装備中の武器を描画する。
//HotPointのみを生成する事もできる。
//汎用性はない。
装備武器描画:
Ｐ−Ｄｅ＝Ｄ装備武器描画:
Local target = Args(1)
Local itemName = Args(2)
Local itemImage = Args(3)
Local itemProperty = Args(4)
Local itemStock = Args(5)
Local fHotPointCreatable = Args(6)
Local mode = Args(7)
Local price = Args(8)
Set target IIf(IsDefined(target, ユニット), UnitID(PilotID(target)), UnitID(target))

//テキスト情報
Local FONT_SIZE = 12pt
Local FONT_COLOR = #FFFFFF
Local FONT_FRAME_COLOR = #000000
Local FONT_FRAME_WIDTH = 1

//共通表示情報
Local ITEM_ICON_SIZE = 24

//対象ユニット用表示情報
Local TARGET_ITEM_NAME_X = 85
Local TARGET_ITEM_STOCK_X = 220 //右側の座標
Local TARGET_EQUIP_ITEM_ICON_X = 50
Local TARGET_EQUIP_ITEM_ICON_Y = 207

//相手ユニット用表示情報
Local PARTNER_ITEM_NAME_X = 290
Local PARTNER_ITEM_STOCK_X = 425 //右側の座標
Local PARTNER_EQUIP_ITEM_ICON_X = 255
Local PARTNER_EQUIP_ITEM_ICON_Y = 207

//ホットポイント
Local TARGET_HOTPOINT_X = 46
Local TARGET_HOTPOINT_Y = 207
Local TARGET_HOTPOINT_WIDTH = 184
Local TARGET_HOTPOINT_HEIGHT = 30
Local PARTNER_HOTPOINT_X = 251
Local PARTNER_HOTPOINT_Y = 207
Local PARTNER_HOTPOINT_WIDTH = 184
Local PARTNER_HOTPOINT_HEIGHT = 30

//ショップ専用情報
Local TARGET_EQUIP_ITEM_PRICE_X = 425 //右側の座標
Local TARGET_EQUIP_ITEM_PRICE_Y = 226
Local INFO_FONT_COLOR = #FFFFFF
Local INFO_FONT_FRAME_COLOR = #000000
Local INFO_FONT_SIZE = 10pt
Local INFO_FONT_FRAME_WIDTH = 1

If mode = "ショップ" Then
    If itemImage != "" Then
        PaintPicture itemImage PARTNER_EQUIP_ITEM_ICON_X PARTNER_EQUIP_ITEM_ICON_Y ITEM_ICON_SIZE ITEM_ICON_SIZE 透過 #FFFFFF
    EndIf
    Call ｋａｔ縁取り文字描画 PARTNER_ITEM_NAME_X (PARTNER_EQUIP_ITEM_ICON_Y + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR itemName Regular
    Font FONT_SIZE Regular
    Call ｋａｔ縁取り文字描画 (PARTNER_ITEM_STOCK_X - TextWidth(itemStock)) (PARTNER_EQUIP_ITEM_ICON_Y + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2 - 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR itemStock Regular
    Font INFO_FONT_SIZE ゴシック Bold
    Call ｋａｔ縁取り文字描画 (TARGET_EQUIP_ITEM_PRICE_X - TextWidth(Wide(price) & "Ｇ")) TARGET_EQUIP_ITEM_PRICE_Y INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR (Wide(price) & "Ｇ")
    Return
EndIf

If target = 対象ユニットＩＤ Then
    If itemImage != "" Then
        PaintPicture itemImage TARGET_EQUIP_ITEM_ICON_X TARGET_EQUIP_ITEM_ICON_Y ITEM_ICON_SIZE ITEM_ICON_SIZE 透過 #FFFFFF
    EndIf
    Call ｋａｔ縁取り文字描画 TARGET_ITEM_NAME_X (TARGET_EQUIP_ITEM_ICON_Y + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR itemName Regular
    Font FONT_SIZE Regular
    Call ｋａｔ縁取り文字描画 (TARGET_ITEM_STOCK_X - TextWidth(itemStock)) (TARGET_EQUIP_ITEM_ICON_Y + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2 - 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR itemStock Regular
    If fHotPointCreatable != "" Then
        HotPoint "et" TARGET_HOTPOINT_X TARGET_HOTPOINT_Y TARGET_HOTPOINT_WIDTH TARGET_HOTPOINT_HEIGHT itemProperty
    EndIf
Else
    If itemImage != "" Then
        PaintPicture itemImage PARTNER_EQUIP_ITEM_ICON_X PARTNER_EQUIP_ITEM_ICON_Y ITEM_ICON_SIZE ITEM_ICON_SIZE 透過 #FFFFFF
    EndIf
    Call ｋａｔ縁取り文字描画 PARTNER_ITEM_NAME_X (PARTNER_EQUIP_ITEM_ICON_Y + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR itemName Regular
    Font FONT_SIZE Regular
    Call ｋａｔ縁取り文字描画 (PARTNER_ITEM_STOCK_X - TextWidth(itemStock)) (PARTNER_EQUIP_ITEM_ICON_Y + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2 - 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR itemStock Regular
    If fHotPointCreatable != "" Then
        HotPoint "ep" PARTNER_HOTPOINT_X PARTNER_HOTPOINT_Y PARTNER_HOTPOINT_WIDTH PARTNER_HOTPOINT_HEIGHT itemProperty
    EndIf
EndIf
Return


//アイテム交換ウィンドウにアイテムリストを表示する。
//汎用性はない。
アイテムリスト描画:
Ｐ−Ｄｅ＝Ｄアイテムリスト描画:
Local target = Args(1)
Local page = Args(2)
Local fNoNameHotPointCreatable = Args(3)
Local mode = Args(4)
Set target IIf(IsDefined(target, ユニット), UnitID(PilotID(target)), UnitID(target))

//テキスト情報
Local FONT_SIZE = 12pt
Local FONT_COLOR = #FFFFFF
Local FONT_FRAME_COLOR = #000000
Local FONT_FRAME_WIDTH = 1

//共通表示情報
Local ITEM_ICON_SIZE = 24
Local ITEM_ICON_Y = 256
Local ITEM_NUM_A_PAGE = 3
Local ITEM_HEIGHT = 30

//対象ユニット用表示情報
Local TARGET_ITEM_NAME_X = 85
Local TARGET_ITEM_ICON_X = 50
Local TARGET_ITEM_STOCK_X = 220 //右側の座標

//相手ユニット用表示情報
Local PARTNER_ITEM_NAME_X = 290
Local PARTNER_ITEM_ICON_X = 255
Local PARTNER_ITEM_STOCK_X = 425 //右側の座標

//ホットポイント
Local TARGET_HOTPOINT_X = 46
Local TARGET_HOTPOINT_Y = 253
Local TARGET_HOTPOINT_WIDTH = 184
Local TARGET_HOTPOINT_HEIGHT = 30
Local PARTNER_HOTPOINT_X = 251
Local PARTNER_HOTPOINT_Y = 253
Local PARTNER_HOTPOINT_WIDTH = 184
Local PARTNER_HOTPOINT_HEIGHT = 30

//ショップ側表示情報
Local SHOP_ITEM_NAME_X = 85
Local SHOP_ITEM_ICON_X = 50
Local SHOP_ITEM_ICON_Y = 130
Local SHOP_ITEM_STOCK_X = 220 //右側の座標
Local SHOP_HOTPOINT_X = 46
Local SHOP_HOTPOINT_Y = 130
Local SHOP_HOTPOINT_WIDTH = 184
Local SHOP_ITEM_NUM_A_PAGE = 6

//ショップ専用情報
Local TARGET_ITEM_PRICE_X = 425 //右側の座標
Local TARGET_ITEM_PRICE_Y = 275
Local SHOP_ITEM_PRICE_X = 220 //右側の座標
Local SHOP_ITEM_PRICE_Y = 149
Local INFO_FONT_COLOR = #FFFFFF
Local INFO_FONT_FRAME_COLOR = #000000
Local INFO_FONT_SIZE = 10pt
Local INFO_FONT_FRAME_WIDTH = 1
Local SHOP_ITEM_HEIGHT = 42
Local SHOP_HOTPOINT_HEIGHT = 42

//ページ切り替えボタン
Local PAGE_PREV = "≪"
Local PAGE_NEXT = "≫"
Local PAGE_NEXT_PROPERTY = "次のページへ"
Local PAGE_PREV_PROPERTY = "前のページへ"

//描画
Local itemY
UnSet element
Local element = (1 + page * ITEM_NUM_A_PAGE)

If mode = "ショップ" Then
    If target = 対象ユニットＩＤ Then
        For i = 1 To ITEM_NUM_A_PAGE
            If targetBag[element] != "" Then
                Set itemY (ITEM_ICON_Y + SHOP_ITEM_HEIGHT * (i - 1))
                If targetItemImageArr[element] != "" Then
                    PaintPicture targetItemImageArr[element] PARTNER_ITEM_ICON_X itemY ITEM_ICON_SIZE ITEM_ICON_SIZE 透過 #FFFFFF
                EndIf
                Call ｋａｔ縁取り文字描画 PARTNER_ITEM_NAME_X (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR targetBag[element] Regular
                Font FONT_SIZE Regular
                Call ｋａｔ縁取り文字描画 (PARTNER_ITEM_STOCK_X - TextWidth(targetItemStockArr[element])) (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2 - 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR targetItemStockArr[element] Regular
                Font INFO_FONT_SIZE ゴシック Bold
                Call ｋａｔ縁取り文字描画 (TARGET_ITEM_PRICE_X - TextWidth(Wide(targetItemPriceArr[element]) & "Ｇ")) (TARGET_ITEM_PRICE_Y + SHOP_ITEM_HEIGHT * (i - 1)) INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR (Wide(targetItemPriceArr[element]) & "Ｇ") 通常
                If targetItemPriceArr[element] != "−" Then
                    HotPoint ("t" & i) PARTNER_HOTPOINT_X (TARGET_HOTPOINT_Y + SHOP_ITEM_HEIGHT * (i - 1)) PARTNER_HOTPOINT_WIDTH SHOP_HOTPOINT_HEIGHT Info(targetBag[element], 解説文)
                EndIf
            EndIf
            Incr element
        Next
        //次ページ
        If (1 + (page + 1) * ITEM_NUM_A_PAGE) < Info(ユニット, target, 最大アイテム数) Then
            Set itemY (ITEM_ICON_Y + SHOP_ITEM_HEIGHT * ITEM_NUM_A_PAGE)
            UnSet dx
            Local dx = (PARTNER_HOTPOINT_X + PARTNER_HOTPOINT_WIDTH - TextWidth(PAGE_NEXT))
            UnSet dy
            Local dy = (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2)
            Call ｋａｔ縁取り文字描画 dx dy FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR PAGE_NEXT Regular
            HotPoint (PAGE_NEXT & "t")  dx dy TextWidth(PAGE_NEXT) TextHeight(PAGE_NEXT) PAGE_NEXT_PROPERTY
        EndIf 
        //前ページ
        If page != 0 Then
            Set itemY (ITEM_ICON_Y + SHOP_ITEM_HEIGHT * ITEM_NUM_A_PAGE)
            UnSet dy
            Local dy = (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2)
            Call ｋａｔ縁取り文字描画 PARTNER_HOTPOINT_X dy FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR PAGE_PREV Regular
            HotPoint (PAGE_PREV & "t")  PARTNER_HOTPOINT_X dy TextWidth(PAGE_PREV) TextHeight(PAGE_PREV) PAGE_PREV_PROPERTY
        EndIf
        Return
    //ショップ情報表示
    Else
        Set element (1 + page * SHOP_ITEM_NUM_A_PAGE)
        For i = 1 To SHOP_ITEM_NUM_A_PAGE
            If shopBag[element] != "" Then
                Set itemY (SHOP_ITEM_ICON_Y + SHOP_ITEM_HEIGHT * (i - 1))
                If shopItemImageArr[element] != "" Then
                    PaintPicture shopItemImageArr[element] SHOP_ITEM_ICON_X itemY ITEM_ICON_SIZE ITEM_ICON_SIZE 透過 #FFFFFF
                EndIf
                Call ｋａｔ縁取り文字描画 SHOP_ITEM_NAME_X (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR shopBag[element] Regular
                Font FONT_SIZE Regular
                Call ｋａｔ縁取り文字描画 (SHOP_ITEM_STOCK_X - TextWidth(shopItemStockArr[element])) (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2 - 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR shopItemStockArr[element] Regular
                Font INFO_FONT_SIZE ゴシック Bold
                Call ｋａｔ縁取り文字描画 (SHOP_ITEM_PRICE_X - TextWidth(Wide(shopItemPriceArr[element]) & "Ｇ")) (SHOP_ITEM_PRICE_Y + SHOP_ITEM_HEIGHT * (i - 1)) INFO_FONT_SIZE INFO_FONT_COLOR ゴシック INFO_FONT_FRAME_WIDTH INFO_FONT_FRAME_COLOR (Wide(shopItemPriceArr[element]) & "Ｇ") 通常
                If shopItemPriceArr[element] != "−" Then
                    HotPoint ("s" & i) SHOP_HOTPOINT_X (SHOP_HOTPOINT_Y + SHOP_ITEM_HEIGHT * (i - 1)) SHOP_HOTPOINT_WIDTH SHOP_HOTPOINT_HEIGHT Info(shopBag[element], 解説文)
                EndIf
            EndIf
            Incr element
        Next
        //次ページ
        If (1 + (page + 1) * SHOP_ITEM_NUM_A_PAGE) < Info(ユニット, target, 最大アイテム数) Then
            Set itemY (SHOP_ITEM_ICON_Y + SHOP_ITEM_HEIGHT * SHOP_ITEM_NUM_A_PAGE)
            UnSet dx
            Local dx = (SHOP_HOTPOINT_X + SHOP_HOTPOINT_WIDTH - TextWidth(PAGE_NEXT))
            UnSet dy
            Local dy = (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2)
            Call ｋａｔ縁取り文字描画 dx dy FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR PAGE_NEXT Regular
            HotPoint (PAGE_NEXT & "s")  dx dy TextWidth(PAGE_NEXT) TextHeight(PAGE_NEXT) PAGE_NEXT_PROPERTY
        EndIf 
        //前ページ
        If page != 0 Then
            Set itemY (SHOP_ITEM_ICON_Y + SHOP_ITEM_HEIGHT * SHOP_ITEM_NUM_A_PAGE)
            UnSet dy
            Local dy = (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2)
            Call ｋａｔ縁取り文字描画 SHOP_HOTPOINT_X dy FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR PAGE_PREV Regular
            HotPoint (PAGE_PREV & "s") SHOP_HOTPOINT_X dy TextWidth(PAGE_PREV) TextHeight(PAGE_PREV) PAGE_PREV_PROPERTY
        EndIf
        Return
    EndIf
EndIf

If target = 対象ユニットＩＤ Then
    For i = 1 To ITEM_NUM_A_PAGE
        If targetBag[element] != "" Then
            Set itemY (ITEM_ICON_Y + ITEM_HEIGHT * (i - 1))
            If targetItemImageArr[element] != "" Then
                PaintPicture targetItemImageArr[element] TARGET_ITEM_ICON_X itemY ITEM_ICON_SIZE ITEM_ICON_SIZE 透過 #FFFFFF
            EndIf
            Call ｋａｔ縁取り文字描画 TARGET_ITEM_NAME_X (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR targetBag[element] Regular
            Font FONT_SIZE Regular
            Call ｋａｔ縁取り文字描画 (TARGET_ITEM_STOCK_X - TextWidth(targetItemStockArr[element])) (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2 - 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR targetItemStockArr[element] Regular
            HotPoint ("t" & i) TARGET_HOTPOINT_X (TARGET_HOTPOINT_Y + ITEM_HEIGHT * (i - 1)) TARGET_HOTPOINT_WIDTH TARGET_HOTPOINT_HEIGHT Info(targetBag[element], 解説文)
        Else
            If fNoNameHotPointCreatable != "" Then
                HotPoint "t0" TARGET_HOTPOINT_X (TARGET_HOTPOINT_Y + ITEM_HEIGHT * (i - 1)) TARGET_HOTPOINT_WIDTH TARGET_HOTPOINT_HEIGHT "アイテムを移動します"
            EndIf
        EndIf
        Incr element
    Next
    //次ページ
    If (1 + (page + 1) * ITEM_NUM_A_PAGE) < Info(ユニット, 対象ユニットＩＤ, 最大アイテム数) Then
        Set itemY (ITEM_ICON_Y + ITEM_HEIGHT * ITEM_NUM_A_PAGE)
        UnSet dx
        Local dx = (TARGET_HOTPOINT_X + TARGET_HOTPOINT_WIDTH - TextWidth(PAGE_NEXT))
        UnSet dy
        Local dy = (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2)
        Call ｋａｔ縁取り文字描画 dx dy FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR PAGE_NEXT Regular
        HotPoint (PAGE_NEXT & "t")  dx dy TextWidth(PAGE_NEXT) TextHeight(PAGE_NEXT) PAGE_NEXT_PROPERTY
    EndIf 
    //前ページ
    If page != 0 Then
        Set itemY (ITEM_ICON_Y + ITEM_HEIGHT * ITEM_NUM_A_PAGE)
        UnSet dy
        Local dy = (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2)
        Call ｋａｔ縁取り文字描画 TARGET_HOTPOINT_X dy FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR PAGE_PREV Regular
        HotPoint (PAGE_PREV & "t")  TARGET_HOTPOINT_X dy TextWidth(PAGE_PREV) TextHeight(PAGE_PREV) PAGE_PREV_PROPERTY
    EndIf
Else
    For i = 1 To ITEM_NUM_A_PAGE
        If partnerBag[element] != "" Then
            Set itemY (ITEM_ICON_Y + ITEM_HEIGHT * (i - 1))
            If partnerItemImageArr[element] != "" Then
                PaintPicture partnerItemImageArr[element] PARTNER_ITEM_ICON_X itemY ITEM_ICON_SIZE ITEM_ICON_SIZE 透過 #FFFFFF
            EndIf
            Call ｋａｔ縁取り文字描画 PARTNER_ITEM_NAME_X (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR partnerBag[element] Regular
            Font FONT_SIZE Regular
            Call ｋａｔ縁取り文字描画 (PARTNER_ITEM_STOCK_X - TextWidth(partnerItemStockArr[element])) (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2 - 2) FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR partnerItemStockArr[element] Regular
            HotPoint ("p" & i) PARTNER_HOTPOINT_X (TARGET_HOTPOINT_Y + ITEM_HEIGHT * (i - 1)) PARTNER_HOTPOINT_WIDTH PARTNER_HOTPOINT_HEIGHT Info(partnerBag[element], 解説文)
        Else
            If fNoNameHotPointCreatable != "" Then
                HotPoint "p0" PARTNER_HOTPOINT_X (PARTNER_HOTPOINT_Y + ITEM_HEIGHT * (i - 1)) PARTNER_HOTPOINT_WIDTH PARTNER_HOTPOINT_HEIGHT "アイテムを移動します"
            EndIf
        EndIf
        Incr element
    Next
    //次ページ
    If (1 + (page + 1) * ITEM_NUM_A_PAGE) < Info(ユニット, target, 最大アイテム数) Then
        Set itemY (ITEM_ICON_Y + ITEM_HEIGHT * ITEM_NUM_A_PAGE)
        UnSet dx
        Local dx = (PARTNER_HOTPOINT_X + PARTNER_HOTPOINT_WIDTH - TextWidth(PAGE_NEXT))
        UnSet dy
        Local dy = (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2)
        Call ｋａｔ縁取り文字描画 dx dy FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR PAGE_NEXT Regular
        HotPoint (PAGE_NEXT & "p")  dx dy TextWidth(PAGE_NEXT) TextHeight(PAGE_NEXT) PAGE_NEXT_PROPERTY
    EndIf 
    //前ページ
    If page != 0 Then
        Set itemY (ITEM_ICON_Y + ITEM_HEIGHT * ITEM_NUM_A_PAGE)
        UnSet dy
        Local dy = (itemY + (ITEM_ICON_SIZE - TextHeight(あ)) \ 2)
        Call ｋａｔ縁取り文字描画 PARTNER_HOTPOINT_X dy FONT_SIZE FONT_COLOR ゴシック FONT_FRAME_WIDTH FONT_FRAME_COLOR PAGE_PREV Regular
        HotPoint (PAGE_PREV & "p")  PARTNER_HOTPOINT_X dy TextWidth(PAGE_PREV) TextHeight(PAGE_PREV) PAGE_PREV_PROPERTY
    EndIf
EndIf
Return


//隣接するユニットがあるか確認する。
//引数でgroupIDを渡す事により、任意のgroupIDのみが対象になります。
Ｐ−Ｄｅ＝Ｄ隣接ユニット確認:
Local target = Args(1)
Local groupID = Args(2)
Set target IIf(IsDefined(target, ユニット), UnitID(PilotID(target)), UnitID(target))

Local topUnitID    = Info(マップ, X(target), Y(target) - 1, ユニットＩＤ)
Local rightUnitID  = Info(マップ, X(target) + 1, Y(target), ユニットＩＤ)
Local bottomUnitID = Info(マップ, X(target), Y(target) + 1, ユニットＩＤ)
Local leftUnitID   = Info(マップ, X(target) - 1, Y(target), ユニットＩＤ)
If topUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(topUnitID)) != 0) Then
        Return 1
    EndIf
EndIf
If rightUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(rightUnitID)) != 0) Then
        Return 1
    EndIf
EndIf
If bottomUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(bottomUnitID)) != 0) Then
        Return 1
    EndIf
EndIf
If leftUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(leftUnitID)) != 0) Then
        Return 1
    EndIf
EndIf
Return 0


//隣接する自分より速さが劣るユニットがあるか確認する。
盗む隣接ユニット確認:
Local target = Args(1)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

Local groupID = "敵 中立"

Local topUnitID    = Info(マップ, X(target), Y(target) - 1, ユニットＩＤ)
Local rightUnitID  = Info(マップ, X(target) + 1, Y(target), ユニットＩＤ)
Local bottomUnitID = Info(マップ, X(target), Y(target) + 1, ユニットＩＤ)
Local leftUnitID   = Info(マップ, X(target) - 1, Y(target), ユニットＩＤ)
If topUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(topUnitID)) != 0) Then
        If Info(パイロット, PilotID(topUnitID), ステータス速さ) < Info(パイロット, 対象パイロット, ステータス速さ) Then
            Return 1
        EndIf
    EndIf
EndIf
If rightUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(rightUnitID)) != 0) Then
        If Info(パイロット, PilotID(rightUnitID), ステータス速さ) < Info(パイロット, 対象パイロット, ステータス速さ) Then
            Return 1
        EndIf
    EndIf
EndIf
If bottomUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(bottomUnitID)) != 0) Then
        If Info(パイロット, PilotID(bottomUnitID), ステータス速さ) < Info(パイロット, 対象パイロット, ステータス速さ) Then
            Return 1
        EndIf
    EndIf
EndIf
If leftUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(leftUnitID)) != 0) Then
        If Info(パイロット, PilotID(leftUnitID), ステータス速さ) < Info(パイロット, 対象パイロット, ステータス速さ) Then
            Return 1
        EndIf
    EndIf
EndIf
Return 0


//自分より速さの劣る隣接するユニットを選択します。
盗む隣接選択:
Local target = Args(1)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

Local groupID = "敵 中立"

//暗転
PaintPicture Event\white.gif 0 0 480 480 フィルタ RGB(0,0,0) 30%
ClearPicture  WX(target)        WY(target)       (WX(target) + 31) (WY(target) + 31) //ユニット
ClearPicture  WX(target)       (WY(target) - 32) (WX(target) + 31)  WY(target)       //上
ClearPicture (WX(target) + 32)  WY(target)       (WX(target) + 63) (WY(target) + 31) //右
ClearPicture  WX(target)       (WY(target) + 32) (WX(target) + 31) (WY(target) + 63) //下
ClearPicture (WX(target) - 32)  WY(target)        WX(target)       (WY(target) + 31) //左
Refresh

//ホットポイント設定
Local topUnitID    = Info(マップ, X(target), Y(target) - 1, ユニットＩＤ)
Local rightUnitID  = Info(マップ, X(target) + 1, Y(target), ユニットＩＤ)
Local bottomUnitID = Info(マップ, X(target), Y(target) + 1, ユニットＩＤ)
Local leftUnitID   = Info(マップ, X(target) - 1, Y(target), ユニットＩＤ)
If topUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(topUnitID)) != 0) Then
        If Info(パイロット, PilotID(topUnitID), ステータス速さ) < Info(パイロット, 対象パイロット, ステータス速さ) Then
            HotPoint topUnitID WX(topUnitID) WY(topUnitID) 31 31 Info(パイロット, PilotID(topUnitID), 愛称)
        EndIf
    EndIf
EndIf
If rightUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(rightUnitID)) != 0) Then
        If Info(パイロット, PilotID(rightUnitID), ステータス速さ) < Info(パイロット, 対象パイロット, ステータス速さ) Then
            HotPoint rightUnitID WX(rightUnitID) WY(rightUnitID) 31 31 Info(パイロット, PilotID(rightUnitID), 愛称)
        EndIf
    EndIf
EndIf
If bottomUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(bottomUnitID)) != 0) Then
        If Info(パイロット, PilotID(bottomUnitID), ステータス速さ) < Info(パイロット, 対象パイロット, ステータス速さ) Then
            HotPoint bottomUnitID WX(bottomUnitID) WY(bottomUnitID) 31 31 Info(パイロット, PilotID(bottomUnitID), 愛称)
        EndIf
    EndIf
EndIf
If leftUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(leftUnitID)) != 0) Then
        If Info(パイロット, PilotID(leftUnitID), ステータス速さ) < Info(パイロット, 対象パイロット, ステータス速さ) Then
            HotPoint leftUnitID WX(leftUnitID) WY(leftUnitID) 31 31 Info(パイロット, PilotID(leftUnitID), 愛称)
        EndIf
    EndIf
EndIf

Wait Click
ClearObj
ClearPicture
Refresh
Return



//行動済の隣接するユニットがあるか確認する。
行動済隣接ユニット確認:
Local target = Args(1)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

Local topUnitID    = Info(マップ, X(target), Y(target) - 1, ユニットＩＤ)
Local rightUnitID  = Info(マップ, X(target) + 1, Y(target), ユニットＩＤ)
Local bottomUnitID = Info(マップ, X(target), Y(target) + 1, ユニットＩＤ)
Local leftUnitID   = Info(マップ, X(target) - 1, Y(target), ユニットＩＤ)
If topUnitID != "" Then
    If (Party(topUnitID) = 味方) And (Action(topUnitID) = 0) Then
        Return 1
    EndIf
EndIf
If rightUnitID != "" Then
    If (Party(rightUnitID) = 味方) And (Action(rightUnitID) = 0) Then
        Return 1
    EndIf
EndIf
If bottomUnitID != "" Then
    If (Party(bottomUnitID) = 味方) And (Action(bottomUnitID) = 0) Then
        Return 1
    EndIf
EndIf
If leftUnitID != "" Then
    If (Party(leftUnitID) = 味方) And (Action(leftUnitID) = 0) Then
        Return 1
    EndIf
EndIf
Return 0


//行動済の隣接するユニットを選択する。
行動済隣接選択:
Local target = Args(1)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

//暗転
PaintPicture Event\white.gif 0 0 480 480 フィルタ RGB(0,0,0) 30%
ClearPicture  WX(target)        WY(target)       (WX(target) + 31) (WY(target) + 31) //ユニット
ClearPicture  WX(target)       (WY(target) - 32) (WX(target) + 31)  WY(target)       //上
ClearPicture (WX(target) + 32)  WY(target)       (WX(target) + 63) (WY(target) + 31) //右
ClearPicture  WX(target)       (WY(target) + 32) (WX(target) + 31) (WY(target) + 63) //下
ClearPicture (WX(target) - 32)  WY(target)        WX(target)       (WY(target) + 31) //左
Refresh

Local topUnitID    = Info(マップ, X(target), Y(target) - 1, ユニットＩＤ)
Local rightUnitID  = Info(マップ, X(target) + 1, Y(target), ユニットＩＤ)
Local bottomUnitID = Info(マップ, X(target), Y(target) + 1, ユニットＩＤ)
Local leftUnitID   = Info(マップ, X(target) - 1, Y(target), ユニットＩＤ)
If topUnitID != "" Then
    If (Party(topUnitID) = 味方) And (Action(topUnitID) = 0) Then
        HotPoint topUnitID WX(topUnitID) WY(topUnitID) 31 31 Info(パイロット, PilotID(topUnitID), 愛称)
    EndIf
EndIf
If rightUnitID != "" Then
    If (Party(rightUnitID) = 味方) And (Action(rightUnitID) = 0) Then
        HotPoint rightUnitID WX(rightUnitID) WY(rightUnitID) 31 31 Info(パイロット, PilotID(rightUnitID), 愛称)
    EndIf
EndIf
If bottomUnitID != "" Then
    If (Party(bottomUnitID) = 味方) And (Action(bottomUnitID) = 0) Then
        HotPoint bottomUnitID WX(bottomUnitID) WY(bottomUnitID) 31 31 Info(パイロット, PilotID(bottomUnitID), 愛称)
    EndIf
EndIf
If leftUnitID != "" Then
    If (Party(leftUnitID) = 味方) And (Action(leftUnitID) = 0) Then
        HotPoint leftUnitID WX(leftUnitID) WY(leftUnitID) 31 31 Info(パイロット, PilotID(leftUnitID), 愛称)
    EndIf
EndIf

Wait Click
ClearObj
ClearPicture
Refresh
Return


//引数で渡されたユニットと隣接する座標以外を暗転し、隣接するユニットを選択します。
//引数でgroupIDを渡す事により、任意のgroupIDのみが対象になります。
Ｐ−Ｄｅ＝Ｄ隣接選択:
Local target = args(1)
Local groupID = args(2)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

//暗転
PaintPicture Event\white.gif 0 0 480 480 フィルタ RGB(0,0,0) 30%
ClearPicture  WX(target)        WY(target)       (WX(target) + 31) (WY(target) + 31) //ユニット
ClearPicture  WX(target)       (WY(target) - 32) (WX(target) + 31)  WY(target)       //上
ClearPicture (WX(target) + 32)  WY(target)       (WX(target) + 63) (WY(target) + 31) //右
ClearPicture  WX(target)       (WY(target) + 32) (WX(target) + 31) (WY(target) + 63) //下
ClearPicture (WX(target) - 32)  WY(target)        WX(target)       (WY(target) + 31) //左
Refresh

//ホットポイント設定
Local topUnitID    = Info(マップ, X(target), Y(target) - 1, ユニットＩＤ)
Local rightUnitID  = Info(マップ, X(target) + 1, Y(target), ユニットＩＤ)
Local bottomUnitID = Info(マップ, X(target), Y(target) + 1, ユニットＩＤ)
Local leftUnitID   = Info(マップ, X(target) - 1, Y(target), ユニットＩＤ)
If topUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(topUnitID)) != 0) Then
        HotPoint topUnitID WX(topUnitID) WY(topUnitID) 31 31 Info(パイロット, PilotID(topUnitID), 愛称)
    EndIf
EndIf
If rightUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(rightUnitID)) != 0) Then
        HotPoint rightUnitID WX(rightUnitID) WY(rightUnitID) 31 31 Info(パイロット, PilotID(rightUnitID), 愛称)
    EndIf
EndIf
If bottomUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(bottomUnitID)) != 0) Then
        HotPoint bottomUnitID WX(bottomUnitID) WY(bottomUnitID) 31 31 Info(パイロット, PilotID(bottomUnitID), 愛称)
    EndIf
EndIf
If leftUnitID != "" Then
    If (groupID = "") Or (groupID = "全") Or (InStr(groupID, Party(leftUnitID)) != 0) Then
        HotPoint leftUnitID WX(leftUnitID) WY(leftUnitID) 31 31 Info(パイロット, PilotID(leftUnitID), 愛称)
    EndIf
EndIf

Wait Click
ClearObj
ClearPicture
Refresh
Return


//残り回数を指定しながらアイテムを装備する。（残り回数は省略可）
//アイテム数が超過した時、プレイヤーにアイテムの取捨選択を尋ねる
FEEquip:
Local target   //メインパイロット名またはユニット名称またはユニットＩＤ(省略可)
Local itemName //装備するアイテム名称
Local stock    //装備するアイテムの残り回数（省略可）
If Args(1) != "" Then
    If Args(2) = "" Then
        //引数が1つの時
        Set target 対象ユニットＩＤ
        Set itemName Args(1)
        Set stock ""
    Else
        If IsNumeric(Args(2)) = 0 Then
            //2つ目の引数がアイテム名
            Set target   Args(1)
            Set itemName Args(2)
            Set stock    Args(3)
        Else
            //2つめの引数が残り回数
            Set target   対象ユニットＩＤ
            Set itemName Args(1)
            Set stock    Args(2)
        EndIf
    EndIf
    Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

    Local アイテム破棄 = 0

    //"非表示"以外のアイテム数をカウント
    Local 表示アイテム数 = 0
    Local i
    For i = 1 To CountItem(target)
        If Info(Info(ユニット, target, アイテム, i), 装備個所) != "非表示" Then
            Incr 表示アイテム数
        EndIf
    Next
    //最大アイテム数以上なら取捨選択
    If Info(ユニット, target, 最大アイテム数) <= 表示アイテム数 Then
        Set アイテム破棄 IIf(Call(アイテム取捨選択, target, itemName, stock), 0, 1)
    EndIf

    If アイテム破棄 = 0 Then
        Equip target itemName

        If stock != "" Then
            //武器なら回数設定
            Local weaponNo = Info(ユニット, target, 武器数)
            Do While (0 < weaponNo)
                If Info(ユニット, target, 武器, weaponNo) = itemName Then
                    Break
                EndIf
                Incr weaponNo -1
            Loop
            If 0 < weaponNo Then
                SetBullet target weaponNo stock
            Else
                //アビリティなら回数設定
                Local abilityNo = Info(ユニット, target, アビリティ数)
                Do While (0 < abilityNo)
                    If Info(ユニット, target, アビリティ, abilityNo) = itemName Then
                        Break
                    EndIf
                    Incr abilityNo -1
                Loop
                If 0 < abilityNo Then
                    SetStock target abilityNo stock
                EndIf
            EndIf
        EndIf
    EndIf
Else
    Talk
    サブルーチン「FEEquip」の引数の数が違います
    End
EndIf
Return


//アイテムを削除・除去します。
//引数で削除・除去するアイテムの残り回数を指定することで、
//その残り回数のアイテムを削除・除去できます（回数∞の物のみ省略可）
//ユニットＩＤを省略する事はできません。
//その場合はRemoveItemコマンドをご利用下さい。
FERemoveItem:
Local target = args(1)
Local itemName = args(2)
Local stock = args(3)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

If stock != "" Then
    //アイテムが武器であれば処理
    Local tmp
    Set tmp 0
    For i = 1 To Info(ユニット, target, 武器数)
        If Info(ユニット, target, 武器, i) = itemName Then
            Incr tmp
            If stock = Info(ユニット, target, 武器, i, 弾数) Then
                Break
            EndIf
        EndIf
    Next
    If 0 < tmp Then
        Local j
        Set j 0
        For i = 1 To Info(ユニット, target, アイテム数)
            If Info(ユニット, target, アイテム, i) = itemName Then
                Incr j
                If j = tmp Then
                    RemoveItem target i
                    If 装備中武器番号取得(target) = "" Then
                        Call 代替武器装備 target
                    EndIf
                    Return
                EndIf
            EndIf
        Next
    EndIf
    
    //アイテムがアビリティであれば処理
    Local tmp
    Set tmp 0
    For i = 1 To Info(ユニット, target, アビリティ数)
        If Info(ユニット, target, アビリティ, i) = itemName Then
            Incr tmp
            If stock = Info(ユニット, target, アビリティ, i, 使用回数) Then
                Break
            EndIf
        EndIf
    Next
    If 0 < tmp Then
        Local j
        Set j 0
        For i = 1 To Info(ユニット, target, アイテム数)
            If Info(ユニット, target, アイテム, i) = itemName Then
                Incr j
                If j = tmp Then
                    RemoveItem target i
                    Return
                EndIf
            EndIf
        Next
    EndIf
ElseIf itemName != "" Then
    RemoveItem target itemName
Else
    RemoveItem target
    Call Ｐ−Ｄｅ＝Ｄ武器持ち替え target ""
EndIf
Return


//アイテム名と一致する、最も若い武器番号の武器を装備します。
代替武器装備:
Local target = Args(1)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

For i = 1 To Info(ユニット, target, 武器数)
    If Info(ユニット, target, 武器, i, 使用可) = 1 Then
        For j = 1 To Info(ユニット, target, アイテム数)
            If Info(ユニット, target, 武器, i) = Info(ユニット, target, アイテム, j) Then
                Call Ｐ−Ｄｅ＝Ｄ武器持ち替え target i
                Break
            EndIf
        Next
    EndIf
Next
If Call(装備中武器番号取得, target) = "" Then
    Call Ｐ−Ｄｅ＝Ｄ武器持ち替え target ""
EndIf
Return


//装備中の武器の残り回数を更新します。
装備残更新:
Local target = Args(1)
Local weapon = Args(2)
Local 残り回数 = Args(3)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

If Info(ユニット, target, 武器, weapon, 最大弾数) != 0 Then
    SetSkill PilotID(target) 装備中武器残表示 -1 (武器残 & "　" & 残り回数)
    SetSkill PilotID(target) 装備中武器残 残り回数 非表示
Else
    SetSkill PilotID(target) 装備中武器残表示 -1 (武器残 & "　∞")
    SetSkill PilotID(target) 装備中武器残 0 非表示
EndIf
SetBullet target weapon 残り回数
Return




//装備中の武器番号を取得する。
//武器が見つからなかったなら空値を返す
FE装備中武器番号取得:
装備中武器番号取得:
Local target = Args(1)  //メインパイロット名または愛称、ユニット名またはユニットＩＤ(省略可)
Set target IIf(Args(1) != "", Args(1), 対象ユニットＩＤ)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

Local result = ""

Local weapon = Replace(Info(パイロット, PilotID(target), 特殊能力名称, 装備中武器名), "装備", "")
Local 残り回数 = Skill(PilotID(target), "装備中武器残")

If weapon != "" Then
    Local i
    For i = 1 To Info(ユニット, target, 武器数)
        If (Info(ユニット, target, 武器, i) = weapon) And (Info(ユニット, target, 武器, i, 弾数) = 残り回数) Then
            Set result i
        EndIf
    Next
EndIf
Return result


//装備中の武器に対応するアイテム番号を得る。
//アイテムが見つからなかったなら空値を返す
装備中アイテム番号取得:
Local target = Args(1)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

Local i
For i = 1 To Info(パイロット, PilotID(target), 特殊能力数)
    If Right(Info(パイロット, PilotID(target), 特殊能力名称, i), 2) = "装備" Then
        Local weapon = Replace(Info(パイロット, PilotID(target), 特殊能力名称, i), "装備", "")
        Break
    EndIf
Next
Local weaponNum = 装備中武器番号取得(target)

Local 同名武器数 = 0
For i = 1 To weaponNum
    If Info(ユニット, target, 武器, i) = weapon Then
        Incr 同名武器数
    EndIf
Next
Local tmp
Set tmp 0
For i = 1 To CountItem(target)
    If Info(ユニット, target, アイテム, i) = weapon Then
        Incr tmp
        If tmp = 同名武器数 Then
            Return i
        EndIf
    EndIf
Next
Return


//引数で渡されたアイテムの残り回数を得る。
//アイテムが武器でもアビリティでもなければ空値を返す。
//回数無限なら"∞"を返す
アイテム残り回数取得:
Local target = Args(1)
Local itemNum = Args(2)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

Local itemName = Info(ユニット, target, アイテム, itemNum)
//itemNumまでに同名のアイテムが幾つ有るかをチェック
Local 同名アイテム数
Set 同名アイテム数 0
Local i
Set i 1
For i = 1 To itemNum
    If Info(ユニット, target, アイテム, i) = itemName Then
        incr 同名アイテム数
    EndIf
Next

//アイテムが武器であれば処理
Local tmp
Set tmp 0
For i = 1 To Info(ユニット, target, "武器数")
    If Info(ユニット, target, 武器, i) = itemName Then
        Incr tmp
        If tmp = 同名アイテム数 Then
            Return IIf(Info(ユニット, target, 武器, i, "最大弾数") != 0, Info(ユニット, target, 武器, i, "弾数"), "∞")
        EndIf
    EndIf
Next

//アイテムがアビリティであれば処理
Local tmp
Set tmp 0
For i = 1 To Info(ユニット, target, アビリティ数)
    If Info(ユニット, target, アビリティ, i) = itemName Then
        Incr tmp
        If tmp = 同名アイテム数 Then
            Return IIf(Info(ユニット, target, アビリティ, i, "最大使用回数") != 0, Info(ユニット, target, アビリティ, i, "使用回数"), "∞")
        EndIf
    EndIf
Next
Return


アイテム最大回数取得:
Local target = Args(1)
Local itemNum = Args(2)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

Local itemName = Info(ユニット, target, アイテム, itemNum)
//itemNumまでに同名のアイテムが幾つ有るかをチェック
Local 同名アイテム数
Set 同名アイテム数 0
Local i
Set i 1
For i = 1 To itemNum
    If Info(ユニット, target, アイテム, i) = itemName Then
        incr 同名アイテム数
    EndIf
Next

//アイテムが武器であれば処理
Local tmp
Set tmp 0
For i = 1 To Info(ユニット, target, "武器数")
    If Info(ユニット, target, 武器, i) = itemName Then
        Incr tmp
        If tmp = 同名アイテム数 Then
            Return IIf(Info(ユニット, target, 武器, i, "最大弾数") != 0, Info(ユニット, target, 武器, i, 最大弾数), "∞")
        EndIf
    EndIf
Next

//アイテムがアビリティであれば処理
Local tmp
Set tmp 0
For i = 1 To Info(ユニット, target, アビリティ数)
    If Info(ユニット, target, アビリティ, i) = itemName Then
        Incr tmp
        If tmp = 同名アイテム数 Then
            Return IIf(Info(ユニット, target, アビリティ, i, "最大使用回数") != 0, Info(ユニット, target, アビリティ, i, "最大使用回数"), "∞")
        EndIf
    EndIf
Next
Return


//引数で渡されたアイテムの残り回数を設定する。
アイテム残り回数設定:
Local target = args(1)
Local itemNum = args(2)
Local stock = args(3)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

Local itemName = Info(ユニット, target, アイテム, itemNum)
//itemNumまでに同名のアイテムが幾つ有るかをチェック
Local 同名アイテム数 = 0
Local i
For i = 1 To itemNum
    If Info(ユニット, target, アイテム, i) = itemName Then
        incr 同名アイテム数
    EndIf
Next

//アイテムが武器であれば処理
Local tmp = 0
For i = 1 To Info(ユニット, target, "武器数")
    If Info(ユニット, target, 武器, i) = itemName Then
        Incr tmp
        If tmp = 同名アイテム数 Then
            SetBullet target i stock
            Return
        EndIf
    EndIf
Next

//アイテムがアビリティであれば処理
Set tmp 0
For i = 1 To Info(ユニット, target, アビリティ数)
    If Info(ユニット, target, アビリティ, i) = itemName Then
        Incr tmp
        If tmp = 同名アイテム数 Then
            SetStock target i stock
            Return
        EndIf
    EndIf
Next
Return


マップコマンド アイテム一覧 (0 < ターン数):
Local itemList = ""
Local idList = ""
ForEach 味方
    For i = 1 To CountItem(対象ユニットＩＤ)
        If Info(Info(ユニット, 対象ユニットＩＤ, アイテム, i), 装備個所) != "非表示" Then
            Set itemList (itemList & Info(パイロット, 対象パイロット, 愛称) & "，" & Info(ユニット, 対象ユニットＩＤ, アイテム, i) & " " & アイテム残り回数取得(対象ユニットＩＤ, i) & ",")
            Set idList (idList & 対象ユニットＩＤ & " ")
        EndIf
    Next
Next
Local itemArr
Array itemArr itemList ","
UnSet itemArr[Count(itemArr)]
Local idArr
Array idArr idList リスト
Ask itemArr "アイテムを選択すると、そのユニットを中央に表示します。" キャンセル可
If 選択 != "" Then
    Center idArr[選択]
EndIf
Exit


//アイテムを取捨選択する
//「輸送隊」クラスの味方ユニットがおり、なおかつ「輸送隊」クラスのユニットのアイテムに
//空きがあれば、輸送隊にアイテムを送る。
//そうでない場合、選択したアイテムは破棄される。
FEアイテム取捨選択:
アイテム取捨選択:
Local result = 0

Local target   //メインパイロット名またはユニット名称またはユニットＩＤ(省略可)
Local itemName //装備するアイテム名称
Local stock    //装備するアイテムの残り回数（省略可）
If Args(1) != "" Then
    If Args(2) = "" Then
        //引数が1つの時
        Set target 対象ユニットＩＤ
        Set itemName Args(1)
        Set stock ""
    Else
        If IsNumeric(Args(2)) = 0 Then
            //2つ目の引数がアイテム名
            Set target   Args(1)
            Set itemName Args(2)
            Set stock    Args(3)
        Else
            //2つめの引数が残り回数
            Set target   対象ユニットＩＤ
            Set itemName Args(1)
            Set stock    Args(2)
        EndIf
    EndIf
    Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))
    
    //装備中の非表示以外のアイテムをリストに抽出
    Local itemList       = ""
    Local itemNameList   = ""
    Local 残り回数リスト = ""
    Local i
    For i = 1 To CountItem(target)
        If Info(Info(ユニット, target, アイテム, i), 装備個所) != "非表示" Then
            Set itemList (itemList & Info(ユニット, target, アイテム, i) & " " & アイテム残り回数取得(target, i) & ",")
            Set itemNameList (itemNameList & Info(ユニット, target, アイテム, i) & " ")
            Set 残り回数リスト (残り回数リスト & アイテム残り回数取得(target, i) & " ")
        EndIf
    Next
    //入手したアイテムをリストに追加
    Set itemList (itemList & itemName & " " & stock)
    Set itemNameList (itemNameList & itemName)
    Set 残り回数リスト (残り回数リスト & stock)
    //リストを配列に
    Local itemArr
    Array itemArr itemList ","
    Local itemNameArr
    Array itemNameArr itemNameList リスト
    Local 残り回数Arr
    Array 残り回数Arr 残り回数リスト リスト
    
    //輸送隊ユニットを検索
    If 対象パイロット != "" Then
        Local 元対象パイロット = 対象パイロット
    EndIf
    ForEach 味方 (出撃 格納 離脱 待機)
        If InStr(Info(ユニット, 対象ユニットＩＤ, ユニットクラス), "輸送隊") != 0 Then
            //"非表示"以外のアイテム数をカウント
            Local 表示アイテム数 = 0
            For i = 1 To CountItem(対象ユニットＩＤ)
                If Info(Info(ユニット, 対象ユニットＩＤ, アイテム, i), 装備個所) != "非表示" Then
                    Incr 表示アイテム数
                EndIf
            Next
            //最大アイテム数以下なら輸送隊へアイテムを送る
            If 表示アイテム数 < Info(ユニット, 対象ユニットＩＤ, 最大アイテム数) Then
                Local FE輸送隊ユニット = 対象ユニットＩＤ
                Break
            EndIf
        EndIf
    Next
    If IsVarDefined(元対象パイロット) Then
        Select 元対象パイロット
    EndIf

    If IsVarDefined(FE輸送隊ユニット) Then
        Local ASK_MESSAGE = "アイテムがいっぱいです。輸送隊に送るアイテムを選んで下さい。"
    Else
        Local ASK_MESSAGE = "アイテムがいっぱいです。捨てるアイテムを選んで下さい。"
    EndIf
Local CONFIRM_MESSAGE
    Local selected
    Local fRunning = 1
    Do
        Ask itemArr ASK_MESSAGE 連続表示
        Set selected 選択
        If IsVarDefined(FE輸送隊ユニット) Then
            Set CONFIRM_MESSAGE "$(itemArr[selected])を輸送隊に送ります。よろしいですか？"
    Else
            Set CONFIRM_MESSAGE "$(itemArr[selected])を捨てます。よろしいですか？"
    EndIf
        Confirm CONFIRM_MESSAGE
        If 選択 = 1 Then
            Set fRunning 0
        EndIf
    Loop While fRunning
    Ask 終了
    If IsVarDefined(FE輸送隊ユニット) Then
        Item itemNameArr[selected]
        FEEquip FE輸送隊ユニット itemNameArr[selected] 残り回数Arr[selected]
    EndIf
    If selected != Count(itemArr) Then
        FERemoveItem target itemNameArr[selected] 残り回数Arr[selected]
        Set result 1
    EndIf
Else
    Talk
    サブルーチン「FEアイテム取捨選択」の引数の数が違います
    End
EndIf
Return result


//引数で渡されたオプションを設定する。解除もできる
FEOption:
Local optName = args(1) //オプション名
Local opt = args(2)     //解除の場合"解除"を指定

Switch optName
Case "アイテム破損無効"
    If opt != "解除" Then
        Set アイテム破損無効フラグ
    Else
        Set アイテム破損無効フラグ ""
    EndIf
Case "再移動無効"
    If opt != "解除" Then
        Set 再移動無効フラグ
    Else
        Set 再移動無効フラグ ""
    EndIf
Case "武器盗み可"
    If opt != "解除" Then
        Set 武器盗み可フラグ
    Else
        Set 武器盗み可フラグ ""
    EndIf
Case "ドロップアイテム可視化"
    If opt != "解除" Then
        Set ドロップアイテム可視化フラグ
    Else
        Set ドロップアイテム可視化フラグ ""
    EndIf
Case "ＣＴダメージ３倍"
    If opt != "解除" Then
        Set ＣＴダメージ３倍フラグ
    Else
        Set ＣＴダメージ３倍フラグ ""
    EndIf
EndSw
Return


//アイテムが武器かアビリティか、それ以外かを得る
アイテム種別取得:
Local target = Args(1)
Local item = Args(2)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

Local i
For i = 1 To Info(ユニット, target, 武器数)
    If Info(ユニット, target, 武器, i) = item Then
        Return "武器"
    EndIf
Next
For i = 1 To Info(ユニット, target, アビリティ数)
    If Info(ユニット, target, アビリティ, i) = item Then
        Return "アビリティ"
    EndIf
Next
Return


//再移動状態のユニットがその場で待機します。
ユニットコマンド 待機 味方 Skill(対象パイロット, "状態：再移動"):
Finish
Exit


//ユニットクラスに「騎兵」を含むユニットが再移動可能になります。
再移動判定:
Local target = IIf(Args(1) = "", 対象パイロット, Args(1))
Set target PilotID(IIf(IsDefined(target, パイロット), UnitID(target), target))
If (InStr(Info(ユニット, UnitID(target), ユニットクラス), "騎兵") != 0) Or Info(パイロット, target, 特殊能力所有, "再移動") Then
    Set 再移動可[target] 1
EndIf
Return


//アイテムの残数そのままユニットを入れ替えます
FEUpgrade:
If Args(1) != "" Then
    Local target //ユニットを変更するユニットのユニット名称またはユニットＩＤ（省略可）
    Local after  //変更先のユニット名称
    If Args(2) != "" Then
        Set target Args(1)
        Set after Args(2)
    Else
        Set target 対象ユニットＩＤ
        Set after Args(1)
    EndIf
    Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))
    
    Local パイロットＩＤ = PilotID(target)
    
    //武器の残数を全て取得
    Local weaponName
    Local bullet
    Local i
    For i = 1 To Info(ユニット, target, 武器数)
        Set weaponName[i] Info(ユニット, target, 武器, i)
        Set bullet[i] Info(ユニット, target, 武器, i, 弾数)
    Next
    
    Local beforeWeapons = Info(ユニット, target, 武器数)
    
    //アビリティの残数を全て取得
    Local abilityName
    Local stock
    For i = 1 To Info(ユニット, target, アビリティ数)
        Set abilityName[i] Info(ユニット, target, アビリティ, i)
        Set stock[i] Info(ユニット, target, アビリティ, i, 使用回数)
    Next
    
    Local beforeAbilities = Info(ユニット, target, アビリティ数)
    
    Upgrade target after
    Set target UnitID(パイロットＩＤ)
    
    Local 武器数差 = (Info(ユニット, target, 武器数) - beforeWeapons)
    Local アビリティ数差 = (Info(ユニット, target, アビリティ数) - beforeAbilities)
    
    For i = (1 + 武器数差) To Info(ユニット, target, 武器数)
        If 0 < i Then
            If Info(ユニット, target, 武器, i) = weaponName[i - 武器数差] Then
                Setbullet target i bullet[i - 武器数差]
            EndIf
        EndIf
    Next
    For i = (1 + アビリティ数差) To Info(ユニット, target, アビリティ数)
        If 0 < i Then
            If Info(ユニット, target, アビリティ, i) = abilityName[i - アビリティ数差] Then
                SetStock target i stock[i - アビリティ数差]
            EndIf
        EndIf
    Next
Else
    Talk
    サブルーチン「FEUpgrade」の引数の数が違います
    End
EndIf
Return


//コマンドの変身ではなく、ラグズの獣化や
//紋章マムクートの竜変化に当たる。
//アビリティからの呼び出しを想定
FE変身:
Local SE = "special_attack.wav"
If Args(1) != "" Then
    Local target //変身するユニットのメインパイロット名またはユニット名称またはユニットＩＤ（省略可）
    Local after  //変更先のユニット名称
    If Args(2) != "" Then
        Set target Args(1)
        Set after Args(2)
    Else
        Set target 対象ユニットＩＤ
        Set after Args(1)
    EndIf
    Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))
    Local パイロットＩＤ = PilotID(target)
    
    //変身元ユニットを保存
    Set FE変身元ユニット[Count(FE変身元ユニット) + 1] Unit(パイロットＩＤ)
    Set FE変身パイロット[Count(FE変身パイロット) + 1] パイロットＩＤ
    
    //演出
    PlaySound SE
    cls #FFFFFF
	Local 元HP = HP(パイロットＩＤ)
	Local 元EN = EN(パイロットＩＤ)
    FEUpgrade target after
	HP(パイロットＩＤ) = 元HP
	EN(パイロットＩＤ) = 元EN
    Redraw 非同期
    WhiteIn
    
    //実ステータスを設定
    SetSkill パイロットＩＤ 力   (Skill(パイロットＩＤ, 力  ) + Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "力上昇"  ))
    SetSkill パイロットＩＤ 技   (Skill(パイロットＩＤ, 技  ) + Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "技上昇"  ))
    SetSkill パイロットＩＤ 速さ (Skill(パイロットＩＤ, 速さ) + Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "速さ上昇"))
    SetSkill パイロットＩＤ 幸運 (Skill(パイロットＩＤ, 幸運) + Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "幸運上昇"))
    SetSkill パイロットＩＤ 魔力 (Skill(パイロットＩＤ, 魔力) + Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "魔力上昇"))
    SetSkill パイロットＩＤ 体格 (Skill(パイロットＩＤ, 体格) + Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "体格上昇"))
    Local i
    For i = 1 To Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "魔防上昇")
        Item 魔防＋１
        Equip UnitID(パイロットＩＤ) 魔防＋１
    Next
    For i = 1 To Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "守備上昇")
        Item 守備＋１
        Equip UnitID(パイロットＩＤ) 守備＋１
    Next
    For i = 1 To Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "ＨＰ上昇")
        Item ＨＰ＋１
        Equip UnitID(パイロットＩＤ) ＨＰ＋１
    Next
    
    //変身時間を設定
    If Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "変身ターン") != 0 Then
        Set FE変身ターン残り[Count(FE変身ターン残り) + 1] Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "変身ターン")
	Else
        Set FE変身ターン残り[Count(FE変身ターン残り) + 1] 10000
    EndIf
    
    //武器持ち替え
    If Info(ユニット, UnitID(パイロットＩＤ), 武器, Call(装備中武器番号取得, UnitID(パイロットＩＤ)), 使用可) = 0 Then
        Call FE武器持ち替え UnitID(パイロットＩＤ) Call(FE装備可能武器検索, UnitID(パイロットＩＤ))
    EndIf
Else
    Talk
    サブルーチン「FE変身」の引数の数が違います
    End
EndIf
Return


*ターン 全 味方:
*ターン 全 敵:
*ターン 全 中立:
*ターン 全 ＮＰＣ:
Local tmp
Local i
For i = 1 To Count(FE変身パイロット)
    If FE変身パイロット[i] != "" Then
        If Party(FE変身パイロット[i]) = フェイズ Then
			If Not FE変身ターン残り[i] = 10000 Then
	            Incr FE変身ターン残り[i] -1
			EndIf
            If FE変身ターン残り[i] <= 0 Then
                Set tmp FE変身パイロット[i]
                Call FE変身解除 UnitID(FE変身パイロット[i])
                If Status(tmp) = 出撃 Then
                    Center tmp
                    WhiteIn
                EndIf
            EndIf
        EndIf
    EndIf
Next
Exit 


FE変身解除:
Local target = Args(1) //元に戻るユニットのメインパイロット名またはユニット名称またはユニットＩＤ（省略可）
If Args(1) != "" Then
    Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))
    Local パイロットＩＤ = PilotID(target)
Else
    Set target 対象ユニットＩＤ
    Local パイロットＩＤ = 対象パイロット
EndIf
//実ステータスを設定
SetSkill パイロットＩＤ 力   (Skill(パイロットＩＤ, 力  ) - Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "力上昇"  ))
SetSkill パイロットＩＤ 技   (Skill(パイロットＩＤ, 技  ) - Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "技上昇"  ))
SetSkill パイロットＩＤ 速さ (Skill(パイロットＩＤ, 速さ) - Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "速さ上昇"))
SetSkill パイロットＩＤ 幸運 (Skill(パイロットＩＤ, 幸運) - Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "幸運上昇"))
SetSkill パイロットＩＤ 魔力 (Skill(パイロットＩＤ, 魔力) - Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "魔力上昇"))
SetSkill パイロットＩＤ 体格 (Skill(パイロットＩＤ, 体格) - Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "体格上昇"))
Local i
For i = 1 To Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "魔防上昇")
    RemoveItem UnitID(パイロットＩＤ) 魔防＋１
Next
For i = 1 To Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "守備上昇")
    RemoveItem UnitID(パイロットＩＤ) 守備＋１
Next
For i = 1 To Info(ユニット, UnitID(パイロットＩＤ), 特殊能力レベル, "ＨＰ上昇")
    RemoveItem UnitID(パイロットＩＤ) ＨＰ＋１
Next

//変身時間を設定
For i = 1 To Count(FE変身パイロット)
    If FE変身パイロット[i] = パイロットＩＤ Then
        Set FE変身パイロット[i] ""
	    Set FE変身ターン残り[i] ""
        Break
    EndIf
Next
Local 元HP = HP(パイロットＩＤ)
Local 元EN = EN(パイロットＩＤ)
FEUpgrade target FE変身元ユニット[i]
HP(パイロットＩＤ) = 元HP
EN(パイロットＩＤ) = 元EN
Set FE変身元ユニット[i] ""

//武器持ち替え
If Info(ユニット, UnitID(パイロットＩＤ), 武器, Call(装備中武器番号取得, UnitID(パイロットＩＤ)), 使用可) = 0 Then
    Call FE武器持ち替え UnitID(パイロットＩＤ) Call(FE装備可能武器検索, UnitID(パイロットＩＤ))
EndIf
Return


//装備可能な武器があれば武器番号を返します。
//見つからなかった場合は0を返します。
FE装備可能武器検索:
Local target = Args(1) //メインパイロット名またはユニット名称またはユニットＩＤ（省略可）
If Args(1) != "" Then
    Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))
Else
    Set target 対象ユニットＩＤ
EndIf

Local result = 0
Local i
For i = 1 To Info(ユニット, target, 武器数)
    If Info(ユニット, target, 武器, i, 使用可) = 1 Then
        Set result i
        Break
    EndIf
Next
Return result


//アイテムの残数を一覧表示する
//装備中の非表示以外のアイテムをリストに抽出
-*ユニットコマンド アイテム一覧 全:
Local itemArr numArr
Local i
For i = 1 To CountItem(対象ユニットＩＤ)
    If Info(Info(ユニット, 対象ユニットＩＤ, アイテム, i), 装備個所) != "非表示" Then
        Set itemArr[Count(itemArr) + 1] (Info(ユニット, 対象ユニットＩＤ, アイテム, i) & " " & アイテム残り回数取得(対象ユニットＩＤ, i) & IIf(Not アイテム最大回数取得(対象ユニットＩＤ, i) = "∞", " / " & アイテム最大回数取得(対象ユニットＩＤ, i), ""))
        Set numArr[Count(numArr) + 1] i
    EndIf
Next
Local fRunning = 1
Do
	Ask itemArr "クリックで詳細を表示（右クリックで終了）" キャンセル可
	If 選択 Then
		Talk
	    $(Info(Item(対象ユニットＩＤ, numArr[選択]), 解説文))
	    End
    Else
    	Set fRunning 0
	EndIf
Loop While fRunning
Exit


//敵にアイテムドロップを設定する
FEドロップ:
ドロップ:
Local target   //メインパイロット名またはユニット名称またはユニットＩＤ(省略可)
Local itemName //ドロップするアイテム名称
If Args(1) != "" Then
    If Args(2) = "" Then
        //引数が1つの時
        Set target 対象パイロット
        Set itemName Args(1)
    Else
    //引数が2つの時
        Set target Args(1)
        Set itemName Args(2)
    EndIf
    Set target PilotID(IIf(IsDefined(target, パイロット), UnitID(target), target))
	
	#既にドロップが設定されていた場合は、削除して新規に設定
	Local i
	For i = 1 To Info(パイロット, target, 特殊能力数)
		If Left(Info(パイロット, target, 特殊能力名称, i), 5) = "ドロップ　" Then
			ClearSkill target Info(パイロット, target, 特殊能力名称, i)
			Break
		EndIf
	Next
	
    If ドロップアイテム可視化フラグ = 1 Then
        SetSkill target ("ドロップ　" & itemName) -1
    Else
        SetSkill target ("ドロップ　" & itemName) -1 非表示
    EndIf
Else
    Talk
    サブルーチン「FEドロップ」の引数の数が違います
    End
EndIf
Return

//アイテムドロップ
アイテムドロップ:
Local target = IIf(Party(対象パイロット) = 味方 Or Party(対象パイロット) = ＮＰＣ, 対象パイロット, 相手パイロット)
Local enemy = IIf(Party(対象パイロット) = 味方 Or Party(対象パイロット) = ＮＰＣ, 相手パイロット, 対象パイロット)
If (Status(UnitID(enemy)) = 破壊) Or (破壊キャンセル状態[UnitID(enemy)] = 1) Then
    If Party(target) = 味方 Then
        Local i
        For i = 1 To Info(パイロット, enemy, 特殊能力数)
            If InStr(Info(パイロット, enemy, 特殊能力, i), "ドロップ　") != 0 Then
                Call アイテム入手 target Replace(Info(パイロット, enemy, 特殊能力, i), "ドロップ　", "")
            EndIf
        Next
    EndIf
EndIf
Return


転送:
Cancel
If 行動前座標Ｘ取得(対象パイロット) = X(対象パイロット) And 行動前座標Ｙ取得(対象パイロット) = Y(対象パイロット) Then
	Action(対象パイロット) = Action(対象パイロット) + 1
EndIf
Talk
ワープしたい座標で右クリックし、「転送する」を選んでください;（いずれかのユニットが行動をするとキャンセルします）
End
Set ワープ対象パイロット 対象パイロット
Set ワープ相手パイロット 相手パイロット
Set ワープアビリティ番号 対象ユニット使用アビリティ番号
Set ワープ使用
Return

ワープ終了処理:
UnSet ワープ対象パイロット
UnSet ワープ相手パイロット
Return

マップコマンド 転送する 転送する可否():
Local ワープアニメ = IIf(Info(ユニット, UnitID(ワープ対象パイロット), 特殊能力所有, Info(ユニット, UnitID(ワープ対象パイロット), アビリティ, ワープアビリティ番号) & アニメ), Info(ユニット, UnitID(ワープ対象パイロット), 特殊能力解説, Info(ユニット, UnitID(ワープ対象パイロット), アビリティ, ワープアビリティ番号) & アニメ), 五芒星)
Local ワープアニメオプション
If Info(ユニット, UnitID(ワープ対象パイロット), 特殊能力所有, Info(ユニット, UnitID(ワープ対象パイロット), アビリティ, ワープアビリティ番号) & アニメオプション) Then
	Array ワープアニメオプション Info(ユニット, UnitID(ワープ対象パイロット), 特殊能力解説, Info(ユニット, UnitID(ワープ対象パイロット), アビリティ, ワープアビリティ番号) & アニメオプション) リスト
ElseIf Not Info(ユニット, UnitID(ワープ対象パイロット), 特殊能力所有, Info(ユニット, UnitID(ワープ対象パイロット), アビリティ, ワープアビリティ番号) & アニメ) Then
	Set ワープアニメオプション[1] warp.wav
EndIf

Center ワープ相手パイロット
PlayEffect ワープアニメ ワープ相手パイロット ワープアニメオプション[1] ワープアニメオプション[2] ワープアニメオプション[3] ワープアニメオプション[4] ワープアニメオプション[5] ワープアニメオプション[6]
Move ワープ相手パイロット X(目標地点) Y(目標地点)
If Not Info(ユニット, UnitID(ワープ対象パイロット), 特殊能力所有, Info(ユニット, UnitID(ワープ対象パイロット), アビリティ, ワープアビリティ番号) & アニメ) Then
	WhiteIn
EndIf
If ワープアビリティ番号 != "" Then
	Local from = UnitID(ワープ対象パイロット)
	Local ability = ワープアビリティ番号
	Local target = UnitID(ワープ相手パイロット)
    SetStock from ワープアビリティ番号 (Info(ユニット, from, アビリティ, ability, 使用回数) - 1)
	If Info(Info(ユニット, from, アビリティ, ability), アイテムクラス) = "杖" Then
	    Call Ｐ−Ｄｅ＝Ｄ経験値加算 PilotID(from) Ｐ−Ｄｅ＝Ｄ獲得経験値取得(from, target, "杖", Info(ユニット, from, 特殊能力レベル, (Info(ユニット, from, アビリティ, ability) & "経験値")))
        Redraw
		If (Info(ユニット, from, アビリティ, ability, 最大使用回数) != 0) Then
		    If Info(ユニット, from, アビリティ, ability, 使用回数) <= 0 Then
		        //アイテム破損
		        If アイテム破損無効フラグ = "" Then
		            FERemoveItem from Info(ユニット, from, アビリティ, ability) 1
		        EndIf
		    EndIf
		EndIf
	EndIf
EndIf
Finish ワープ対象パイロット
Call 再移動判定 ワープ対象パイロット
Call FE再移動 ワープ対象パイロット
If Action(ワープ対象パイロット) <= 0 Then
    Call FEシステム状態変化解除 ワープ対象パイロット
EndIf
ワープ終了処理
Exit

転送する可否:
Local submit = 0
If IsVarDefined(ワープ対象パイロット) Then
	If 移動可能チェック(ワープ相手パイロット, X(目標地点), Y(目標地点)) Then
    	Set submit
    EndIf
EndIf
Return submit

*行動終了 味方:
If Not IsVarDefined(ワープ使用) Then
	Call ワープ終了処理
Else
	UnSet ワープ使用
EndIf
Exit

*ターン 全 味方:
Call ワープ終了処理
Exit

#ユニットがその座標に移動可能か調べる。移動できるなら1を、できないなら0を返す
移動可能チェック:
Local target = Args(1)
Local dx = Args(2)
Local dy = Args(3)
Set target UnitID(IIf(IsDefined(target, ユニット), PilotID(target), target))

Local submit = 0
Local 移動先情報
Local 移動先ユニット陣営 = Party(Info(マップ, dx, dy, ユニットＩＤ))
If 移動先ユニット陣営 = "" Or 移動先ユニット陣営 = Party(target) Then
	If Info(マップ, dx, dy, 移動コスト) != "-" Then
		Switch Info(マップ, dx, dy, 地形タイプ)
		Case 陸
	    	Set 移動先情報 "陸 空 地中"
		Case 屋内
	    	Set 移動先情報 "陸 空"
		Case 水
	    	Set 移動先情報 "水 陸 空"
		Case 深水
	    	Set 移動先情報 "水 空"
		Case 空
	    	Set 移動先情報 "空"
		Case 宇宙
	    	Set 移動先情報 "空 陸 水 地中 宇宙"
		Case 月面
	    	Set 移動先情報 "空 陸 地中 宇宙"
		EndSw
	    
		Local i
		For i = 1 To LLength(移動先情報)
			If InStr(Info(ユニット, target, 移動可能地形), LIndex(移動先情報, i)) != 0 Then
		    	Break
			EndIf
		Next
		If i <= LLength(移動先情報) Then
			Set submit
		EndIf
    EndIf
EndIf
Return submit

送還:
Local レスキューアニメ = IIf(Info(ユニット, 対象ユニットＩＤ, 特殊能力所有, 対象ユニット使用アビリティ & アニメ), Info(ユニット, 対象ユニットＩＤ, 特殊能力解説, 対象ユニット使用アビリティ & アニメ), 五芒星)
Local レスキューアニメオプション
If Info(ユニット, 対象ユニットＩＤ, 特殊能力所有, 対象ユニット使用アビリティ & アニメオプション) Then
	Array レスキューアニメオプション Info(ユニット, 対象ユニットＩＤ, 特殊能力解説, 対象ユニット使用アビリティ & アニメオプション) リスト
ElseIf Not Info(ユニット, 対象ユニットＩＤ, 特殊能力所有, 対象ユニット使用アビリティ & アニメ) Then
	Set レスキューアニメオプション[1] warp.wav
EndIf

Center 相手パイロット
PlayEffect レスキューアニメ 相手パイロット レスキューアニメオプション[1] レスキューアニメオプション[2] レスキューアニメオプション[3] レスキューアニメオプション[4] レスキューアニメオプション[5] レスキューアニメオプション[6]
Move 相手パイロット X(対象パイロット) Y(対象パイロット)
If Not Info(ユニット, 対象ユニットＩＤ, 特殊能力所有, 対象ユニット使用アビリティ & アニメ) Then
	WhiteIn
EndIf
Return

修復:
Local 修理アニメ = IIf(Info(ユニット, 対象ユニットＩＤ, 特殊能力所有, 対象ユニット使用アビリティ & アニメ), Info(ユニット, 対象ユニットＩＤ, 特殊能力解説, 対象ユニット使用アビリティ & アニメ), 時間逆行)
Local 修理アニメオプション
If Info(ユニット, 対象ユニットＩＤ, 特殊能力所有, 対象ユニット使用アビリティ & アニメオプション) Then
	Array 修理アニメオプション Info(ユニット, 対象ユニットＩＤ, 特殊能力解説, 対象ユニット使用アビリティ & アニメオプション) リスト
ElseIf Not Info(ユニット, 対象ユニットＩＤ, 特殊能力所有, 対象ユニット使用アビリティ & アニメ) Then
	Set 修理アニメオプション[1] warp.wav
EndIf

Local itemArr アイテム名Arr アイテム回数Arr アイテム最大回数Arr アイテム番号Arr
Local i
For i = 1 To CountItem(相手ユニットＩＤ)
    If Info(Info(ユニット, 相手ユニットＩＤ, アイテム, i), 装備個所) != "非表示" Then
    	If Not Info(ユニット, 相手ユニットＩＤ, アイテム, i) = 対象ユニット使用アビリティ Then
        	If Not アイテム最大回数取得(相手ユニットＩＤ, i) = "∞" Then
            	If Not アイテム残り回数取得(相手ユニットＩＤ, i) = アイテム最大回数取得(相手ユニットＩＤ, i) Then
                	If アイテム種別取得(相手ユニットＩＤ, Item(相手ユニットＩＤ,i)) = 武器 Or Info(Item(相手ユニットＩＤ,i), アイテムクラス) = 杖 Then
				        Set itemArr[Count(itemArr) + 1] (Info(ユニット, 相手ユニットＩＤ, アイテム, i) & " " & アイテム残り回数取得(相手ユニットＩＤ, i) & " / " & アイテム最大回数取得(相手ユニットＩＤ, i))
	    		        Set アイテム名Arr[Count(アイテム名Arr) + 1] Info(ユニット, 相手ユニットＩＤ, アイテム, i)
		    	        Set アイテム回数Arr[Count(アイテム回数Arr) + 1] アイテム残り回数取得(相手ユニットＩＤ, i)
	    	    	    Set アイテム最大回数Arr[Count(アイテム最大回数Arr) + 1] アイテム最大回数取得(相手ユニットＩＤ, i)
	                    Set アイテム番号Arr[Count(アイテム番号Arr) + 1] i
                    EndIf
                EndIf
	        EndIf
        EndIf
    EndIf
Next
If 0 < Count(itemArr) Then
	Ask itemArr "修理するアイテムを選んで下さい" キャンセル可
	If 選択 Then
	    If 装備中アイテム番号取得(相手ユニットＩＤ) = アイテム番号Arr[選択] Then
	        SetSkill 相手パイロット 装備中武器残表示 -1 (武器残 & "　" & アイテム最大回数Arr[選択])
	        SetSkill 相手パイロット 装備中武器残 アイテム最大回数Arr[選択] 非表示
	    EndIf
		Call アイテム残り回数設定 相手ユニットＩＤ アイテム番号Arr[選択] アイテム最大回数Arr[選択]
		PlayEffect 修理アニメ 相手パイロット 修理アニメオプション[1] 修理アニメオプション[2] 修理アニメオプション[3] 修理アニメオプション[4] 修理アニメオプション[5] 修理アニメオプション[6]
        Finish
	Else
		Cancel
		Action(対象パイロット) = Action(対象パイロット) + 1
		Move 行動前座標Ｘ取得(対象パイロット) 行動前座標Ｙ取得(対象パイロット)
	EndIf
Else
	Talk
    修理が必要なアイテムはありません
    End
	Cancel
	Action(対象パイロット) = Action(対象パイロット) + 1
	Move 行動前座標Ｘ取得(対象パイロット) 行動前座標Ｙ取得(対象パイロット)
EndIf
Return
